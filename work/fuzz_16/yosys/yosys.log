
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module28'.
Generating RTLIL representation for module `\module8'.
Generating RTLIL representation for module `\module132'.
Generating RTLIL representation for module `\module105'.
Generating RTLIL representation for module `\module70'.
Generating RTLIL representation for module `\module46'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell module28.modinst100 (module70).
Mapping positional arguments of cell module28.modinst68 (module46).
Mapping positional arguments of cell top.modinst176 (module28).
Mapping positional arguments of cell top.modinst27 (module8).
Warning: Resizing cell port module28.modinst157.wire133 from 22 bits to 20 bits.
Warning: Resizing cell port module28.modinst157.y from 11 bits to 192 bits.
Warning: Resizing cell port module28.modinst157.wire136 from 9 bits to 7 bits.
Warning: Resizing cell port module28.modinst157.wire134 from 16 bits to 10 bits.
Warning: Resizing cell port module28.modinst127.wire106 from 22 bits to 15 bits.
Warning: Resizing cell port module28.modinst127.wire109 from 19 bits to 12 bits.
Warning: Resizing cell port module28.modinst127.y from 20 bits to 185 bits.
Warning: Resizing cell port module28.modinst127.wire108 from 13 bits to 5 bits.
Warning: Resizing cell port module28.modinst100.y from 4 bits to 205 bits.
Warning: Resizing cell port module28.modinst100.wire75 from 14 bits to 13 bits.
Warning: Resizing cell port module28.modinst100.wire73 from 22 bits to 14 bits.
Warning: Resizing cell port module28.modinst100.wire72 from 22 bits to 3 bits.
Warning: Resizing cell port module28.modinst100.wire71 from 19 bits to 9 bits.
Warning: Resizing cell port module28.modinst68.y from 13 bits to 196 bits.
Warning: Resizing cell port module28.modinst68.wire48 from 9 bits to 5 bits.
Warning: Resizing cell port module28.modinst68.wire47 from 19 bits to 5 bits.
Warning: Resizing cell port top.modinst176.y from 9 bits to 337 bits.
Warning: Resizing cell port top.modinst176.wire30 from 15 bits to 9 bits.
Warning: Resizing cell port top.modinst160.wire29 from 19 bits to 14 bits.
Warning: Resizing cell port top.modinst160.y from 15 bits to 337 bits.
Warning: Resizing cell port top.modinst160.wire30 from 16 bits to 9 bits.
Warning: Resizing cell port top.modinst27.y from 12 bits to 125 bits.
Warning: Resizing cell port top.modinst27.wire12 from 12 bits to 7 bits.
Warning: Resizing cell port top.modinst27.wire9 from 18 bits to 11 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\module28.$proc$rtl.v:170$82'.
Cleaned up 1 empty switch.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$rtl.v:570$437 in module module70.
Marked 2 switch rules as full_case in process $proc$rtl.v:456$347 in module module105.
Marked 1 switch rules as full_case in process $proc$rtl.v:360$236 in module module132.
Marked 1 switch rules as full_case in process $proc$rtl.v:170$82 in module module28.
Marked 2 switch rules as full_case in process $proc$rtl.v:63$21 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module46.$proc$rtl.v:662$618'.
  Set init value: \reg56 = 15'000000000000000
Found init rule in `\module70.$proc$rtl.v:539$556'.
  Set init value: \reg76 = 8'00000000
Found init rule in `\module70.$proc$rtl.v:538$555'.
  Set init value: \reg77 = 12'000000000000
Found init rule in `\module70.$proc$rtl.v:537$554'.
  Set init value: \reg78 = 11'00000000000
Found init rule in `\module70.$proc$rtl.v:536$553'.
  Set init value: \reg79 = 16'0000000000000000
Found init rule in `\module70.$proc$rtl.v:535$552'.
  Set init value: \reg80 = 6'000000
Found init rule in `\module70.$proc$rtl.v:534$551'.
  Set init value: \reg81 = 9'000000000
Found init rule in `\module70.$proc$rtl.v:533$550'.
  Set init value: \reg82 = 3'000
Found init rule in `\module70.$proc$rtl.v:532$549'.
  Set init value: \reg83 = 13'0000000000000
Found init rule in `\module70.$proc$rtl.v:531$548'.
  Set init value: \reg84 = 9'000000000
Found init rule in `\module70.$proc$rtl.v:530$547'.
  Set init value: \reg85 = 15'000000000000000
Found init rule in `\module70.$proc$rtl.v:524$546'.
  Set init value: \reg91 = 14'00000000000000
Found init rule in `\module70.$proc$rtl.v:523$545'.
  Set init value: \reg92 = 11'00000000000
Found init rule in `\module70.$proc$rtl.v:518$544'.
  Set init value: \reg97 = 11'00000000000
Found init rule in `\module70.$proc$rtl.v:517$543'.
  Set init value: \reg98 = 5'00000
Found init rule in `\module105.$proc$rtl.v:428$430'.
  Set init value: \reg114 = 20'00000000000000000000
Found init rule in `\module105.$proc$rtl.v:427$429'.
  Set init value: \reg115 = 20'00000000000000000000
Found init rule in `\module105.$proc$rtl.v:426$428'.
  Set init value: \reg116 = 14'00000000000000
Found init rule in `\module105.$proc$rtl.v:425$427'.
  Set init value: \reg117 = 7'0000000
Found init rule in `\module105.$proc$rtl.v:424$426'.
  Set init value: \reg118 = 12'000000000000
Found init rule in `\module105.$proc$rtl.v:423$425'.
  Set init value: \reg119 = 21'000000000000000000000
Found init rule in `\module105.$proc$rtl.v:422$424'.
  Set init value: \reg120 = 12'000000000000
Found init rule in `\module105.$proc$rtl.v:421$423'.
  Set init value: \reg121 = 13'0000000000000
Found init rule in `\module132.$proc$rtl.v:329$327'.
  Set init value: \reg140 = 13'0000000000000
Found init rule in `\module132.$proc$rtl.v:328$326'.
  Set init value: \reg141 = 14'00000000000000
Found init rule in `\module132.$proc$rtl.v:327$325'.
  Set init value: \reg142 = 3'000
Found init rule in `\module132.$proc$rtl.v:326$324'.
  Set init value: \reg143 = 13'0000000000000
Found init rule in `\module132.$proc$rtl.v:325$323'.
  Set init value: \reg144 = 21'000000000000000000000
Found init rule in `\module132.$proc$rtl.v:324$322'.
  Set init value: \reg145 = 7'0000000
Found init rule in `\module132.$proc$rtl.v:323$321'.
  Set init value: \reg146 = 3'000
Found init rule in `\module8.$proc$rtl.v:265$216'.
  Set init value: \reg17 = 12'000000000000
Found init rule in `\module8.$proc$rtl.v:264$215'.
  Set init value: \reg18 = 17'00000000000000000
Found init rule in `\module28.$proc$rtl.v:137$173'.
  Set init value: \reg45 = 20'00000000000000000000
Found init rule in `\module28.$proc$rtl.v:136$172'.
  Set init value: \reg44 = 16'0000000000000000
Found init rule in `\module28.$proc$rtl.v:135$171'.
  Set init value: \reg43 = 21'000000000000000000000
Found init rule in `\module28.$proc$rtl.v:134$170'.
  Set init value: \reg42 = 11'00000000000
Found init rule in `\module28.$proc$rtl.v:129$165'.
  Set init value: \reg37 = 17'00000000000000000
Found init rule in `\module28.$proc$rtl.v:128$164'.
  Set init value: \reg36 = 4'0000
Found init rule in `\module28.$proc$rtl.v:127$163'.
  Set init value: \reg35 = 22'0000000000000000000000
Found init rule in `\module28.$proc$rtl.v:126$162'.
  Set init value: \reg34 = 18'000000000000000000
Found init rule in `\top.$proc$rtl.v:23$73'.
  Set init value: \reg164 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:22$72'.
  Set init value: \reg165 = 9'000000000
Found init rule in `\top.$proc$rtl.v:21$71'.
  Set init value: \reg166 = 14'00000000000000
Found init rule in `\top.$proc$rtl.v:20$70'.
  Set init value: \reg167 = 5'00000
Found init rule in `\top.$proc$rtl.v:19$69'.
  Set init value: \reg168 = 18'000000000000000000
Found init rule in `\top.$proc$rtl.v:18$68'.
  Set init value: \reg169 = 4'0000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module46.$proc$rtl.v:662$618'.
     1/1: $1\reg56[14:0]
Creating decoders for process `\module46.$proc$rtl.v:693$575'.
     1/1: $0\reg56[14:0]
Creating decoders for process `\module70.$proc$rtl.v:539$556'.
     1/1: $1\reg76[7:0]
Creating decoders for process `\module70.$proc$rtl.v:538$555'.
     1/1: $1\reg77[11:0]
Creating decoders for process `\module70.$proc$rtl.v:537$554'.
     1/1: $1\reg78[10:0]
Creating decoders for process `\module70.$proc$rtl.v:536$553'.
     1/1: $1\reg79[15:0]
Creating decoders for process `\module70.$proc$rtl.v:535$552'.
     1/1: $1\reg80[5:0]
Creating decoders for process `\module70.$proc$rtl.v:534$551'.
     1/1: $1\reg81[8:0]
Creating decoders for process `\module70.$proc$rtl.v:533$550'.
     1/1: $1\reg82[2:0]
Creating decoders for process `\module70.$proc$rtl.v:532$549'.
     1/1: $1\reg83[12:0]
Creating decoders for process `\module70.$proc$rtl.v:531$548'.
     1/1: $1\reg84[8:0]
Creating decoders for process `\module70.$proc$rtl.v:530$547'.
     1/1: $1\reg85[14:0]
Creating decoders for process `\module70.$proc$rtl.v:524$546'.
     1/1: $1\reg91[13:0]
Creating decoders for process `\module70.$proc$rtl.v:523$545'.
     1/1: $1\reg92[10:0]
Creating decoders for process `\module70.$proc$rtl.v:518$544'.
     1/1: $1\reg97[10:0]
Creating decoders for process `\module70.$proc$rtl.v:517$543'.
     1/1: $1\reg98[4:0]
Creating decoders for process `\module70.$proc$rtl.v:637$536'.
     1/2: $0\reg98[4:0]
     2/2: $0\reg97[10:0]
Creating decoders for process `\module70.$proc$rtl.v:622$517'.
     1/1: $0\reg92[10:0]
Creating decoders for process `\module70.$proc$rtl.v:618$515'.
     1/1: $0\reg91[13:0]
Creating decoders for process `\module70.$proc$rtl.v:570$437'.
     1/7: $0\reg81[8:0]
     2/7: $0\reg80[5:0]
     3/7: $0\reg79[15:0]
     4/7: $0\reg82[2:0]
     5/7: $0\reg83[12:0]
     6/7: $0\reg84[8:0]
     7/7: $0\reg85[14:0]
Creating decoders for process `\module70.$proc$rtl.v:564$431'.
     1/3: $0\reg78[10:0]
     2/3: $0\reg77[11:0]
     3/3: $0\reg76[7:0]
Creating decoders for process `\module105.$proc$rtl.v:428$430'.
     1/1: $1\reg114[19:0]
Creating decoders for process `\module105.$proc$rtl.v:427$429'.
     1/1: $1\reg115[19:0]
Creating decoders for process `\module105.$proc$rtl.v:426$428'.
     1/1: $1\reg116[13:0]
Creating decoders for process `\module105.$proc$rtl.v:425$427'.
     1/1: $1\reg117[6:0]
Creating decoders for process `\module105.$proc$rtl.v:424$426'.
     1/1: $1\reg118[11:0]
Creating decoders for process `\module105.$proc$rtl.v:423$425'.
     1/1: $1\reg119[20:0]
Creating decoders for process `\module105.$proc$rtl.v:422$424'.
     1/1: $1\reg120[11:0]
Creating decoders for process `\module105.$proc$rtl.v:421$423'.
     1/1: $1\reg121[12:0]
Creating decoders for process `\module105.$proc$rtl.v:456$347'.
     1/8: $0\reg114[19:0]
     2/8: $0\reg115[19:0]
     3/8: $0\reg116[13:0]
     4/8: $0\reg118[11:0]
     5/8: $0\reg119[20:0]
     6/8: $0\reg120[11:0]
     7/8: $0\reg117[6:0]
     8/8: $0\reg121[12:0]
Creating decoders for process `\module132.$proc$rtl.v:329$327'.
     1/1: $1\reg140[12:0]
Creating decoders for process `\module132.$proc$rtl.v:328$326'.
     1/1: $1\reg141[13:0]
Creating decoders for process `\module132.$proc$rtl.v:327$325'.
     1/1: $1\reg142[2:0]
Creating decoders for process `\module132.$proc$rtl.v:326$324'.
     1/1: $1\reg143[12:0]
Creating decoders for process `\module132.$proc$rtl.v:325$323'.
     1/1: $1\reg144[20:0]
Creating decoders for process `\module132.$proc$rtl.v:324$322'.
     1/1: $1\reg145[6:0]
Creating decoders for process `\module132.$proc$rtl.v:323$321'.
     1/1: $1\reg146[2:0]
Creating decoders for process `\module132.$proc$rtl.v:360$236'.
     1/7: $0\reg146[2:0]
     2/7: $0\reg145[6:0]
     3/7: $0\reg144[20:0]
     4/7: $0\reg140[12:0]
     5/7: $0\reg141[13:0]
     6/7: $0\reg142[2:0]
     7/7: $0\reg143[12:0]
Creating decoders for process `\module8.$proc$rtl.v:265$216'.
     1/1: $1\reg17[11:0]
Creating decoders for process `\module8.$proc$rtl.v:264$215'.
     1/1: $1\reg18[16:0]
Creating decoders for process `\module8.$proc$rtl.v:288$187'.
     1/2: $0\reg18[16:0]
     2/2: $0\reg17[11:0]
Creating decoders for process `\module28.$proc$rtl.v:137$173'.
     1/1: $1\reg45[19:0]
Creating decoders for process `\module28.$proc$rtl.v:136$172'.
     1/1: $1\reg44[15:0]
Creating decoders for process `\module28.$proc$rtl.v:135$171'.
     1/1: $1\reg43[20:0]
Creating decoders for process `\module28.$proc$rtl.v:134$170'.
     1/1: $1\reg42[10:0]
Creating decoders for process `\module28.$proc$rtl.v:133$169'.
     1/1: $0\reg41[18:0]
Creating decoders for process `\module28.$proc$rtl.v:132$168'.
     1/1: $0\reg40[5:0]
Creating decoders for process `\module28.$proc$rtl.v:131$167'.
     1/1: $0\reg39[21:0]
Creating decoders for process `\module28.$proc$rtl.v:130$166'.
     1/1: $0\reg38[18:0]
Creating decoders for process `\module28.$proc$rtl.v:129$165'.
     1/1: $1\reg37[16:0]
Creating decoders for process `\module28.$proc$rtl.v:128$164'.
     1/1: $1\reg36[3:0]
Creating decoders for process `\module28.$proc$rtl.v:127$163'.
     1/1: $1\reg35[21:0]
Creating decoders for process `\module28.$proc$rtl.v:126$162'.
     1/1: $1\reg34[17:0]
Creating decoders for process `\module28.$proc$rtl.v:170$82'.
     1/8: $0\reg45[19:0]
     2/8: $0\reg44[15:0]
     3/8: $0\reg43[20:0]
     4/8: $0\reg42[10:0]
     5/8: $0\reg37[16:0]
     6/8: $0\reg36[3:0]
     7/8: $0\reg35[21:0]
     8/8: $0\reg34[17:0]
Creating decoders for process `\top.$proc$rtl.v:23$73'.
     1/1: $1\reg164[15:0]
Creating decoders for process `\top.$proc$rtl.v:22$72'.
     1/1: $1\reg165[8:0]
Creating decoders for process `\top.$proc$rtl.v:21$71'.
     1/1: $1\reg166[13:0]
Creating decoders for process `\top.$proc$rtl.v:20$70'.
     1/1: $1\reg167[4:0]
Creating decoders for process `\top.$proc$rtl.v:19$69'.
     1/1: $1\reg168[17:0]
Creating decoders for process `\top.$proc$rtl.v:18$68'.
     1/1: $1\reg169[3:0]
Creating decoders for process `\top.$proc$rtl.v:63$21'.
     1/6: $0\reg164[15:0]
     2/6: $0\reg165[8:0]
     3/6: $0\reg166[13:0]
     4/6: $0\reg167[4:0]
     5/6: $0\reg168[17:0]
     6/6: $0\reg169[3:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\module28.\reg41' from process `\module28.$proc$rtl.v:133$169'.
No latch inferred for signal `\module28.\reg40' from process `\module28.$proc$rtl.v:132$168'.
No latch inferred for signal `\module28.\reg39' from process `\module28.$proc$rtl.v:131$167'.
No latch inferred for signal `\module28.\reg38' from process `\module28.$proc$rtl.v:130$166'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module46.\reg56' using process `\module46.$proc$rtl.v:693$575'.
  created $dff cell `$procdff$734' with positive edge clock.
Creating register for signal `\module70.\reg98' using process `\module70.$proc$rtl.v:637$536'.
  created $dff cell `$procdff$735' with positive edge clock.
Creating register for signal `\module70.\reg97' using process `\module70.$proc$rtl.v:637$536'.
  created $dff cell `$procdff$736' with positive edge clock.
Creating register for signal `\module70.\reg92' using process `\module70.$proc$rtl.v:622$517'.
  created $dff cell `$procdff$737' with positive edge clock.
Creating register for signal `\module70.\reg91' using process `\module70.$proc$rtl.v:618$515'.
  created $dff cell `$procdff$738' with positive edge clock.
Creating register for signal `\module70.\reg85' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$739' with positive edge clock.
Creating register for signal `\module70.\reg84' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$740' with positive edge clock.
Creating register for signal `\module70.\reg83' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$741' with positive edge clock.
Creating register for signal `\module70.\reg82' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$742' with positive edge clock.
Creating register for signal `\module70.\reg81' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$743' with positive edge clock.
Creating register for signal `\module70.\reg80' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$744' with positive edge clock.
Creating register for signal `\module70.\reg79' using process `\module70.$proc$rtl.v:570$437'.
  created $dff cell `$procdff$745' with positive edge clock.
Creating register for signal `\module70.\reg78' using process `\module70.$proc$rtl.v:564$431'.
  created $dff cell `$procdff$746' with positive edge clock.
Creating register for signal `\module70.\reg77' using process `\module70.$proc$rtl.v:564$431'.
  created $dff cell `$procdff$747' with positive edge clock.
Creating register for signal `\module70.\reg76' using process `\module70.$proc$rtl.v:564$431'.
  created $dff cell `$procdff$748' with positive edge clock.
Creating register for signal `\module105.\reg121' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$749' with positive edge clock.
Creating register for signal `\module105.\reg117' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$750' with positive edge clock.
Creating register for signal `\module105.\reg120' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$751' with positive edge clock.
Creating register for signal `\module105.\reg119' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$752' with positive edge clock.
Creating register for signal `\module105.\reg118' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$753' with positive edge clock.
Creating register for signal `\module105.\reg116' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$754' with positive edge clock.
Creating register for signal `\module105.\reg115' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$755' with positive edge clock.
Creating register for signal `\module105.\reg114' using process `\module105.$proc$rtl.v:456$347'.
  created $dff cell `$procdff$756' with positive edge clock.
Creating register for signal `\module132.\reg146' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$757' with positive edge clock.
Creating register for signal `\module132.\reg145' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$758' with positive edge clock.
Creating register for signal `\module132.\reg144' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$759' with positive edge clock.
Creating register for signal `\module132.\reg143' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$760' with positive edge clock.
Creating register for signal `\module132.\reg142' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$761' with positive edge clock.
Creating register for signal `\module132.\reg141' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$762' with positive edge clock.
Creating register for signal `\module132.\reg140' using process `\module132.$proc$rtl.v:360$236'.
  created $dff cell `$procdff$763' with positive edge clock.
Creating register for signal `\module8.\reg18' using process `\module8.$proc$rtl.v:288$187'.
  created $dff cell `$procdff$764' with positive edge clock.
Creating register for signal `\module8.\reg17' using process `\module8.$proc$rtl.v:288$187'.
  created $dff cell `$procdff$765' with positive edge clock.
Creating register for signal `\module28.\reg34' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$766' with positive edge clock.
Creating register for signal `\module28.\reg35' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$767' with positive edge clock.
Creating register for signal `\module28.\reg36' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$768' with positive edge clock.
Creating register for signal `\module28.\reg37' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$769' with positive edge clock.
Creating register for signal `\module28.\reg42' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$770' with positive edge clock.
Creating register for signal `\module28.\reg43' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$771' with positive edge clock.
Creating register for signal `\module28.\reg44' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$772' with positive edge clock.
Creating register for signal `\module28.\reg45' using process `\module28.$proc$rtl.v:170$82'.
  created $dff cell `$procdff$773' with positive edge clock.
Creating register for signal `\top.\reg169' using process `\top.$proc$rtl.v:63$21'.
  created $dff cell `$procdff$774' with positive edge clock.
Creating register for signal `\top.\reg168' using process `\top.$proc$rtl.v:63$21'.
  created $dff cell `$procdff$775' with positive edge clock.
Creating register for signal `\top.\reg167' using process `\top.$proc$rtl.v:63$21'.
  created $dff cell `$procdff$776' with positive edge clock.
Creating register for signal `\top.\reg166' using process `\top.$proc$rtl.v:63$21'.
  created $dff cell `$procdff$777' with positive edge clock.
Creating register for signal `\top.\reg165' using process `\top.$proc$rtl.v:63$21'.
  created $dff cell `$procdff$778' with positive edge clock.
Creating register for signal `\top.\reg164' using process `\top.$proc$rtl.v:63$21'.
  created $dff cell `$procdff$779' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module46.$proc$rtl.v:662$618'.
Removing empty process `module46.$proc$rtl.v:693$575'.
Removing empty process `module70.$proc$rtl.v:539$556'.
Removing empty process `module70.$proc$rtl.v:538$555'.
Removing empty process `module70.$proc$rtl.v:537$554'.
Removing empty process `module70.$proc$rtl.v:536$553'.
Removing empty process `module70.$proc$rtl.v:535$552'.
Removing empty process `module70.$proc$rtl.v:534$551'.
Removing empty process `module70.$proc$rtl.v:533$550'.
Removing empty process `module70.$proc$rtl.v:532$549'.
Removing empty process `module70.$proc$rtl.v:531$548'.
Removing empty process `module70.$proc$rtl.v:530$547'.
Removing empty process `module70.$proc$rtl.v:524$546'.
Removing empty process `module70.$proc$rtl.v:523$545'.
Removing empty process `module70.$proc$rtl.v:518$544'.
Removing empty process `module70.$proc$rtl.v:517$543'.
Removing empty process `module70.$proc$rtl.v:637$536'.
Removing empty process `module70.$proc$rtl.v:622$517'.
Removing empty process `module70.$proc$rtl.v:618$515'.
Found and cleaned up 2 empty switches in `\module70.$proc$rtl.v:570$437'.
Removing empty process `module70.$proc$rtl.v:570$437'.
Removing empty process `module70.$proc$rtl.v:564$431'.
Removing empty process `module105.$proc$rtl.v:428$430'.
Removing empty process `module105.$proc$rtl.v:427$429'.
Removing empty process `module105.$proc$rtl.v:426$428'.
Removing empty process `module105.$proc$rtl.v:425$427'.
Removing empty process `module105.$proc$rtl.v:424$426'.
Removing empty process `module105.$proc$rtl.v:423$425'.
Removing empty process `module105.$proc$rtl.v:422$424'.
Removing empty process `module105.$proc$rtl.v:421$423'.
Found and cleaned up 2 empty switches in `\module105.$proc$rtl.v:456$347'.
Removing empty process `module105.$proc$rtl.v:456$347'.
Removing empty process `module132.$proc$rtl.v:329$327'.
Removing empty process `module132.$proc$rtl.v:328$326'.
Removing empty process `module132.$proc$rtl.v:327$325'.
Removing empty process `module132.$proc$rtl.v:326$324'.
Removing empty process `module132.$proc$rtl.v:325$323'.
Removing empty process `module132.$proc$rtl.v:324$322'.
Removing empty process `module132.$proc$rtl.v:323$321'.
Found and cleaned up 1 empty switch in `\module132.$proc$rtl.v:360$236'.
Removing empty process `module132.$proc$rtl.v:360$236'.
Removing empty process `module8.$proc$rtl.v:265$216'.
Removing empty process `module8.$proc$rtl.v:264$215'.
Removing empty process `module8.$proc$rtl.v:288$187'.
Removing empty process `module28.$proc$rtl.v:137$173'.
Removing empty process `module28.$proc$rtl.v:136$172'.
Removing empty process `module28.$proc$rtl.v:135$171'.
Removing empty process `module28.$proc$rtl.v:134$170'.
Removing empty process `module28.$proc$rtl.v:133$169'.
Removing empty process `module28.$proc$rtl.v:132$168'.
Removing empty process `module28.$proc$rtl.v:131$167'.
Removing empty process `module28.$proc$rtl.v:130$166'.
Removing empty process `module28.$proc$rtl.v:129$165'.
Removing empty process `module28.$proc$rtl.v:128$164'.
Removing empty process `module28.$proc$rtl.v:127$163'.
Removing empty process `module28.$proc$rtl.v:126$162'.
Found and cleaned up 1 empty switch in `\module28.$proc$rtl.v:170$82'.
Removing empty process `module28.$proc$rtl.v:170$82'.
Removing empty process `top.$proc$rtl.v:23$73'.
Removing empty process `top.$proc$rtl.v:22$72'.
Removing empty process `top.$proc$rtl.v:21$71'.
Removing empty process `top.$proc$rtl.v:20$70'.
Removing empty process `top.$proc$rtl.v:19$69'.
Removing empty process `top.$proc$rtl.v:18$68'.
Found and cleaned up 2 empty switches in `\top.$proc$rtl.v:63$21'.
Removing empty process `top.$proc$rtl.v:63$21'.
Cleaned up 8 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module46.
<suppressed ~17 debug messages>
Optimizing module module70.
<suppressed ~11 debug messages>
Optimizing module module105.
<suppressed ~14 debug messages>
Optimizing module module132.
<suppressed ~9 debug messages>
Optimizing module module8.
<suppressed ~3 debug messages>
Optimizing module module28.
<suppressed ~22 debug messages>
Optimizing module top.
<suppressed ~7 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \top..
Removed 39 unused cells and 342 unused wires.
<suppressed ~115 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module105..
checking module module132..
checking module module28..
checking module module46..
checking module module70..
checking module module8..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
<suppressed ~1 debug messages>
Optimizing module module8.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module132'.
<suppressed ~12 debug messages>
Finding identical cells in module `\module28'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 8 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $ternary$rtl.v:393$286.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1 multiplexer ports.
<suppressed ~87 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
    New input vector for $reduce_or cell $reduce_or$rtl.v:497$415: { \wire107 [0] \wire107 [1] \wire107 [2] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:464$367: { $ternary$rtl.v:464$366_Y [0] $ternary$rtl.v:464$366_Y [1] $ternary$rtl.v:464$366_Y [2] $ternary$rtl.v:464$366_Y [3] $ternary$rtl.v:464$366_Y [4] $ternary$rtl.v:464$366_Y [5] $ternary$rtl.v:464$366_Y [6] $ternary$rtl.v:464$366_Y [7] $ternary$rtl.v:464$366_Y [8] $ternary$rtl.v:464$366_Y [9] $ternary$rtl.v:464$366_Y [10] $ternary$rtl.v:464$366_Y [11] $ternary$rtl.v:464$366_Y [12] $ternary$rtl.v:464$366_Y [13] $ternary$rtl.v:464$366_Y [14] $ternary$rtl.v:464$366_Y [15] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:463$361: { \wire110 [0] \wire110 [1] \wire110 [2] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:459$349: { \wire107 [0] \wire107 [1] \wire107 [2] \wire107 [3] \wire107 [4] \wire107 [5] \wire107 [6] \wire107 [7] \wire107 [8] \wire107 [9] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:449$328: { \wire106 [0] \wire106 [1] \wire106 [2] \wire106 [3] \wire106 [4] \wire106 [5] \wire106 [6] \wire106 [7] \wire106 [8] \wire106 [9] \wire106 [10] \wire106 [11] \wire106 [12] \wire106 [13] \wire106 [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:487$397: { \wire107 [0] \wire107 [1] \wire107 [2] \wire107 [3] \wire107 [4] \wire107 [5] \wire107 [6] \wire107 [7] \wire107 [8] \wire107 [9] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:459$348: { \wire106 [0] \wire106 [1] \wire106 [2] \wire106 [3] \wire106 [4] \wire106 [5] \wire106 [6] \wire106 [7] \wire106 [8] \wire106 [9] \wire106 [10] \wire106 [11] \wire106 [12] \wire106 [13] \wire106 [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:453$336: { \wire108 [0] \wire108 [1] \wire108 [2] \wire108 [3] \wire108 [4] }
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
    New input vector for $reduce_or cell $reduce_or$rtl.v:400$302: { \reg143 [0] \reg143 [1] \reg143 [2] \reg143 [3] \reg143 [4] \reg143 [5] \reg143 [6] \reg143 [7] \reg143 [8] \reg143 [9] \reg143 [10] \reg143 [11] \reg143 [12] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:354$217: { \wire134 [0] \wire134 [1] \wire134 [2] \wire134 [3] \wire134 [4] \wire134 [5] \wire134 [6] \wire134 [7] \wire134 [8] \wire134 [9] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:385$281: { \reg141 [0] \reg141 [1] \reg141 [2] \reg141 [3] \reg141 [4] \reg141 [5] \reg141 [6] \reg141 [7] \reg141 [8] \reg141 [9] \reg141 [10] \reg141 [11] \reg141 [12] \reg141 [13] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:384$277: { \reg141 [0] \reg141 [1] \reg141 [2] \reg141 [3] \reg141 [4] \reg141 [5] \reg141 [6] \reg141 [7] \reg141 [8] \reg141 [9] \reg141 [10] \reg141 [11] \reg141 [12] \reg141 [13] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:366$245: { \reg140 [0] \reg140 [1] \reg140 [2] \reg140 [3] \reg140 [4] \reg140 [5] \reg140 [6] \reg140 [7] \reg140 [8] \reg140 [9] \reg140 [10] \reg140 [11] \reg140 [12] }
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
    New input vector for $reduce_and cell $reduce_and$rtl.v:243$150: { \wire32 [0] \wire32 [1] \wire32 [2] \wire32 [3] \wire32 [4] \wire32 [5] \wire32 [6] \wire32 [7] \wire32 [8] \wire32 [9] \wire32 [10] \wire32 [11] \wire32 [12] \wire32 [13] \wire32 [14] \wire32 [15] \wire32 [16] \wire32 [17] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:243$148: { \reg37 [0] \reg37 [1] \reg37 [2] \reg37 [3] \reg37 [4] \reg37 [5] \reg37 [6] \reg37 [7] \reg37 [8] \reg37 [9] \reg37 [10] \reg37 [11] \reg37 [12] \reg37 [13] \reg37 [14] \reg37 [15] \reg37 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:220$115: { \reg44 [0] \reg44 [1] \reg44 [2] \reg44 [3] \reg44 [4] \reg44 [5] \reg44 [6] \reg44 [7] \reg44 [8] \reg44 [9] \reg44 [10] \reg44 [11] \reg44 [12] \reg44 [13] \reg44 [14] \reg44 [15] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:169$75: { $not$rtl.v:169$74_Y [0] $not$rtl.v:169$74_Y [1] $not$rtl.v:169$74_Y [2] $not$rtl.v:169$74_Y [3] $not$rtl.v:169$74_Y [4] $not$rtl.v:169$74_Y [5] $not$rtl.v:169$74_Y [6] $not$rtl.v:169$74_Y [7] $not$rtl.v:169$74_Y [8] $not$rtl.v:169$74_Y [9] $not$rtl.v:169$74_Y [10] $not$rtl.v:169$74_Y [11] $not$rtl.v:169$74_Y [12] $not$rtl.v:169$74_Y [13] $not$rtl.v:169$74_Y [14] $not$rtl.v:169$74_Y [15] $not$rtl.v:169$74_Y [16] $not$rtl.v:169$74_Y [17] }
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:703$585: { \wire58 [0] \wire58 [1] \wire58 [2] \wire58 [3] \wire58 [4] \wire58 [5] \wire58 [6] \wire58 [7] \wire58 [8] \wire58 [9] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:698$581: { \reg56 [0] \reg56 [1] \reg56 [2] \reg56 [3] \reg56 [4] \reg56 [5] \reg56 [6] \reg56 [7] \reg56 [8] \reg56 [9] \reg56 [10] \reg56 [11] \reg56 [12] \reg56 [13] \reg56 [14] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:696$579: { $eq$rtl.v:696$577_Y [0] $eq$rtl.v:696$577_Y [1] $eq$rtl.v:696$577_Y [2] $eq$rtl.v:696$577_Y [3] $eq$rtl.v:696$577_Y [4] $eq$rtl.v:696$577_Y [5] $eq$rtl.v:696$577_Y [6] $eq$rtl.v:696$577_Y [7] $eq$rtl.v:696$577_Y [8] $eq$rtl.v:696$577_Y [9] $eq$rtl.v:696$577_Y [10] $eq$rtl.v:696$577_Y [11] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:687$560: { \wire50 [0] \wire50 [1] \wire50 [2] \wire50 [3] \wire50 [4] \wire50 [5] \wire50 [6] \wire50 [7] \wire50 [8] \wire50 [9] \wire50 [10] \wire50 [11] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:704$594: { $ternary$rtl.v:704$593_Y [0] $ternary$rtl.v:704$593_Y [1] $ternary$rtl.v:704$593_Y [2] $ternary$rtl.v:704$593_Y [3] $ternary$rtl.v:704$593_Y [4] $ternary$rtl.v:704$593_Y [5] $ternary$rtl.v:704$593_Y [6] $ternary$rtl.v:704$593_Y [7] $ternary$rtl.v:704$593_Y [8] $ternary$rtl.v:704$593_Y [9] $ternary$rtl.v:704$593_Y [10] $ternary$rtl.v:704$593_Y [11] $ternary$rtl.v:704$593_Y [12] $ternary$rtl.v:704$593_Y [13] $ternary$rtl.v:704$593_Y [14] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
    New input vector for $reduce_or cell $reduce_or$rtl.v:611$505: { \reg83 [0] \reg83 [1] \reg83 [2] \reg83 [3] \reg83 [4] \reg83 [5] \reg83 [6] \reg83 [7] \reg83 [8] \reg83 [9] \reg83 [10] \reg83 [11] \reg83 [12] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:593$480: { \reg78 [0] \reg78 [1] \reg78 [2] \reg78 [3] \reg78 [4] \reg78 [5] \reg78 [6] \reg78 [7] \reg78 [8] \reg78 [9] \reg78 [10] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:579$459: { $shl$rtl.v:579$458_Y [0] $shl$rtl.v:579$458_Y [1] $shl$rtl.v:579$458_Y [2] $shl$rtl.v:579$458_Y [3] $shl$rtl.v:579$458_Y [4] $shl$rtl.v:579$458_Y [5] $shl$rtl.v:579$458_Y [6] $shl$rtl.v:579$458_Y [7] $shl$rtl.v:579$458_Y [8] $shl$rtl.v:579$458_Y [9] $shl$rtl.v:579$458_Y [10] $shl$rtl.v:579$458_Y [11] $shl$rtl.v:579$458_Y [12] $shl$rtl.v:579$458_Y [13] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:582$475: { $ternary$rtl.v:582$474_Y [0] $ternary$rtl.v:582$474_Y [1] $ternary$rtl.v:582$474_Y [2] $ternary$rtl.v:582$474_Y [3] $ternary$rtl.v:582$474_Y [4] $ternary$rtl.v:582$474_Y [5] $ternary$rtl.v:582$474_Y [6] $ternary$rtl.v:582$474_Y [7] $ternary$rtl.v:582$474_Y [8] $ternary$rtl.v:582$474_Y [9] $ternary$rtl.v:582$474_Y [10] $ternary$rtl.v:582$474_Y [11] $ternary$rtl.v:582$474_Y [12] }
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
    New input vector for $reduce_or cell $reduce_or$rtl.v:303$213: { \wire11 [0] \wire11 [1] \wire11 [2] \wire11 [3] \wire11 [4] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:302$209: { \wire11 [7] \wire11 [8] \wire11 [9] \wire11 [10] \wire11 [11] \wire11 [12] \wire11 [13] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:300$207: { $ternary$rtl.v:300$206_Y [0] $ternary$rtl.v:300$206_Y [1] $ternary$rtl.v:300$206_Y [2] $ternary$rtl.v:300$206_Y [3] $ternary$rtl.v:300$206_Y [4] $ternary$rtl.v:300$206_Y [5] $ternary$rtl.v:300$206_Y [6] $ternary$rtl.v:300$206_Y [7] $ternary$rtl.v:300$206_Y [8] $ternary$rtl.v:300$206_Y [9] $ternary$rtl.v:300$206_Y [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:291$191: { \wire11 [0] \wire11 [1] \wire11 [2] \wire11 [3] }
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$37: { $ternary$rtl.v:81$36_Y [0] $ternary$rtl.v:81$36_Y [1] $ternary$rtl.v:81$36_Y [2] $ternary$rtl.v:81$36_Y [3] $ternary$rtl.v:81$36_Y [4] $ternary$rtl.v:81$36_Y [5] $ternary$rtl.v:81$36_Y [6] $ternary$rtl.v:81$36_Y [7] $ternary$rtl.v:81$36_Y [8] $ternary$rtl.v:81$36_Y [9] $ternary$rtl.v:81$36_Y [10] $ternary$rtl.v:81$36_Y [11] $ternary$rtl.v:81$36_Y [12] $ternary$rtl.v:81$36_Y [13] $ternary$rtl.v:81$36_Y [14] $ternary$rtl.v:81$36_Y [15] $ternary$rtl.v:81$36_Y [16] $ternary$rtl.v:81$36_Y [17] $ternary$rtl.v:81$36_Y [18] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:55$8: { \wire4 [0] \wire4 [1] \wire4 [2] \wire4 [3] \wire4 [4] \wire4 [5] \wire4 [6] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:54$4: { \wire3 [0] \wire3 [1] \wire3 [2] \wire3 [3] \wire3 [4] \wire3 [5] \wire3 [6] \wire3 [7] \wire3 [8] \wire3 [9] \wire3 [10] \wire3 [11] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:78$29: { \wire159 [0] \wire159 [1] \wire159 [2] \wire159 [3] \wire159 [4] \wire159 [5] \wire159 [6] \wire159 [7] \wire159 [8] \wire159 [9] \wire159 [10] \wire159 [11] \wire159 [12] \wire159 [13] \wire159 [14] }
  Optimizing cells in module \top.
Performed a total of 34 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$768 ($dff) from module module28.
Removing $procdff$769 ($dff) from module module28.
Removing $procdff$770 ($dff) from module module28.
Promoting init spec \reg98 = 5'00000 to constant driver in module module70.
Promoting init spec \reg97 = 11'00000000000 to constant driver in module module70.
Promoted 2 init specs to constant drivers.
Replaced 3 DFF cells.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 11 unused wires.
<suppressed ~5 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
<suppressed ~12 debug messages>
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~82 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$766 ($dff) from module module28.
Replaced 1 DFF cells.

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~82 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 14 bits (of 15) from mux cell module105.$ternary$rtl.v:453$339 ($mux).
Removed top 12 bits (of 15) from port A of cell module105.$sshl$rtl.v:453$340 ($sshl).
Removed top 14 bits (of 15) from port A of cell module105.$ne$rtl.v:453$341 ($ne).
Removed top 8 bits (of 9) from port A of cell module105.$xor$rtl.v:455$345 ($xor).
Removed top 17 bits (of 18) from port B of cell module105.$and$rtl.v:460$356 ($and).
Removed top 22 bits (of 30) from port Y of cell module105.$and$rtl.v:460$356 ($and).
Removed top 22 bits (of 30) from port A of cell module105.$xor$rtl.v:461$357 ($xor).
Removed top 17 bits (of 30) from port B of cell module105.$xor$rtl.v:461$357 ($xor).
Removed top 17 bits (of 30) from port Y of cell module105.$xor$rtl.v:461$357 ($xor).
Removed top 17 bits (of 30) from port B of cell module105.$add$rtl.v:461$358 ($add).
Removed top 16 bits (of 30) from port Y of cell module105.$add$rtl.v:461$358 ($add).
Removed top 16 bits (of 30) from mux cell module105.$ternary$rtl.v:461$359 ($mux).
Removed top 17 bits (of 18) from mux cell module105.$ternary$rtl.v:463$363 ($mux).
Removed top 5 bits (of 15) from mux cell module105.$ternary$rtl.v:469$373 ($mux).
Removed top 2 bits (of 12) from port A of cell module105.$ne$rtl.v:466$371 ($ne).
Removed top 5 bits (of 15) from mux cell module105.$ternary$rtl.v:469$375 ($mux).
Removed top 5 bits (of 15) from port A of cell module105.$xnor$rtl.v:469$376 ($xnor).
Removed top 7 bits (of 8) from port B of cell module105.$or$rtl.v:487$399 ($or).
Removed top 2 bits (of 3) from port B of cell module105.$eq$rtl.v:482$391 ($eq).
Removed top 14 bits (of 15) from port A of cell module105.$or$rtl.v:482$394 ($or).
Removed top 12 bits (of 15) from port B of cell module105.$or$rtl.v:482$394 ($or).
Removed top 12 bits (of 15) from port Y of cell module105.$or$rtl.v:482$394 ($or).
Removed top 11 bits (of 12) from port A of cell module105.$shr$rtl.v:483$396 ($shr).
Removed top 19 bits (of 20) from port A of cell module105.$le$rtl.v:495$410 ($le).
Removed top 16 bits (of 17) from port B of cell module105.$xnor$rtl.v:495$411 ($xnor).
Removed top 1 bits (of 2) from port B of cell module105.$le$rtl.v:496$414 ($le).
Removed top 9 bits (of 21) from mux cell module105.$ternary$rtl.v:497$418 ($mux).
Removed top 19 bits (of 20) from mux cell module105.$procmux$651 ($mux).
Removed top 17 bits (of 20) from mux cell module105.$procmux$654 ($mux).
Removed top 4 bits (of 7) from mux cell module105.$procmux$678 ($mux).
Removed top 19 bits (of 20) from FF cell module105.$procdff$756 ($dff).
Removed top 19 bits (of 20) from wire module105.$0\reg114[19:0].
Removed top 16 bits (of 30) from wire module105.$add$rtl.v:461$358_Y.
Removed top 22 bits (of 30) from wire module105.$and$rtl.v:460$356_Y.
Removed top 16 bits (of 17) from wire module105.$le$rtl.v:495$410_Y.
Removed top 14 bits (of 15) from wire module105.$logic_not$rtl.v:453$337_Y.
Removed top 14 bits (of 15) from wire module105.$logic_not$rtl.v:459$350_Y.
Removed top 19 bits (of 20) from wire module105.$logic_not$rtl.v:464$368_Y.
Removed top 14 bits (of 15) from wire module105.$logic_or$rtl.v:453$335_Y.
Removed top 12 bits (of 15) from wire module105.$or$rtl.v:482$394_Y.
Removed top 14 bits (of 15) from wire module105.$reduce_xnor$rtl.v:482$393_Y.
Removed top 14 bits (of 15) from wire module105.$ternary$rtl.v:453$339_Y.
Removed top 1 bits (of 15) from wire module105.$ternary$rtl.v:459$354_Y.
Removed top 16 bits (of 30) from wire module105.$ternary$rtl.v:461$359_Y.
Removed top 17 bits (of 18) from wire module105.$ternary$rtl.v:463$363_Y.
Removed top 5 bits (of 15) from wire module105.$ternary$rtl.v:469$373_Y.
Removed top 5 bits (of 15) from wire module105.$ternary$rtl.v:469$375_Y.
Removed top 21 bits (of 30) from wire module105.$xor$rtl.v:461$357_Y.
Removed top 12 bits (of 15) from wire module105.wire110.
Removed top 17 bits (of 18) from wire module105.wire113.
Removed top 13 bits (of 22) from mux cell module132.$ternary$rtl.v:357$228 ($mux).
Removed top 12 bits (of 22) from port Y of cell module132.$neg$rtl.v:359$235 ($neg).
Removed top 12 bits (of 22) from port A of cell module132.$neg$rtl.v:359$235 ($neg).
Removed top 9 bits (of 10) from port B of cell module132.$eq$rtl.v:370$257 ($eq).
Removed top 6 bits (of 7) from port B of cell module132.$le$rtl.v:366$246 ($le).
Removed top 5 bits (of 15) from mux cell module132.$ternary$rtl.v:367$252 ($mux).
Removed top 2 bits (of 10) from port A of cell module132.$xnor$rtl.v:376$261 ($xnor).
Removed top 3 bits (of 10) from port B of cell module132.$le$rtl.v:376$264 ($le).
Removed top 12 bits (of 26) from port A of cell module132.$sub$rtl.v:381$276 ($sub).
Removed top 5 bits (of 26) from port Y of cell module132.$sub$rtl.v:381$276 ($sub).
Removed top 5 bits (of 26) from port B of cell module132.$sub$rtl.v:381$276 ($sub).
Removed top 11 bits (of 14) from port B of cell module132.$ne$rtl.v:384$279 ($ne).
Removed top 12 bits (of 13) from mux cell module132.$ternary$rtl.v:385$282 ($mux).
Removed top 12 bits (of 13) from port B of cell module132.$eq$rtl.v:385$283 ($eq).
Removed top 15 bits (of 23) from mux cell module132.$ternary$rtl.v:395$293 ($mux).
Removed top 15 bits (of 23) from port B of cell module132.$add$rtl.v:395$294 ($add).
Removed top 8 bits (of 21) from port B of cell module132.$ne$rtl.v:391$296 ($ne).
Removed top 17 bits (of 28) from port B of cell module132.$mul$rtl.v:396$298 ($mul).
Removed top 16 bits (of 28) from port Y of cell module132.$mul$rtl.v:396$298 ($mul).
Removed top 16 bits (of 28) from mux cell module132.$ternary$rtl.v:396$300 ($mux).
Removed top 4 bits (of 11) from port B of cell module132.$sshr$rtl.v:401$305 ($sshr).
Removed top 12 bits (of 13) from port B of cell module132.$ne$rtl.v:401$308 ($ne).
Removed top 9 bits (of 10) from mux cell module132.$ternary$rtl.v:401$311 ($mux).
Removed top 15 bits (of 19) from port A of cell module132.$sshr$rtl.v:403$314 ($sshr).
Removed top 4 bits (of 14) from mux cell module132.$procmux$687 ($mux).
Removed top 2 bits (of 3) from FF cell module132.$procdff$757 ($dff).
Removed top 3 bits (of 7) from FF cell module132.$procdff$758 ($dff).
Removed top 4 bits (of 14) from FF cell module132.$procdff$762 ($dff).
Removed top 12 bits (of 13) from FF cell module132.$procdff$763 ($dff).
Removed top 13 bits (of 22) from mux cell module132.$ternary$rtl.v:357$226 ($mux).
Removed top 12 bits (of 22) from mux cell module132.$ternary$rtl.v:359$234 ($mux).
Removed top 15 bits (of 26) from mux cell module132.$ternary$rtl.v:381$275 ($mux).
Removed top 3 bits (of 14) from port A of cell module132.$ne$rtl.v:384$279 ($ne).
Removed top 11 bits (of 23) from port Y of cell module132.$add$rtl.v:395$294 ($add).
Removed top 11 bits (of 23) from port A of cell module132.$add$rtl.v:395$294 ($add).
Removed cell module132.$ne$rtl.v:391$296 ($ne).
Removed top 12 bits (of 13) from port B of cell module132.$gt$rtl.v:403$313 ($gt).
Removed top 12 bits (of 13) from port A of cell module132.$ne$rtl.v:401$308 ($ne).
Removed top 13 bits (of 22) from mux cell module132.$ternary$rtl.v:357$225 ($mux).
Removed top 13 bits (of 22) from port Y of cell module132.$mul$rtl.v:357$223 ($mul).
Removed top 11 bits (of 23) from mux cell module132.$ternary$rtl.v:394$288 ($mux).
Removed top 10 bits (of 21) from port B of cell module132.$sub$rtl.v:381$276 ($sub).
Removed cell module132.$ternary$rtl.v:391$295 ($mux).
Removed top 12 bits (of 13) from wire module132.$0\reg140[12:0].
Removed top 4 bits (of 14) from wire module132.$0\reg141[13:0].
Removed top 2 bits (of 3) from wire module132.$0\reg146[2:0].
Removed top 11 bits (of 23) from wire module132.$add$rtl.v:395$294_Y.
Removed top 9 bits (of 10) from wire module132.$le$rtl.v:376$264_Y.
Removed top 12 bits (of 13) from wire module132.$logic_and$rtl.v:401$307_Y.
Removed top 9 bits (of 10) from wire module132.$logic_not$rtl.v:370$256_Y.
Removed top 7 bits (of 8) from wire module132.$logic_not$rtl.v:400$303_Y.
Removed top 13 bits (of 22) from wire module132.$mul$rtl.v:357$223_Y.
Removed top 16 bits (of 28) from wire module132.$mul$rtl.v:396$298_Y.
Removed top 9 bits (of 10) from wire module132.$ne$rtl.v:401$308_Y.
Removed top 6 bits (of 7) from wire module132.$reduce_and$rtl.v:366$245_Y.
Removed top 12 bits (of 13) from wire module132.$reduce_and$rtl.v:385$281_Y.
Removed top 9 bits (of 10) from wire module132.$reduce_xnor$rtl.v:367$248_Y.
Removed top 9 bits (of 10) from wire module132.$reduce_xnor$rtl.v:370$253_Y.
Removed top 13 bits (of 22) from wire module132.$ternary$rtl.v:357$225_Y.
Removed top 13 bits (of 22) from wire module132.$ternary$rtl.v:357$226_Y.
Removed top 12 bits (of 22) from wire module132.$ternary$rtl.v:359$234_Y.
Removed top 5 bits (of 15) from wire module132.$ternary$rtl.v:367$252_Y.
Removed top 15 bits (of 26) from wire module132.$ternary$rtl.v:381$275_Y.
Removed top 4 bits (of 11) from wire module132.wire150.
Removed top 9 bits (of 10) from wire module132.wire152.
Removed top 10 bits (of 22) from mux cell module28.$ternary$rtl.v:188$97 ($mux).
Removed top 1 bits (of 13) from mux cell module28.$ternary$rtl.v:240$143 ($mux).
Removed top 2 bits (of 3) from mux cell module28.$ternary$rtl.v:238$141 ($mux).
Removed top 1 bits (of 13) from port A of cell module28.$ne$rtl.v:240$144 ($ne).
Removed top 12 bits (of 21) from mux cell module28.$ternary$rtl.v:243$155 ($mux).
Removed top 13 bits (of 21) from FF cell module28.$procdff$771 ($dff).
Removed top 15 bits (of 16) from FF cell module28.$procdff$772 ($dff).
Removed top 19 bits (of 20) from FF cell module28.$procdff$773 ($dff).
Removed top 13 bits (of 21) from wire module28.$0\reg43[20:0].
Removed top 2 bits (of 3) from wire module28.$logic_not$rtl.v:238$139_Y.
Removed top 7 bits (of 8) from wire module28.$reduce_xnor$rtl.v:215$108_Y.
Removed top 1 bits (of 22) from wire module28.$sub$rtl.v:215$107_Y.
Removed top 10 bits (of 22) from wire module28.$ternary$rtl.v:188$97_Y.
Removed top 1 bits (of 13) from wire module28.$ternary$rtl.v:240$143_Y.
Removed top 13 bits (of 14) from wire module28.wire101.
Removed top 9 bits (of 10) from wire module28.wire103.
Removed top 5 bits (of 6) from wire module28.wire130.
Removed top 12 bits (of 21) from wire module28.wire131.
Removed top 21 bits (of 22) from wire module28.wire69.
Removed top 7 bits (of 8) from port A of cell module46.$xnor$rtl.v:687$561 ($xnor).
Removed top 4 bits (of 13) from port A of cell module46.$sshl$rtl.v:687$562 ($sshl).
Removed top 9 bits (of 10) from port A of cell module46.$le$rtl.v:692$568 ($le).
Removed top 5 bits (of 10) from mux cell module46.$ternary$rtl.v:692$574 ($mux).
Removed top 12 bits (of 13) from port B of cell module46.$eq$rtl.v:698$582 ($eq).
Removed top 19 bits (of 29) from mux cell module46.$ternary$rtl.v:700$584 ($mux).
Removed top 6 bits (of 7) from port A of cell module46.$shl$rtl.v:703$588 ($shl).
Removed top 15 bits (of 16) from port B of cell module46.$add$rtl.v:704$597 ($add).
Removed top 13 bits (of 16) from port Y of cell module46.$add$rtl.v:704$597 ($add).
Removed cell module46.$ternary$rtl.v:707$599 ($mux).
Removed top 7 bits (of 18) from port A of cell module46.$sub$rtl.v:707$601 ($sub).
Removed top 17 bits (of 18) from port B of cell module46.$sub$rtl.v:707$601 ($sub).
Removed top 12 bits (of 13) from port A of cell module46.$lt$rtl.v:707$602 ($lt).
Removed top 3 bits (of 18) from mux cell module46.$ternary$rtl.v:708$604 ($mux).
Removed top 3 bits (of 18) from port B of cell module46.$or$rtl.v:708$605 ($or).
Removed top 14 bits (of 15) from FF cell module46.$procdff$734 ($dff).
Removed top 8 bits (of 10) from mux cell module46.$ternary$rtl.v:700$584 ($mux).
Removed top 14 bits (of 15) from port B of cell module46.$shl$rtl.v:703$588 ($shl).
Removed top 14 bits (of 15) from mux cell module46.$ternary$rtl.v:704$593 ($mux).
Removed top 14 bits (of 15) from mux cell module46.$ternary$rtl.v:708$604 ($mux).
Removed top 14 bits (of 15) from wire module46.$0\reg56[14:0].
Removed top 11 bits (of 12) from wire module46.$eq$rtl.v:696$577_Y.
Removed top 10 bits (of 11) from wire module46.$le$rtl.v:692$568_Y.
Removed top 7 bits (of 8) from wire module46.$reduce_or$rtl.v:687$560_Y.
Removed top 27 bits (of 29) from wire module46.$ternary$rtl.v:700$584_Y.
Removed top 14 bits (of 15) from wire module46.$ternary$rtl.v:704$593_Y.
Removed top 17 bits (of 18) from wire module46.$ternary$rtl.v:708$604_Y.
Removed top 17 bits (of 19) from wire module46.wire51.
Removed top 2 bits (of 15) from wire module46.wire54.
Removed top 5 bits (of 10) from wire module46.wire55.
Removed top 18 bits (of 19) from wire module46.wire57.
Removed top 8 bits (of 10) from wire module46.wire58.
Removed top 11 bits (of 18) from wire module46.wire60.
Removed top 13 bits (of 16) from wire module46.wire61.
Removed top 12 bits (of 14) from wire module46.wire63.
Removed top 2 bits (of 4) from wire module46.wire64.
Removed top 5 bits (of 14) from port Y of cell module70.$xor$rtl.v:577$448 ($xor).
Removed top 5 bits (of 14) from port B of cell module70.$le$rtl.v:577$449 ($le).
Removed top 13 bits (of 14) from port A of cell module70.$and$rtl.v:577$450 ($and).
Removed top 3 bits (of 6) from mux cell module70.$ternary$rtl.v:577$454 ($mux).
Removed top 5 bits (of 19) from port A of cell module70.$gt$rtl.v:578$456 ($gt).
Removed top 11 bits (of 12) from port A of cell module70.$or$rtl.v:581$465 ($or).
Removed top 16 bits (of 24) from port A of cell module70.$gt$rtl.v:581$462 ($gt).
Removed top 8 bits (of 16) from port A of cell module70.$xnor$rtl.v:581$467 ($xnor).
Removed top 15 bits (of 16) from port A of cell module70.$le$rtl.v:581$468 ($le).
Removed top 3 bits (of 12) from mux cell module70.$ternary$rtl.v:581$469 ($mux).
Removed top 7 bits (of 8) from port B of cell module70.$or$rtl.v:593$482 ($or).
Removed top 20 bits (of 21) from mux cell module70.$ternary$rtl.v:594$487 ($mux).
Removed top 20 bits (of 21) from port B of cell module70.$and$rtl.v:594$488 ($and).
Removed top 18 bits (of 21) from port Y of cell module70.$and$rtl.v:594$488 ($and).
Removed top 18 bits (of 21) from port A of cell module70.$and$rtl.v:594$488 ($and).
Removed top 7 bits (of 8) from port B of cell module70.$lt$rtl.v:596$495 ($lt).
Removed top 12 bits (of 13) from port A of cell module70.$neg$rtl.v:596$496 ($neg).
Removed top 3 bits (of 4) from port A of cell module70.$xnor$rtl.v:611$508 ($xnor).
Removed top 3 bits (of 4) from port B of cell module70.$xnor$rtl.v:611$508 ($xnor).
Removed top 14 bits (of 20) from mux cell module70.$ternary$rtl.v:616$513 ($mux).
Removed top 10 bits (of 19) from port B of cell module70.$and$rtl.v:625$521 ($and).
Removed top 8 bits (of 19) from port Y of cell module70.$and$rtl.v:625$521 ($and).
Removed top 8 bits (of 19) from port A of cell module70.$and$rtl.v:625$521 ($and).
Removed top 2 bits (of 8) from mux cell module70.$ternary$rtl.v:630$524 ($mux).
Removed top 2 bits (of 8) from mux cell module70.$ternary$rtl.v:630$525 ($mux).
Removed top 6 bits (of 8) from port Y of cell module70.$sshl$rtl.v:633$535 ($sshl).
Removed top 13 bits (of 14) from FF cell module70.$procdff$738 ($dff).
Removed top 3 bits (of 6) from FF cell module70.$procdff$744 ($dff).
Removed top 15 bits (of 16) from FF cell module70.$procdff$745 ($dff).
Removed top 10 bits (of 11) from FF cell module70.$procdff$746 ($dff).
Removed top 11 bits (of 12) from FF cell module70.$procdff$747 ($dff).
Removed top 7 bits (of 8) from FF cell module70.$procdff$748 ($dff).
Removed top 5 bits (of 6) from port A of cell module70.$lt$rtl.v:572$438 ($lt).
Removed top 7 bits (of 8) from port B of cell module70.$ge$rtl.v:576$442 ($ge).
Removed top 3 bits (of 12) from port Y of cell module70.$or$rtl.v:581$465 ($or).
Removed top 3 bits (of 12) from port B of cell module70.$or$rtl.v:581$465 ($or).
Removed top 11 bits (of 12) from port A of cell module70.$add$rtl.v:580$461 ($add).
Removed top 4 bits (of 12) from port Y of cell module70.$add$rtl.v:580$461 ($add).
Removed top 10 bits (of 24) from port B of cell module70.$gt$rtl.v:581$462 ($gt).
Removed top 5 bits (of 8) from port Y of cell module70.$or$rtl.v:593$482 ($or).
Removed top 5 bits (of 8) from port A of cell module70.$or$rtl.v:593$482 ($or).
Removed top 3 bits (of 6) from port B of cell module70.$ne$rtl.v:611$507 ($ne).
Removed top 10 bits (of 11) from port B of cell module70.$mul$rtl.v:616$509 ($mul).
Removed top 5 bits (of 11) from port Y of cell module70.$mul$rtl.v:616$509 ($mul).
Removed cell module70.$not$rtl.v:615$510 ($not).
Removed top 4 bits (of 12) from mux cell module70.$ternary$rtl.v:581$464 ($mux).
Removed top 7 bits (of 8) from wire module70.$0\reg76[7:0].
Removed top 3 bits (of 6) from wire module70.$0\reg80[5:0].
Removed top 13 bits (of 14) from wire module70.$0\reg91[13:0].
Removed top 4 bits (of 12) from wire module70.$add$rtl.v:580$461_Y.
Removed top 18 bits (of 21) from wire module70.$and$rtl.v:594$488_Y.
Removed top 11 bits (of 12) from wire module70.$gt$rtl.v:581$462_Y.
Removed top 13 bits (of 14) from wire module70.$le$rtl.v:577$449_Y.
Removed top 3 bits (of 4) from wire module70.$logic_not$rtl.v:611$506_Y.
Removed top 5 bits (of 11) from wire module70.$mul$rtl.v:616$509_Y.
Removed top 5 bits (of 6) from wire module70.$ne$rtl.v:577$451_Y.
Removed top 7 bits (of 8) from wire module70.$reduce_xnor$rtl.v:630$522_Y.
Removed top 2 bits (of 8) from wire module70.$ternary$rtl.v:630$524_Y.
Removed top 6 bits (of 14) from wire module70.$xor$rtl.v:577$448_Y.
Removed top 18 bits (of 19) from wire module70.wire94.
Removed top 6 bits (of 9) from wire module70.wire96.
Removed top 4 bits (of 7) from port Y of cell module8.$not$rtl.v:285$186 ($not).
Removed top 4 bits (of 7) from port A of cell module8.$not$rtl.v:285$186 ($not).
Removed top 15 bits (of 16) from port B of cell module8.$eq$rtl.v:284$180 ($eq).
Removed top 15 bits (of 16) from port B of cell module8.$add$rtl.v:284$181 ($add).
Removed top 9 bits (of 16) from port Y of cell module8.$add$rtl.v:284$181 ($add).
Removed top 9 bits (of 16) from port A of cell module8.$add$rtl.v:284$181 ($add).
Removed top 4 bits (of 7) from port A of cell module8.$neg$rtl.v:285$183 ($neg).
Removed top 4 bits (of 7) from port Y of cell module8.$add$rtl.v:285$185 ($add).
Removed top 4 bits (of 7) from port A of cell module8.$add$rtl.v:285$185 ($add).
Removed top 4 bits (of 7) from port B of cell module8.$add$rtl.v:285$185 ($add).
Removed top 12 bits (of 17) from mux cell module8.$ternary$rtl.v:292$193 ($mux).
Removed top 6 bits (of 7) from port B of cell module8.$xnor$rtl.v:298$200 ($xnor).
Removed top 20 bits (of 21) from port B of cell module8.$or$rtl.v:302$211 ($or).
Removed top 18 bits (of 21) from port Y of cell module8.$or$rtl.v:302$211 ($or).
Removed top 14 bits (of 21) from port A of cell module8.$lt$rtl.v:302$212 ($lt).
Removed top 18 bits (of 21) from port B of cell module8.$lt$rtl.v:302$212 ($lt).
Removed top 12 bits (of 17) from FF cell module8.$procdff$764 ($dff).
Removed top 4 bits (of 7) from port Y of cell module8.$neg$rtl.v:285$183 ($neg).
Removed top 4 bits (of 7) from port Y of cell module8.$mul$rtl.v:285$184 ($mul).
Removed top 12 bits (of 17) from wire module8.$0\reg18[16:0].
Removed top 4 bits (of 7) from wire module8.$add$rtl.v:285$185_Y.
Removed top 15 bits (of 16) from wire module8.$logic_not$rtl.v:284$179_Y.
Removed top 20 bits (of 21) from wire module8.$logic_not$rtl.v:302$210_Y.
Removed top 4 bits (of 7) from wire module8.$mul$rtl.v:285$184_Y.
Removed top 18 bits (of 21) from wire module8.$or$rtl.v:302$211_Y.
Removed top 2 bits (of 14) from wire module8.wire20.
Removed top 4 bits (of 5) from wire module8.wire21.
Removed top 21 bits (of 22) from wire module8.wire22.
Removed top 10 bits (of 11) from wire module8.wire23.
Removed top 8 bits (of 9) from port A of cell top.$or$rtl.v:54$5 ($or).
Removed top 1 bits (of 9) from port Y of cell top.$or$rtl.v:54$5 ($or).
Removed top 1 bits (of 9) from port B of cell top.$xnor$rtl.v:54$6 ($xnor).
Removed top 19 bits (of 20) from port B of cell top.$mul$rtl.v:55$9 ($mul).
Removed top 19 bits (of 20) from port A of cell top.$neg$rtl.v:55$11 ($neg).
Removed top 4 bits (of 20) from port Y of cell top.$add$rtl.v:55$13 ($add).
Removed top 4 bits (of 20) from port A of cell top.$add$rtl.v:55$13 ($add).
Removed top 4 bits (of 20) from port B of cell top.$add$rtl.v:55$13 ($add).
Removed top 18 bits (of 19) from port A of cell top.$sshl$rtl.v:78$31 ($sshl).
Removed top 3 bits (of 8) from mux cell top.$ternary$rtl.v:81$34 ($mux).
Removed top 11 bits (of 19) from mux cell top.$ternary$rtl.v:81$36 ($mux).
Removed top 12 bits (of 17) from mux cell top.$ternary$rtl.v:82$42 ($mux).
Removed top 11 bits (of 16) from port Y of cell top.$shl$rtl.v:82$40 ($shl).
Removed top 21 bits (of 36) from port A of cell top.$lt$rtl.v:84$47 ($lt).
Removed top 35 bits (of 36) from port A of cell top.$and$rtl.v:84$46 ($and).
Removed top 31 bits (of 36) from port B of cell top.$and$rtl.v:84$46 ($and).
Removed top 31 bits (of 36) from port Y of cell top.$and$rtl.v:84$46 ($and).
Removed top 9 bits (of 17) from port A of cell top.$neg$rtl.v:92$50 ($neg).
Removed top 10 bits (of 18) from port Y of cell top.$xnor$rtl.v:90$56 ($xnor).
Removed top 6 bits (of 14) from port B of cell top.$xnor$rtl.v:93$57 ($xnor).
Removed top 7 bits (of 18) from port Y of cell top.$sshl$rtl.v:99$61 ($sshl).
Removed top 25 bits (of 26) from port A of cell top.$add$rtl.v:102$65 ($add).
Removed top 22 bits (of 26) from port B of cell top.$add$rtl.v:102$65 ($add).
Removed top 21 bits (of 26) from port Y of cell top.$add$rtl.v:102$65 ($add).
Removed top 1 bits (of 16) from mux cell top.$procmux$709 ($mux).
Removed top 1 bits (of 16) from mux cell top.$procmux$711 ($mux).
Removed top 1 bits (of 16) from FF cell top.$procdff$779 ($dff).
Removed top 4 bits (of 20) from port Y of cell top.$not$rtl.v:55$12 ($not).
Removed top 4 bits (of 20) from port A of cell top.$not$rtl.v:55$12 ($not).
Removed top 4 bits (of 20) from port Y of cell top.$mul$rtl.v:55$9 ($mul).
Removed top 4 bits (of 20) from port Y of cell top.$neg$rtl.v:55$11 ($neg).
Removed top 1 bits (of 16) from wire top.$0\reg164[15:0].
Removed top 2 bits (of 9) from wire top.$0\reg165[8:0].
Removed top 1 bits (of 14) from wire top.$0\reg166[13:0].
Removed top 3 bits (of 5) from wire top.$0\reg167[4:0].
Removed top 6 bits (of 18) from wire top.$0\reg168[17:0].
Removed top 21 bits (of 26) from wire top.$add$rtl.v:102$65_Y.
Removed top 31 bits (of 36) from wire top.$and$rtl.v:84$46_Y.
Removed top 4 bits (of 20) from wire top.$mul$rtl.v:55$9_Y.
Removed top 4 bits (of 20) from wire top.$neg$rtl.v:55$11_Y.
Removed top 1 bits (of 5) from wire top.$not$rtl.v:100$62_Y.
Removed top 4 bits (of 20) from wire top.$not$rtl.v:55$12_Y.
Removed top 1 bits (of 16) from wire top.$procmux$709_Y.
Removed top 3 bits (of 16) from wire top.wire6.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 121 unused wires.
<suppressed ~9 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~572 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module105:
  creating $macc model for $add$rtl.v:461$358 ($add).
  creating $alu model for $macc $add$rtl.v:461$358.
  creating $alu model for $le$rtl.v:495$410 ($le): new $alu
  creating $alu model for $le$rtl.v:496$414 ($le): new $alu
  creating $alu cell for $le$rtl.v:496$414: $auto$alumacc.cc:474:replace_alu$888
  creating $alu cell for $le$rtl.v:495$410: $auto$alumacc.cc:474:replace_alu$901
  creating $alu cell for $add$rtl.v:461$358: $auto$alumacc.cc:474:replace_alu$910
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module132:
  creating $macc model for $add$rtl.v:395$294 ($add).
  creating $macc model for $mul$rtl.v:357$223 ($mul).
  creating $macc model for $mul$rtl.v:396$298 ($mul).
  creating $macc model for $neg$rtl.v:359$235 ($neg).
  creating $macc model for $sub$rtl.v:381$276 ($sub).
  creating $alu model for $macc $sub$rtl.v:381$276.
  creating $alu model for $macc $neg$rtl.v:359$235.
  creating $alu model for $macc $add$rtl.v:395$294.
  creating $macc cell for $mul$rtl.v:357$223: $auto$alumacc.cc:354:replace_macc$913
  creating $macc cell for $mul$rtl.v:396$298: $auto$alumacc.cc:354:replace_macc$914
  creating $alu model for $gt$rtl.v:403$313 ($gt): new $alu
  creating $alu model for $le$rtl.v:366$246 ($le): new $alu
  creating $alu model for $le$rtl.v:376$264 ($le): new $alu
  creating $alu cell for $le$rtl.v:376$264: $auto$alumacc.cc:474:replace_alu$918
  creating $alu cell for $le$rtl.v:366$246: $auto$alumacc.cc:474:replace_alu$931
  creating $alu cell for $gt$rtl.v:403$313: $auto$alumacc.cc:474:replace_alu$944
  creating $alu cell for $add$rtl.v:395$294: $auto$alumacc.cc:474:replace_alu$949
  creating $alu cell for $neg$rtl.v:359$235: $auto$alumacc.cc:474:replace_alu$952
  creating $alu cell for $sub$rtl.v:381$276: $auto$alumacc.cc:474:replace_alu$955
  created 6 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module28:
  creating $macc model for $mul$rtl.v:169$80 ($mul).
  creating $macc model for $mul$rtl.v:190$101 ($mul).
  creating $macc model for $sub$rtl.v:215$107 ($sub).
  creating $alu model for $macc $sub$rtl.v:215$107.
  creating $macc cell for $mul$rtl.v:190$101: $auto$alumacc.cc:354:replace_macc$958
  creating $macc cell for $mul$rtl.v:169$80: $auto$alumacc.cc:354:replace_macc$959
  creating $alu cell for $sub$rtl.v:215$107: $auto$alumacc.cc:474:replace_alu$960
  created 1 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module46:
  creating $macc model for $add$rtl.v:704$597 ($add).
  creating $macc model for $add$rtl.v:708$606 ($add).
  creating $macc model for $sub$rtl.v:707$601 ($sub).
  creating $alu model for $macc $sub$rtl.v:707$601.
  creating $alu model for $macc $add$rtl.v:708$606.
  creating $alu model for $macc $add$rtl.v:704$597.
  creating $alu model for $le$rtl.v:692$568 ($le): new $alu
  creating $alu model for $lt$rtl.v:707$602 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:707$602: $auto$alumacc.cc:474:replace_alu$965
  creating $alu cell for $le$rtl.v:692$568: $auto$alumacc.cc:474:replace_alu$970
  creating $alu cell for $add$rtl.v:704$597: $auto$alumacc.cc:474:replace_alu$979
  creating $alu cell for $add$rtl.v:708$606: $auto$alumacc.cc:474:replace_alu$982
  creating $alu cell for $sub$rtl.v:707$601: $auto$alumacc.cc:474:replace_alu$985
  created 5 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module70:
  creating $macc model for $add$rtl.v:580$461 ($add).
  creating $macc model for $mul$rtl.v:581$466 ($mul).
  creating $macc model for $mul$rtl.v:616$509 ($mul).
  creating $macc model for $neg$rtl.v:596$496 ($neg).
  creating $alu model for $macc $neg$rtl.v:596$496.
  creating $alu model for $macc $add$rtl.v:580$461.
  creating $macc cell for $mul$rtl.v:581$466: $auto$alumacc.cc:354:replace_macc$988
  creating $macc cell for $mul$rtl.v:616$509: $auto$alumacc.cc:354:replace_macc$989
  creating $alu model for $ge$rtl.v:576$442 ($ge): new $alu
  creating $alu model for $gt$rtl.v:578$456 ($gt): new $alu
  creating $alu model for $gt$rtl.v:581$462 ($gt): new $alu
  creating $alu model for $le$rtl.v:577$449 ($le): new $alu
  creating $alu model for $le$rtl.v:581$468 ($le): new $alu
  creating $alu model for $lt$rtl.v:572$438 ($lt): new $alu
  creating $alu model for $lt$rtl.v:596$495 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:596$495: $auto$alumacc.cc:474:replace_alu$997
  creating $alu cell for $lt$rtl.v:572$438: $auto$alumacc.cc:474:replace_alu$1008
  creating $alu cell for $le$rtl.v:581$468: $auto$alumacc.cc:474:replace_alu$1013
  creating $alu cell for $le$rtl.v:577$449: $auto$alumacc.cc:474:replace_alu$1022
  creating $alu cell for $gt$rtl.v:581$462: $auto$alumacc.cc:474:replace_alu$1035
  creating $alu cell for $gt$rtl.v:578$456: $auto$alumacc.cc:474:replace_alu$1046
  creating $alu cell for $ge$rtl.v:576$442: $auto$alumacc.cc:474:replace_alu$1057
  creating $alu cell for $add$rtl.v:580$461: $auto$alumacc.cc:474:replace_alu$1066
  creating $alu cell for $neg$rtl.v:596$496: $auto$alumacc.cc:474:replace_alu$1069
  created 9 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module8:
  creating $macc model for $add$rtl.v:284$181 ($add).
  creating $macc model for $add$rtl.v:285$185 ($add).
  creating $macc model for $mul$rtl.v:285$184 ($mul).
  creating $macc model for $neg$rtl.v:285$183 ($neg).
  creating $macc model for $sub$rtl.v:300$203 ($sub).
  merging $macc model for $neg$rtl.v:285$183 into $add$rtl.v:285$185.
  merging $macc model for $mul$rtl.v:285$184 into $add$rtl.v:285$185.
  creating $alu model for $macc $sub$rtl.v:300$203.
  creating $alu model for $macc $add$rtl.v:284$181.
  creating $macc cell for $add$rtl.v:285$185: $auto$alumacc.cc:354:replace_macc$1072
  creating $alu model for $lt$rtl.v:290$188 ($lt): new $alu
  creating $alu model for $lt$rtl.v:302$212 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:302$212: $auto$alumacc.cc:474:replace_alu$1075
  creating $alu cell for $lt$rtl.v:290$188: $auto$alumacc.cc:474:replace_alu$1086
  creating $alu cell for $add$rtl.v:284$181: $auto$alumacc.cc:474:replace_alu$1097
  creating $alu cell for $sub$rtl.v:300$203: $auto$alumacc.cc:474:replace_alu$1100
  created 4 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:100$63 ($add).
  creating $macc model for $add$rtl.v:102$65 ($add).
  creating $macc model for $add$rtl.v:55$13 ($add).
  creating $macc model for $mul$rtl.v:55$9 ($mul).
  creating $macc model for $neg$rtl.v:55$11 ($neg).
  creating $macc model for $neg$rtl.v:92$50 ($neg).
  merging $macc model for $mul$rtl.v:55$9 into $add$rtl.v:55$13.
  creating $alu model for $macc $neg$rtl.v:55$11.
  creating $alu model for $macc $neg$rtl.v:92$50.
  creating $alu model for $macc $add$rtl.v:102$65.
  creating $alu model for $macc $add$rtl.v:100$63.
  creating $macc cell for $add$rtl.v:55$13: $auto$alumacc.cc:354:replace_macc$1103
  creating $alu model for $gt$rtl.v:54$7 ($gt): new $alu
  creating $alu model for $lt$rtl.v:101$64 ($lt): new $alu
  creating $alu model for $lt$rtl.v:82$38 ($lt): new $alu
  creating $alu model for $lt$rtl.v:84$47 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:84$47: $auto$alumacc.cc:474:replace_alu$1108
  creating $alu cell for $lt$rtl.v:82$38: $auto$alumacc.cc:474:replace_alu$1113
  creating $alu cell for $lt$rtl.v:101$64: $auto$alumacc.cc:474:replace_alu$1120
  creating $alu cell for $gt$rtl.v:54$7: $auto$alumacc.cc:474:replace_alu$1125
  creating $alu cell for $add$rtl.v:100$63: $auto$alumacc.cc:474:replace_alu$1136
  creating $alu cell for $add$rtl.v:102$65: $auto$alumacc.cc:474:replace_alu$1139
  creating $alu cell for $neg$rtl.v:92$50: $auto$alumacc.cc:474:replace_alu$1142
  creating $alu cell for $neg$rtl.v:55$11: $auto$alumacc.cc:474:replace_alu$1145
  created 8 $alu and 1 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module module105 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:494$405 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$652_CMP.
    No candidates found.
  Analyzing resource sharing options for $sshr$rtl.v:488$401 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$655_CMP $procmux$652_CMP }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:483$396 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$655_CMP $procmux$652_CMP }.
    No candidates found.
Found 2 cells in module module132 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:401$305 ($sshr):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:401$309_Y.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:357$222 ($sshl):
    Found 1 activation_patterns using ctrl signal { $reduce_bool$rtl.v:357$224_Y $logic_not$rtl.v:355$221_Y $reduce_and$rtl.v:354$218_Y }.
    No candidates found.
Found 2 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshl$rtl.v:78$31 ($sshl):
    Found 1 activation_patterns using ctrl signal $procmux$712_CMP.
    No candidates found.
  Analyzing resource sharing options for $mul$rtl.v:55$9 ($mul):
    Found cell that is never activated: $mul$rtl.v:55$9
    Cell is never active. Sharing is pointless, we simply remove it.
Removing 1 cells in module top:
  Removing cell $mul$rtl.v:55$9 ($mul).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
<suppressed ~3 debug messages>
Optimizing module module132.
<suppressed ~5 debug messages>
Optimizing module module28.
Optimizing module module46.
<suppressed ~5 debug messages>
Optimizing module module70.
<suppressed ~6 debug messages>
Optimizing module module8.
Optimizing module top.
<suppressed ~4 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $ternary$rtl.v:469$373.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:704$593.
    dead port 2/2 on $mux $ternary$rtl.v:704$593.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 3 multiplexer ports.
<suppressed ~78 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$906: { $auto$alumacc.cc:490:replace_alu$902 [0] $auto$alumacc.cc:490:replace_alu$902 [1] $auto$alumacc.cc:490:replace_alu$902 [2] $auto$alumacc.cc:490:replace_alu$902 [3] $auto$alumacc.cc:490:replace_alu$902 [4] $auto$alumacc.cc:490:replace_alu$902 [5] $auto$alumacc.cc:490:replace_alu$902 [6] $auto$alumacc.cc:490:replace_alu$902 [7] $auto$alumacc.cc:490:replace_alu$902 [8] $auto$alumacc.cc:490:replace_alu$902 [9] $auto$alumacc.cc:490:replace_alu$902 [10] $auto$alumacc.cc:490:replace_alu$902 [11] $auto$alumacc.cc:490:replace_alu$902 [12] $auto$alumacc.cc:490:replace_alu$902 [13] $auto$alumacc.cc:490:replace_alu$902 [14] $auto$alumacc.cc:490:replace_alu$902 [15] $auto$alumacc.cc:490:replace_alu$902 [16] $auto$alumacc.cc:490:replace_alu$902 [17] $auto$alumacc.cc:490:replace_alu$902 [18] $auto$alumacc.cc:490:replace_alu$902 [19] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$891: { $auto$alumacc.cc:490:replace_alu$889 [0] $auto$alumacc.cc:490:replace_alu$889 [1] }
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$942: { $auto$rtlil.cc:1832:Not$941 $auto$rtlil.cc:1835:ReduceAnd$935 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$921: { $auto$alumacc.cc:490:replace_alu$919 [0] $auto$alumacc.cc:490:replace_alu$919 [1] $auto$alumacc.cc:490:replace_alu$919 [2] $auto$alumacc.cc:490:replace_alu$919 [3] $auto$alumacc.cc:490:replace_alu$919 [4] $auto$alumacc.cc:490:replace_alu$919 [5] $auto$alumacc.cc:490:replace_alu$919 [6] $auto$alumacc.cc:490:replace_alu$919 [7] $auto$alumacc.cc:490:replace_alu$919 [8] $auto$alumacc.cc:490:replace_alu$919 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$934: { $auto$alumacc.cc:490:replace_alu$932 [0] $auto$alumacc.cc:490:replace_alu$932 [1] $auto$alumacc.cc:490:replace_alu$932 [2] $auto$alumacc.cc:490:replace_alu$932 [3] $auto$alumacc.cc:490:replace_alu$932 [4] $auto$alumacc.cc:490:replace_alu$932 [5] $auto$alumacc.cc:490:replace_alu$932 [6] }
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:703$585: { \wire58 [0] \wire58 [1] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$977: { $auto$rtlil.cc:1832:Not$974 $auto$rtlil.cc:1835:ReduceAnd$976 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$975: { $auto$alumacc.cc:490:replace_alu$971 [0] $auto$alumacc.cc:490:replace_alu$971 [1] $auto$alumacc.cc:490:replace_alu$971 [2] $auto$alumacc.cc:490:replace_alu$971 [3] $auto$alumacc.cc:490:replace_alu$971 [4] $auto$alumacc.cc:490:replace_alu$971 [5] $auto$alumacc.cc:490:replace_alu$971 [6] $auto$alumacc.cc:490:replace_alu$971 [7] $auto$alumacc.cc:490:replace_alu$971 [8] $auto$alumacc.cc:490:replace_alu$971 [9] $auto$alumacc.cc:490:replace_alu$971 [10] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1020: { $auto$rtlil.cc:1832:Not$1017 $auto$rtlil.cc:1835:ReduceAnd$1019 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1033: { $auto$rtlil.cc:1832:Not$1032 $auto$rtlil.cc:1835:ReduceAnd$1026 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1049: { $auto$alumacc.cc:490:replace_alu$1047 [0] $auto$alumacc.cc:490:replace_alu$1047 [1] $auto$alumacc.cc:490:replace_alu$1047 [2] $auto$alumacc.cc:490:replace_alu$1047 [3] $auto$alumacc.cc:490:replace_alu$1047 [4] $auto$alumacc.cc:490:replace_alu$1047 [5] $auto$alumacc.cc:490:replace_alu$1047 [6] $auto$alumacc.cc:490:replace_alu$1047 [7] $auto$alumacc.cc:490:replace_alu$1047 [8] $auto$alumacc.cc:490:replace_alu$1047 [9] $auto$alumacc.cc:490:replace_alu$1047 [10] $auto$alumacc.cc:490:replace_alu$1047 [11] $auto$alumacc.cc:490:replace_alu$1047 [12] $auto$alumacc.cc:490:replace_alu$1047 [13] $auto$alumacc.cc:490:replace_alu$1047 [14] $auto$alumacc.cc:490:replace_alu$1047 [15] $auto$alumacc.cc:490:replace_alu$1047 [16] $auto$alumacc.cc:490:replace_alu$1047 [17] $auto$alumacc.cc:490:replace_alu$1047 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1062: { $auto$alumacc.cc:490:replace_alu$1058 [0] $auto$alumacc.cc:490:replace_alu$1058 [1] $auto$alumacc.cc:490:replace_alu$1058 [2] $auto$alumacc.cc:490:replace_alu$1058 [3] $auto$alumacc.cc:490:replace_alu$1058 [4] $auto$alumacc.cc:490:replace_alu$1058 [5] $auto$alumacc.cc:490:replace_alu$1058 [6] $auto$alumacc.cc:490:replace_alu$1058 [7] $auto$alumacc.cc:490:replace_alu$1058 [8] $auto$alumacc.cc:490:replace_alu$1058 [9] $auto$alumacc.cc:490:replace_alu$1058 [10] $auto$alumacc.cc:490:replace_alu$1058 [11] $auto$alumacc.cc:490:replace_alu$1058 [12] $auto$alumacc.cc:490:replace_alu$1058 [13] $auto$alumacc.cc:490:replace_alu$1058 [14] $auto$alumacc.cc:490:replace_alu$1058 [15] $auto$alumacc.cc:490:replace_alu$1058 [16] $auto$alumacc.cc:490:replace_alu$1058 [17] $auto$alumacc.cc:490:replace_alu$1058 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1000: { $auto$alumacc.cc:490:replace_alu$998 [0] $auto$alumacc.cc:490:replace_alu$998 [1] $auto$alumacc.cc:490:replace_alu$998 [2] $auto$alumacc.cc:490:replace_alu$998 [3] $auto$alumacc.cc:490:replace_alu$998 [4] $auto$alumacc.cc:490:replace_alu$998 [5] $auto$alumacc.cc:490:replace_alu$998 [6] $auto$alumacc.cc:490:replace_alu$998 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1018: { $auto$alumacc.cc:490:replace_alu$1014 [0] $auto$alumacc.cc:490:replace_alu$1014 [1] $auto$alumacc.cc:490:replace_alu$1014 [2] $auto$alumacc.cc:490:replace_alu$1014 [3] $auto$alumacc.cc:490:replace_alu$1014 [4] $auto$alumacc.cc:490:replace_alu$1014 [5] $auto$alumacc.cc:490:replace_alu$1014 [6] $auto$alumacc.cc:490:replace_alu$1014 [7] $auto$alumacc.cc:490:replace_alu$1014 [8] $auto$alumacc.cc:490:replace_alu$1014 [9] $auto$alumacc.cc:490:replace_alu$1014 [10] $auto$alumacc.cc:490:replace_alu$1014 [11] $auto$alumacc.cc:490:replace_alu$1014 [12] $auto$alumacc.cc:490:replace_alu$1014 [13] $auto$alumacc.cc:490:replace_alu$1014 [14] $auto$alumacc.cc:490:replace_alu$1014 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1025: { $auto$alumacc.cc:490:replace_alu$1023 [0] $auto$alumacc.cc:490:replace_alu$1023 [1] $auto$alumacc.cc:490:replace_alu$1023 [2] $auto$alumacc.cc:490:replace_alu$1023 [3] $auto$alumacc.cc:490:replace_alu$1023 [4] $auto$alumacc.cc:490:replace_alu$1023 [5] $auto$alumacc.cc:490:replace_alu$1023 [6] $auto$alumacc.cc:490:replace_alu$1023 [7] $auto$alumacc.cc:490:replace_alu$1023 [8] $auto$alumacc.cc:490:replace_alu$1023 [9] $auto$alumacc.cc:490:replace_alu$1023 [10] $auto$alumacc.cc:490:replace_alu$1023 [11] $auto$alumacc.cc:490:replace_alu$1023 [12] $auto$alumacc.cc:490:replace_alu$1023 [13] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1038: { $auto$alumacc.cc:490:replace_alu$1036 [0] $auto$alumacc.cc:490:replace_alu$1036 [1] $auto$alumacc.cc:490:replace_alu$1036 [2] $auto$alumacc.cc:490:replace_alu$1036 [3] $auto$alumacc.cc:490:replace_alu$1036 [4] $auto$alumacc.cc:490:replace_alu$1036 [5] $auto$alumacc.cc:490:replace_alu$1036 [6] $auto$alumacc.cc:490:replace_alu$1036 [7] $auto$alumacc.cc:490:replace_alu$1036 [8] $auto$alumacc.cc:490:replace_alu$1036 [9] $auto$alumacc.cc:490:replace_alu$1036 [10] $auto$alumacc.cc:490:replace_alu$1036 [11] $auto$alumacc.cc:490:replace_alu$1036 [12] $auto$alumacc.cc:490:replace_alu$1036 [13] }
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1078: { $auto$alumacc.cc:490:replace_alu$1076 [0] $auto$alumacc.cc:490:replace_alu$1076 [1] $auto$alumacc.cc:490:replace_alu$1076 [2] $auto$alumacc.cc:490:replace_alu$1076 [3] $auto$alumacc.cc:490:replace_alu$1076 [4] $auto$alumacc.cc:490:replace_alu$1076 [5] $auto$alumacc.cc:490:replace_alu$1076 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1089: { $auto$alumacc.cc:490:replace_alu$1087 [0] $auto$alumacc.cc:490:replace_alu$1087 [1] $auto$alumacc.cc:490:replace_alu$1087 [2] $auto$alumacc.cc:490:replace_alu$1087 [3] $auto$alumacc.cc:490:replace_alu$1087 [4] $auto$alumacc.cc:490:replace_alu$1087 [5] $auto$alumacc.cc:490:replace_alu$1087 [6] $auto$alumacc.cc:490:replace_alu$1087 [7] }
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$37: { $ternary$rtl.v:81$36_Y [0] $ternary$rtl.v:81$36_Y [1] $ternary$rtl.v:81$36_Y [2] $ternary$rtl.v:81$36_Y [3] $ternary$rtl.v:81$36_Y [4] $ternary$rtl.v:81$36_Y [5] $ternary$rtl.v:81$36_Y [6] $ternary$rtl.v:81$36_Y [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1128: { $auto$alumacc.cc:490:replace_alu$1126 [0] $auto$alumacc.cc:490:replace_alu$1126 [1] $auto$alumacc.cc:490:replace_alu$1126 [2] $auto$alumacc.cc:490:replace_alu$1126 [3] $auto$alumacc.cc:490:replace_alu$1126 [4] $auto$alumacc.cc:490:replace_alu$1126 [5] $auto$alumacc.cc:490:replace_alu$1126 [6] $auto$alumacc.cc:490:replace_alu$1126 [7] $auto$alumacc.cc:490:replace_alu$1126 [8] }
  Optimizing cells in module \top.
Performed a total of 20 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 48 unused wires.
<suppressed ~11 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~78 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
<suppressed ~52 debug messages>
Optimizing module module132.
<suppressed ~22 debug messages>
Optimizing module module28.
<suppressed ~2 debug messages>
Optimizing module module46.
<suppressed ~17 debug messages>
Optimizing module module70.
<suppressed ~58 debug messages>
Optimizing module module8.
<suppressed ~28 debug messages>
Optimizing module top.
<suppressed ~50 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$734 ($dff) from module module46.
Replaced 1 DFF cells.

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 7 unused cells and 71 unused wires.
<suppressed ~18 debug messages>

2.18.5. Rerunning OPT passes. (Removed registers in this run.)

2.18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
<suppressed ~3 debug messages>
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.18.10. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
    Consolidated identical input bits for $mux cell $procmux$657:
      Old ports: A={ 17'00000000000000000 $procmux$654_Y [2:0] }, B={ 19'0000000000000000000 $ne$rtl.v:466$371_Y }, Y=$0\reg115[19:0]
      New ports: A=$procmux$654_Y [2:0], B={ 2'00 $ne$rtl.v:466$371_Y }, Y=$0\reg115[19:0] [2:0]
      New connections: $0\reg115[19:0] [19:3] = 17'00000000000000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:503$421:
      Old ports: A={ 8'10100101 \reg119 [12:5] }, B={ 12'000000000000 \reg120 [3:0] }, Y=\wire122
      New ports: A={ 1'1 \reg119 [12:5] }, B={ 5'00000 \reg120 [3:0] }, Y=\wire122 [8:0]
      New connections: \wire122 [15:9] = { \wire122 [8] 1'0 \wire122 [8] 2'00 \wire122 [8] 1'0 }
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:400$304:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$806 [0] }, B=8'10111011, Y=$ternary$rtl.v:400$304_Y
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$806 [0] }, B=2'11, Y=$ternary$rtl.v:400$304_Y [1:0]
      New connections: $ternary$rtl.v:400$304_Y [7:2] = { $ternary$rtl.v:400$304_Y [1] 1'0 $ternary$rtl.v:400$304_Y [1] $ternary$rtl.v:400$304_Y [1] $ternary$rtl.v:400$304_Y [1] 1'0 }
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:188$95:
      Old ports: A=8'00000000, B=8'10101111, Y=$ternary$rtl.v:188$95_Y
      New ports: A=1'0, B=1'1, Y=$ternary$rtl.v:188$95_Y [0]
      New connections: $ternary$rtl.v:188$95_Y [7:1] = { $ternary$rtl.v:188$95_Y [0] 1'0 $ternary$rtl.v:188$95_Y [0] 1'0 $ternary$rtl.v:188$95_Y [0] $ternary$rtl.v:188$95_Y [0] $ternary$rtl.v:188$95_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:216$109:
      Old ports: A=8'00000000, B=8'10101010, Y=$ternary$rtl.v:216$109_Y
      New ports: A=1'0, B=1'1, Y=$ternary$rtl.v:216$109_Y [1]
      New connections: { $ternary$rtl.v:216$109_Y [7:2] $ternary$rtl.v:216$109_Y [0] } = { $ternary$rtl.v:216$109_Y [1] 1'0 $ternary$rtl.v:216$109_Y [1] 1'0 $ternary$rtl.v:216$109_Y [1] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:243$155:
      Old ports: A={ 4'0000 \wire32 [5:1] }, B={ 8'10110000 $ternary$rtl.v:243$153_Y }, Y=\wire131
      New ports: A={ 1'0 \wire32 [5:1] }, B={ 5'10000 $ternary$rtl.v:243$153_Y }, Y=\wire131 [5:0]
      New connections: \wire131 [8:6] = { \wire131 [5] 1'0 \wire131 [5] }
  Optimizing cells in module \module28.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:216$111:
      Old ports: A=$ternary$rtl.v:216$109_Y, B={ 7'0000000 $auto$wreduce.cc:455:run$823 [0] }, Y=$0\reg43[20:0]
      New ports: A={ $ternary$rtl.v:216$109_Y [1] 1'0 }, B={ 1'0 $auto$wreduce.cc:455:run$823 [0] }, Y=$0\reg43[20:0] [1:0]
      New connections: $0\reg43[20:0] [7:2] = { $0\reg43[20:0] [1] 1'0 $0\reg43[20:0] [1] 1'0 $0\reg43[20:0] [1] 1'0 }
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:703$590:
      Old ports: A={ 6'000000 $logic_not$rtl.v:703$586_Y }, B={ 1'0 \wire54 [12:7] }, Y=\wire60
      New ports: A={ 5'00000 $logic_not$rtl.v:703$586_Y }, B=\wire54 [12:7], Y=\wire60 [5:0]
      New connections: \wire60 [6] = 1'0
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
    Consolidated identical input bits for $mux cell $procmux$627:
      Old ports: A=3'000, B={ 2'00 $and$rtl.v:594$488_Y [0] }, Y=$procmux$627_Y
      New ports: A=1'0, B=$and$rtl.v:594$488_Y [0], Y=$procmux$627_Y [0]
      New connections: $procmux$627_Y [2:1] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:581$469:
      Old ports: A={ 1'0 $auto$opt_expr.cc:189:group_cell_inputs$1201 $auto$opt_expr.cc:189:group_cell_inputs$1199 }, B={ 8'00000000 $auto$rtlil.cc:1836:ReduceOr$1021 }, Y=$0\reg81[8:0]
      New ports: A={ $auto$opt_expr.cc:189:group_cell_inputs$1201 $auto$opt_expr.cc:189:group_cell_inputs$1199 }, B={ 7'0000000 $auto$rtlil.cc:1836:ReduceOr$1021 }, Y=$0\reg81[8:0] [7:0]
      New connections: $0\reg81[8:0] [8] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:596$493:
      Old ports: A=8'10101001, B={ 3'000 \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] }, Y=$ternary$rtl.v:596$493_Y
      New ports: A=3'101, B={ 1'0 \reg79 [0] \reg79 [0] }, Y={ $ternary$rtl.v:596$493_Y [5] $ternary$rtl.v:596$493_Y [1:0] }
      New connections: { $ternary$rtl.v:596$493_Y [7:6] $ternary$rtl.v:596$493_Y [4:2] } = { $ternary$rtl.v:596$493_Y [5] 1'0 $ternary$rtl.v:596$493_Y [1:0] $ternary$rtl.v:596$493_Y [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:636$529:
      Old ports: A={ 5'00000 \reg82 }, B=8'10011101, Y=$ternary$rtl.v:636$529_Y
      New ports: A={ 1'0 \reg82 }, B=4'1101, Y=$ternary$rtl.v:636$529_Y [3:0]
      New connections: $ternary$rtl.v:636$529_Y [7:4] = { $ternary$rtl.v:636$529_Y [3] 2'00 $ternary$rtl.v:636$529_Y [3] }
  Optimizing cells in module \module70.
    Consolidated identical input bits for $mux cell $procmux$630:
      Old ports: A=$procmux$627_Y, B={ 2'00 $logic_not$rtl.v:584$478_Y [0] }, Y=$0\reg82[2:0]
      New ports: A=$procmux$627_Y [0], B=$logic_not$rtl.v:584$478_Y [0], Y=$0\reg82[2:0] [0]
      New connections: $0\reg82[2:0] [2:1] = 2'00
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:81$34:
      Old ports: A=5'01100, B=5'10011, Y=$ternary$rtl.v:81$34_Y [4:0]
      New ports: A=2'10, B=2'01, Y={ $ternary$rtl.v:81$34_Y [2] $ternary$rtl.v:81$34_Y [0] }
      New connections: { $ternary$rtl.v:81$34_Y [4:3] $ternary$rtl.v:81$34_Y [1] } = { $ternary$rtl.v:81$34_Y [0] $ternary$rtl.v:81$34_Y [2] $ternary$rtl.v:81$34_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:81$36:
      Old ports: A={ 7'0000000 \wire5 [0] }, B={ 3'101 $ternary$rtl.v:81$34_Y [4:0] }, Y=$ternary$rtl.v:81$36_Y [7:0]
      New ports: A={ 5'00000 \wire5 [0] }, B={ 1'1 $ternary$rtl.v:81$34_Y [4:0] }, Y=$ternary$rtl.v:81$36_Y [5:0]
      New connections: $ternary$rtl.v:81$36_Y [7:6] = { $ternary$rtl.v:81$36_Y [5] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:99$60:
      Old ports: A=8'10111011, B={ 7'0000000 \wire3 [1] }, Y=$ternary$rtl.v:99$60_Y
      New ports: A=2'11, B={ 1'0 \wire3 [1] }, Y=$ternary$rtl.v:99$60_Y [1:0]
      New connections: $ternary$rtl.v:99$60_Y [7:2] = { $ternary$rtl.v:99$60_Y [1] 1'0 $ternary$rtl.v:99$60_Y [1] $ternary$rtl.v:99$60_Y [1] $ternary$rtl.v:99$60_Y [1] 1'0 }
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$37: { $ternary$rtl.v:81$36_Y [0] $ternary$rtl.v:81$36_Y [1] $ternary$rtl.v:81$36_Y [2] $ternary$rtl.v:81$36_Y [3] $ternary$rtl.v:81$36_Y [4] $ternary$rtl.v:81$36_Y [5] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:81$36:
      Old ports: A={ 5'00000 \wire5 [0] }, B={ 1'1 $ternary$rtl.v:81$34_Y [4:0] }, Y=$ternary$rtl.v:81$36_Y [5:0]
      New ports: A={ 3'000 \wire5 [0] }, B={ 1'1 $ternary$rtl.v:81$34_Y [2] $ternary$rtl.v:81$34_Y [0] $ternary$rtl.v:81$34_Y [0] }, Y={ $ternary$rtl.v:81$36_Y [5] $ternary$rtl.v:81$36_Y [2:0] }
      New connections: $ternary$rtl.v:81$36_Y [4:3] = { $ternary$rtl.v:81$36_Y [1] $ternary$rtl.v:81$36_Y [2] }
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$37: { $ternary$rtl.v:81$36_Y [0] $ternary$rtl.v:81$36_Y [1] $ternary$rtl.v:81$36_Y [2] $ternary$rtl.v:81$36_Y [5] }
  Optimizing cells in module \top.
Performed a total of 19 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
<suppressed ~1 debug messages>
Optimizing module module28.
<suppressed ~2 debug messages>
Optimizing module module46.
Optimizing module module70.
<suppressed ~1 debug messages>
Optimizing module module8.
Optimizing module top.

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$37: { $ternary$rtl.v:81$36_Y [0] $ternary$rtl.v:81$36_Y [3] $ternary$rtl.v:81$36_Y [4] $ternary$rtl.v:81$36_Y [7] }
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.20.16. Rerunning OPT passes. (Maybe there is more to do..)

2.20.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module105..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module132..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module28..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module70..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

2.20.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module105.
  Optimizing cells in module \module132.
  Optimizing cells in module \module28.
  Optimizing cells in module \module46.
  Optimizing cells in module \module70.
  Optimizing cells in module \module8.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.20.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.20.23. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$constmap:7d9b818da523eefd71b9e3b78ff8771d48b51f12$paramod$2c1cf82961118f89fd08dd2b1a4f48200ad92f53\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:f3f141190c9d9a747398e6a702c9769b19bb70ff$paramod$5d8de347ec3356b8647b69d16c2a5c80a12d6e8b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $xnor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=5 for cells of type $alu.
Using template $paramod$constmap:f66a94866a6453adb38044cccfaf7ea3748f404c$paramod$b5b2741a164f11ea203fe2762d2aa0ed530dd8fd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:a6de71d0b9c127d2b89ab3814ac7c7377b45bfa4$paramod$a4e14a8cbd1e95b6bc7371331b37b562acb655b1\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$39fa5ace3493c4564183a2149470cf6528acc8fc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper maccmap for cells of type $macc.
  add \wire2 * $reduce_or$rtl.v:55$8_Y [0] (20x1 bits, unsigned)
  add $auto$wreduce.cc:455:run$883 [15:0] (16 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=18\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=36\Y_WIDTH=36 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=8\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=36 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
  sub \wire12 [2:0] (3 bits, unsigned)
  add \wire12 * \wire12 (7x7 bits, signed)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=4\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:44384fbf3e9d5f15ecfc0913ac53ad8e98dc76c3$paramod$9562547687998e9536bfb89b51275174af8f1fb3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:5e937be60e6ea86027139d6284f8b70b2ed48bd9$paramod$e5f27175f67d6e140f5ac47f1c6f39373f388e0c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:ebf891295000998d4fc8272685b52f26cbaff93b$paramod$d72b3731140f5381c9df6133ae62fbd2bb60ff91\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:a761fa9de508c66673861958b89be41e102c276b$paramod$0e89b4b10c958e16653c7451bf4d20e0db014a1e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_fa\WIDTH=3 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
  add $logic_not$rtl.v:169$76_Y * $logic_not$rtl.v:169$79_Y (1x1 bits, unsigned)
  add \reg35 * \reg35 [1:0] (22x2 bits, unsigned)
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_xnor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=22\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod$constmap:c2fd4658bcf8ee4b14f40522ab540c97616f5de7$paramod$580e1979da73e56425198059b49777e62b720ec8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:a761fa9de508c66673861958b89be41e102c276b$paramod$036cb80da0cd1d3c9159a24e2b7da6c512eca2d0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=1\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:af88607747f63c10e47f22dc296ae121e0f5a86e$paramod$16ba00a3df12c0eb0dbd2b1e56b1040e2622da01\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:025740853e6b73bd47b70c1b68f19c0f825741d3$paramod$42d54c5da4484a57d4ce788d11c81504e7d3983f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:67468baf91ff576cbc3b7e295cff7e7f11732d95$paramod$b28cc8db624d106f99d0839f91fd86b861d99b9e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:7bf1f7855e04af809ea2dd517b37cc31bd4f0ae6$paramod$d58ad4524979326fe9bde3b7c035435990c67c0d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:9f39e8cba11e38ed74bca645ac37a9d6907871c7$paramod$1be8aad54c9b69c6b2aac76adfc1777c21181bf9\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
  add { \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] \reg79 [0] } * \wire73 (16x14 bits, unsigned)
  add \reg83 [7:0] * \reg78 [0] (8x1 bits, unsigned)
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=13\Y_WIDTH=14 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:6b15466d8d38720a9dba29cd58912fa39933f304$paramod$380f5dc82f3382207d3757b2836624664e20eb19\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:cd2c3326812daccd5620b09077d003c77d0ef137$paramod$1e689561c2f35a51f12f0d4b63d6bcd0001d41cc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod$constmap:607dc27104fc6ad6c97fdbd92f9b50113b1867ed$paramod$bad6575de0bad1a4490a7c7db608b58040edd854\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:2e0917069cafa1bd46d1efd788f27e2a6b92570d$paramod$b9a3f9ce60b21c4913e0cfc17677fd2f082ab6a2\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:160c5638382522fae27f8e4cd99e086f37cc760d$paramod$493bdb94ae375b9682fb78727b024cdf292add25\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=11\Y_WIDTH=21 for cells of type $alu.
Using template $paramod$constmap:4f7aadd8fde806275beece6bc900c67559bfaa71$paramod$7cefa4e25854231f4d9a0ca331592eb8c66305fa\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
  add 1'0 * \wire134 [7] (1x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
  add \wire135 * $sshl$rtl.v:357$222_Y (22x22 bits, unsigned)
Using template $paramod$constmap:053f26719995d93df6f76a0528b3985ab9d84f63$paramod$629aa692319a65b7f6d8802e3b88f16f2b66f1db\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:c09efc3a598b57c766abf4fc44d3c69ba63e8fcf$paramod$35b69c0177a0cd5362a4fc3d308f788232086db4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=10 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=9 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
No more expansions possible.
<suppressed ~10044 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
<suppressed ~243 debug messages>
Optimizing module module132.
<suppressed ~557 debug messages>
Optimizing module module28.
<suppressed ~206 debug messages>
Optimizing module module46.
<suppressed ~360 debug messages>
Optimizing module module70.
<suppressed ~1310 debug messages>
Optimizing module module8.
<suppressed ~232 debug messages>
Optimizing module top.
<suppressed ~769 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
<suppressed ~264 debug messages>
Finding identical cells in module `\module132'.
<suppressed ~204 debug messages>
Finding identical cells in module `\module28'.
<suppressed ~75 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~69 debug messages>
Finding identical cells in module `\module70'.
<suppressed ~1767 debug messages>
Finding identical cells in module `\module8'.
<suppressed ~60 debug messages>
Finding identical cells in module `\top'.
<suppressed ~228 debug messages>
Removed a total of 889 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$13085 ($_DFF_P_) from module module105.
Removing $auto$simplemap.cc:420:simplemap_dff$5960 ($_DFF_P_) from module module28.
Removing $auto$simplemap.cc:420:simplemap_dff$8665 ($_DFF_P_) from module module70.
Removing $auto$simplemap.cc:420:simplemap_dff$4966 ($_DFF_P_) from module module8.
Replaced 4 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 831 unused cells and 2663 unused wires.
<suppressed ~838 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
<suppressed ~31 debug messages>
Optimizing module module132.
<suppressed ~4 debug messages>
Optimizing module module28.
<suppressed ~2 debug messages>
Optimizing module module46.
<suppressed ~2 debug messages>
Optimizing module module70.
<suppressed ~19 debug messages>
Optimizing module module8.
Optimizing module top.
<suppressed ~4 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 6 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$13068 ($_DFF_P_) from module module105.
Removing $auto$simplemap.cc:420:simplemap_dff$8611 ($_DFF_P_) from module module70.
Replaced 2 DFF cells.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 19 unused cells and 32 unused wires.
<suppressed ~22 debug messages>

2.22.10. Rerunning OPT passes. (Removed registers in this run.)

2.22.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
<suppressed ~1 debug messages>
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$13065 ($_DFF_P_) from module module105.
Replaced 1 DFF cells.

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.22.15. Rerunning OPT passes. (Removed registers in this run.)

2.22.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
Optimizing module module132.
Optimizing module module28.
Optimizing module module46.
Optimizing module module70.
Optimizing module module8.
Optimizing module top.

2.22.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
Finding identical cells in module `\module28'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module70'.
Finding identical cells in module `\module8'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.18. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..

2.22.20. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module105' to `<abc-temp-dir>/input.blif'..
Extracted 677 gates and 792 wires to a netlist network with 113 inputs and 86 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       11
ABC RESULTS:            ANDNOT cells:       85
ABC RESULTS:              AOI3 cells:       18
ABC RESULTS:               MUX cells:      123
ABC RESULTS:              NAND cells:       30
ABC RESULTS:               NOR cells:       21
ABC RESULTS:               NOT cells:       26
ABC RESULTS:              OAI3 cells:       10
ABC RESULTS:                OR cells:      163
ABC RESULTS:             ORNOT cells:       35
ABC RESULTS:              XNOR cells:       19
ABC RESULTS:               XOR cells:       64
ABC RESULTS:        internal signals:      593
ABC RESULTS:           input signals:      113
ABC RESULTS:          output signals:       86
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module132' to `<abc-temp-dir>/input.blif'..
Extracted 1215 gates and 1323 wires to a netlist network with 106 inputs and 80 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       18
ABC RESULTS:            ANDNOT cells:      178
ABC RESULTS:              AOI3 cells:       50
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:      248
ABC RESULTS:              NAND cells:       37
ABC RESULTS:               NOR cells:       26
ABC RESULTS:               NOT cells:       64
ABC RESULTS:              OAI3 cells:       19
ABC RESULTS:              OAI4 cells:        3
ABC RESULTS:                OR cells:      235
ABC RESULTS:             ORNOT cells:       23
ABC RESULTS:              XNOR cells:       54
ABC RESULTS:               XOR cells:      141
ABC RESULTS:        internal signals:     1137
ABC RESULTS:           input signals:      106
ABC RESULTS:          output signals:       80
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module28' to `<abc-temp-dir>/input.blif'..
Extracted 532 gates and 628 wires to a netlist network with 94 inputs and 34 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       32
ABC RESULTS:            ANDNOT cells:       79
ABC RESULTS:              AOI3 cells:        8
ABC RESULTS:               MUX cells:       19
ABC RESULTS:              NAND cells:       42
ABC RESULTS:               NOR cells:       22
ABC RESULTS:               NOT cells:       13
ABC RESULTS:              OAI3 cells:       11
ABC RESULTS:                OR cells:      115
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:       18
ABC RESULTS:               XOR cells:       87
ABC RESULTS:        internal signals:      500
ABC RESULTS:           input signals:       94
ABC RESULTS:          output signals:       34
Removing temp directory.

2.23.4. Extracting gate netlist of module `\module46' to `<abc-temp-dir>/input.blif'..
Extracted 157 gates and 189 wires to a netlist network with 30 inputs and 23 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:       32
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:       20
ABC RESULTS:        internal signals:      136
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:       23
Removing temp directory.

2.23.5. Extracting gate netlist of module `\module70' to `<abc-temp-dir>/input.blif'..
Extracted 925 gates and 1027 wires to a netlist network with 100 inputs and 64 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       55
ABC RESULTS:            ANDNOT cells:      122
ABC RESULTS:              AOI3 cells:       39
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:       70
ABC RESULTS:              NAND cells:       28
ABC RESULTS:               NOR cells:       23
ABC RESULTS:               NOT cells:       37
ABC RESULTS:              OAI3 cells:       23
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      175
ABC RESULTS:             ORNOT cells:       16
ABC RESULTS:              XNOR cells:       36
ABC RESULTS:               XOR cells:      116
ABC RESULTS:        internal signals:      863
ABC RESULTS:           input signals:      100
ABC RESULTS:          output signals:       64
Removing temp directory.

2.23.6. Extracting gate netlist of module `\module8' to `<abc-temp-dir>/input.blif'..
Extracted 304 gates and 350 wires to a netlist network with 44 inputs and 39 outputs.

2.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:        8
ABC RESULTS:               MUX cells:       42
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:       13
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:               ONE cells:        1
ABC RESULTS:                OR cells:       44
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:       26
ABC RESULTS:        internal signals:      267
ABC RESULTS:           input signals:       44
ABC RESULTS:          output signals:       39
Removing temp directory.

2.23.7. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 760 gates and 907 wires to a netlist network with 145 inputs and 99 outputs.

2.23.7.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       57
ABC RESULTS:            ANDNOT cells:       88
ABC RESULTS:              AOI3 cells:       19
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       73
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:       21
ABC RESULTS:               NOT cells:       41
ABC RESULTS:              OAI3 cells:       32
ABC RESULTS:                OR cells:       80
ABC RESULTS:             ORNOT cells:       17
ABC RESULTS:              XNOR cells:       24
ABC RESULTS:               XOR cells:       79
ABC RESULTS:              ZERO cells:        1
ABC RESULTS:        internal signals:      663
ABC RESULTS:           input signals:      145
ABC RESULTS:          output signals:       99
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module105.
<suppressed ~8 debug messages>
Optimizing module module132.
<suppressed ~96 debug messages>
Optimizing module module28.
<suppressed ~11 debug messages>
Optimizing module module46.
Optimizing module module70.
<suppressed ~3 debug messages>
Optimizing module module8.
Optimizing module top.
<suppressed ~11 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module105'.
Finding identical cells in module `\module132'.
<suppressed ~27 debug messages>
Finding identical cells in module `\module28'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~27 debug messages>
Finding identical cells in module `\module70'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module8'.
<suppressed ~9 debug messages>
Finding identical cells in module `\top'.
<suppressed ~24 debug messages>
Removed a total of 31 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module105..
Finding unused cells or wires in module \module132..
Finding unused cells or wires in module \module28..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module70..
Finding unused cells or wires in module \module8..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2390 unused wires.
<suppressed ~7 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module105 ===

   Number of wires:                548
   Number of wire bits:           1016
   Number of public wires:          21
   Number of public wire bits:     397
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                677
     $_ANDNOT_                      85
     $_AND_                         11
     $_AOI3_                        18
     $_DFF_P_                       72
     $_MUX_                        123
     $_NAND_                        30
     $_NOR_                         21
     $_NOT_                         26
     $_OAI3_                        10
     $_ORNOT_                       35
     $_OR_                         163
     $_XNOR_                        19
     $_XOR_                         64

=== module132 ===

   Number of wires:               1039
   Number of wire bits:           1505
   Number of public wires:          25
   Number of public wire bits:     448
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1136
     $_ANDNOT_                     177
     $_AND_                         18
     $_AOI3_                        50
     $_AOI4_                         1
     $_DFF_P_                       48
     $_MUX_                        248
     $_NAND_                        37
     $_NOR_                         25
     $_NOT_                         63
     $_OAI3_                        19
     $_OAI4_                         3
     $_ORNOT_                       23
     $_OR_                         235
     $_XNOR_                        54
     $_XOR_                        135

=== module28 ===

   Number of wires:                462
   Number of wire bits:           1718
   Number of public wires:          31
   Number of public wire bits:     679
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                487
     $_ANDNOT_                      79
     $_AND_                         31
     $_AOI3_                         8
     $_DFF_P_                       26
     $_MUX_                         19
     $_NAND_                        42
     $_NOR_                         22
     $_NOT_                         13
     $_OAI3_                        11
     $_ORNOT_                       13
     $_OR_                         115
     $_XNOR_                        18
     $_XOR_                         87
     module105                       1
     module46                        1
     module70                        1

=== module46 ===

   Number of wires:                108
   Number of wire bits:            438
   Number of public wires:          21
   Number of public wire bits:     351
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     $_ANDNOT_                      29
     $_AND_                          3
     $_AOI3_                         3
     $_NAND_                         2
     $_NOR_                          8
     $_NOT_                          7
     $_OAI3_                         1
     $_ORNOT_                        3
     $_OR_                          29
     $_XNOR_                         3
     $_XOR_                         20

=== module70 ===

   Number of wires:                718
   Number of wire bits:           1225
   Number of public wires:          30
   Number of public wire bits:     466
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                793
     $_ANDNOT_                     121
     $_AND_                         55
     $_AOI3_                        39
     $_AOI4_                         2
     $_DFF_P_                       51
     $_MUX_                         70
     $_NAND_                        28
     $_NOR_                         23
     $_NOT_                         37
     $_OAI3_                        23
     $_OAI4_                         1
     $_ORNOT_                       16
     $_OR_                         175
     $_XNOR_                        36
     $_XOR_                        116

=== module8 ===

   Number of wires:                217
   Number of wire bits:            480
   Number of public wires:          18
   Number of public wire bits:     266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                250
     $_ANDNOT_                      62
     $_AND_                          4
     $_AOI3_                         8
     $_DFF_P_                       15
     $_MUX_                         42
     $_NAND_                         7
     $_NOR_                         10
     $_NOT_                         13
     $_OAI3_                         9
     $_ORNOT_                        7
     $_OR_                          44
     $_XNOR_                         3
     $_XOR_                         26

=== top ===

   Number of wires:                487
   Number of wire bits:           1490
   Number of public wires:          26
   Number of public wire bits:     549
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                603
     $_ANDNOT_                      84
     $_AND_                         57
     $_AOI3_                        19
     $_AOI4_                         1
     $_DFF_P_                       65
     $_MUX_                         73
     $_NAND_                        12
     $_NOR_                         21
     $_NOT_                         41
     $_OAI3_                        32
     $_ORNOT_                       17
     $_OR_                          76
     $_XNOR_                        24
     $_XOR_                         79
     module28                        1
     module8                         1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module105..
checking module module132..
checking module module28..
checking module module46..
checking module module70..
checking module module8..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module105'.
Dumping module `\module132'.
Dumping module `\module28'.
Dumping module `\module46'.
Dumping module `\module70'.
Dumping module `\module8'.
Dumping module `\top'.

Warnings: 24 unique messages, 24 total
End of script. Logfile hash: e2abbe2d84
CPU: user 4.92s system 0.00s, MEM: 56.68 MB total, 50.16 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 45x proc (1 sec), 15% 2x techmap (0 sec), ...
