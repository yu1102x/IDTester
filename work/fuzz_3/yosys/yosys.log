
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module10'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell top.modinst21 (module10).
Warning: Resizing cell port top.modinst21.y from 22 bits to 71 bits.
Warning: Resizing cell port top.modinst21.wire13 from 15 bits to 11 bits.
Warning: Resizing cell port top.modinst21.wire12 from 16 bits to 5 bits.
Warning: Resizing cell port top.modinst21.wire11 from 20 bits to 14 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$rtl.v:171$124 in module top.
Marked 1 switch rules as full_case in process $proc$rtl.v:144$81 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$proc$rtl.v:43$220'.
  Set init value: \reg6 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:42$219'.
  Set init value: \reg7 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:38$218'.
  Set init value: \reg22 = 21'000000000000000000000
Found init rule in `\top.$proc$rtl.v:37$217'.
  Set init value: \reg23 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:33$216'.
  Set init value: \reg27 = 9'000000000
Found init rule in `\top.$proc$rtl.v:32$215'.
  Set init value: \reg28 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:31$214'.
  Set init value: \reg29 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:30$213'.
  Set init value: \reg30 = 21'000000000000000000000
Found init rule in `\top.$proc$rtl.v:29$212'.
  Set init value: \reg31 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:28$211'.
  Set init value: \reg32 = 10'0000000000
Found init rule in `\top.$proc$rtl.v:27$210'.
  Set init value: \reg33 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:23$209'.
  Set init value: \reg37 = 18'000000000000000000
Found init rule in `\top.$proc$rtl.v:21$208'.
  Set init value: \reg39 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:20$207'.
  Set init value: \reg40 = 10'0000000000
Found init rule in `\top.$proc$rtl.v:19$206'.
  Set init value: \reg41 = 4'0000
Found init rule in `\top.$proc$rtl.v:18$205'.
  Set init value: \reg42 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:17$204'.
  Set init value: \reg43 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:16$203'.
  Set init value: \reg44 = 4'0000
Found init rule in `\top.$proc$rtl.v:14$202'.
  Set init value: \reg46 = 14'00000000000000
Found init rule in `\top.$proc$rtl.v:13$201'.
  Set init value: \reg47 = 9'000000000
Found init rule in `\top.$proc$rtl.v:12$200'.
  Set init value: \reg48 = 5'00000
Found init rule in `\top.$proc$rtl.v:11$199'.
  Set init value: \reg49 = 6'000000
Found init rule in `\top.$proc$rtl.v:10$198'.
  Set init value: \reg50 = 20'00000000000000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$rtl.v:43$220'.
     1/1: $1\reg6[15:0]
Creating decoders for process `\top.$proc$rtl.v:42$219'.
     1/1: $1\reg7[14:0]
Creating decoders for process `\top.$proc$rtl.v:38$218'.
     1/1: $1\reg22[20:0]
Creating decoders for process `\top.$proc$rtl.v:37$217'.
     1/1: $1\reg23[21:0]
Creating decoders for process `\top.$proc$rtl.v:33$216'.
     1/1: $1\reg27[8:0]
Creating decoders for process `\top.$proc$rtl.v:32$215'.
     1/1: $1\reg28[14:0]
Creating decoders for process `\top.$proc$rtl.v:31$214'.
     1/1: $1\reg29[10:0]
Creating decoders for process `\top.$proc$rtl.v:30$213'.
     1/1: $1\reg30[20:0]
Creating decoders for process `\top.$proc$rtl.v:29$212'.
     1/1: $1\reg31[19:0]
Creating decoders for process `\top.$proc$rtl.v:28$211'.
     1/1: $1\reg32[9:0]
Creating decoders for process `\top.$proc$rtl.v:27$210'.
     1/1: $1\reg33[15:0]
Creating decoders for process `\top.$proc$rtl.v:23$209'.
     1/1: $1\reg37[17:0]
Creating decoders for process `\top.$proc$rtl.v:21$208'.
     1/1: $1\reg39[18:0]
Creating decoders for process `\top.$proc$rtl.v:20$207'.
     1/1: $1\reg40[9:0]
Creating decoders for process `\top.$proc$rtl.v:19$206'.
     1/1: $1\reg41[3:0]
Creating decoders for process `\top.$proc$rtl.v:18$205'.
     1/1: $1\reg42[14:0]
Creating decoders for process `\top.$proc$rtl.v:17$204'.
     1/1: $1\reg43[10:0]
Creating decoders for process `\top.$proc$rtl.v:16$203'.
     1/1: $1\reg44[3:0]
Creating decoders for process `\top.$proc$rtl.v:14$202'.
     1/1: $1\reg46[13:0]
Creating decoders for process `\top.$proc$rtl.v:13$201'.
     1/1: $1\reg47[8:0]
Creating decoders for process `\top.$proc$rtl.v:12$200'.
     1/1: $1\reg48[4:0]
Creating decoders for process `\top.$proc$rtl.v:11$199'.
     1/1: $1\reg49[5:0]
Creating decoders for process `\top.$proc$rtl.v:10$198'.
     1/1: $1\reg50[19:0]
Creating decoders for process `\top.$proc$rtl.v:211$188'.
     1/1: $0\reg50[19:0]
Creating decoders for process `\top.$proc$rtl.v:171$124'.
     1/4: $0\reg46[13:0]
     2/4: $0\reg47[8:0]
     3/4: $0\reg48[4:0]
     4/4: $0\reg49[5:0]
Creating decoders for process `\top.$proc$rtl.v:144$81'.
     1/6: $0\reg44[3:0]
     2/6: $0\reg41[3:0]
     3/6: $0\reg40[9:0]
     4/6: $0\reg39[18:0]
     5/6: $0\reg42[14:0]
     6/6: $0\reg43[10:0]
Creating decoders for process `\top.$proc$rtl.v:136$70'.
     1/1: $0\reg37[17:0]
Creating decoders for process `\top.$proc$rtl.v:116$52'.
     1/4: $0\reg33[15:0]
     2/4: $0\reg32[9:0]
     3/4: $0\reg31[19:0]
     4/4: $0\reg30[20:0]
Creating decoders for process `\top.$proc$rtl.v:104$28'.
     1/3: $0\reg29[10:0]
     2/3: $0\reg28[14:0]
     3/3: $0\reg27[8:0]
Creating decoders for process `\top.$proc$rtl.v:93$10'.
     1/2: $0\reg23[21:0]
     2/2: $0\reg22[20:0]
Creating decoders for process `\top.$proc$rtl.v:85$1'.
     1/2: $0\reg7[14:0]
     2/2: $0\reg6[15:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\reg50' using process `\top.$proc$rtl.v:211$188'.
  created $dff cell `$procdff$254' with positive edge clock.
Creating register for signal `\top.\reg49' using process `\top.$proc$rtl.v:171$124'.
  created $dff cell `$procdff$255' with positive edge clock.
Creating register for signal `\top.\reg48' using process `\top.$proc$rtl.v:171$124'.
  created $dff cell `$procdff$256' with positive edge clock.
Creating register for signal `\top.\reg47' using process `\top.$proc$rtl.v:171$124'.
  created $dff cell `$procdff$257' with positive edge clock.
Creating register for signal `\top.\reg46' using process `\top.$proc$rtl.v:171$124'.
  created $dff cell `$procdff$258' with positive edge clock.
Creating register for signal `\top.\reg44' using process `\top.$proc$rtl.v:144$81'.
  created $dff cell `$procdff$259' with positive edge clock.
Creating register for signal `\top.\reg43' using process `\top.$proc$rtl.v:144$81'.
  created $dff cell `$procdff$260' with positive edge clock.
Creating register for signal `\top.\reg42' using process `\top.$proc$rtl.v:144$81'.
  created $dff cell `$procdff$261' with positive edge clock.
Creating register for signal `\top.\reg41' using process `\top.$proc$rtl.v:144$81'.
  created $dff cell `$procdff$262' with positive edge clock.
Creating register for signal `\top.\reg40' using process `\top.$proc$rtl.v:144$81'.
  created $dff cell `$procdff$263' with positive edge clock.
Creating register for signal `\top.\reg39' using process `\top.$proc$rtl.v:144$81'.
  created $dff cell `$procdff$264' with positive edge clock.
Creating register for signal `\top.\reg37' using process `\top.$proc$rtl.v:136$70'.
  created $dff cell `$procdff$265' with positive edge clock.
Creating register for signal `\top.\reg33' using process `\top.$proc$rtl.v:116$52'.
  created $dff cell `$procdff$266' with positive edge clock.
Creating register for signal `\top.\reg32' using process `\top.$proc$rtl.v:116$52'.
  created $dff cell `$procdff$267' with positive edge clock.
Creating register for signal `\top.\reg31' using process `\top.$proc$rtl.v:116$52'.
  created $dff cell `$procdff$268' with positive edge clock.
Creating register for signal `\top.\reg30' using process `\top.$proc$rtl.v:116$52'.
  created $dff cell `$procdff$269' with positive edge clock.
Creating register for signal `\top.\reg29' using process `\top.$proc$rtl.v:104$28'.
  created $dff cell `$procdff$270' with positive edge clock.
Creating register for signal `\top.\reg28' using process `\top.$proc$rtl.v:104$28'.
  created $dff cell `$procdff$271' with positive edge clock.
Creating register for signal `\top.\reg27' using process `\top.$proc$rtl.v:104$28'.
  created $dff cell `$procdff$272' with positive edge clock.
Creating register for signal `\top.\reg23' using process `\top.$proc$rtl.v:93$10'.
  created $dff cell `$procdff$273' with positive edge clock.
Creating register for signal `\top.\reg22' using process `\top.$proc$rtl.v:93$10'.
  created $dff cell `$procdff$274' with positive edge clock.
Creating register for signal `\top.\reg7' using process `\top.$proc$rtl.v:85$1'.
  created $dff cell `$procdff$275' with positive edge clock.
Creating register for signal `\top.\reg6' using process `\top.$proc$rtl.v:85$1'.
  created $dff cell `$procdff$276' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$rtl.v:43$220'.
Removing empty process `top.$proc$rtl.v:42$219'.
Removing empty process `top.$proc$rtl.v:38$218'.
Removing empty process `top.$proc$rtl.v:37$217'.
Removing empty process `top.$proc$rtl.v:33$216'.
Removing empty process `top.$proc$rtl.v:32$215'.
Removing empty process `top.$proc$rtl.v:31$214'.
Removing empty process `top.$proc$rtl.v:30$213'.
Removing empty process `top.$proc$rtl.v:29$212'.
Removing empty process `top.$proc$rtl.v:28$211'.
Removing empty process `top.$proc$rtl.v:27$210'.
Removing empty process `top.$proc$rtl.v:23$209'.
Removing empty process `top.$proc$rtl.v:21$208'.
Removing empty process `top.$proc$rtl.v:20$207'.
Removing empty process `top.$proc$rtl.v:19$206'.
Removing empty process `top.$proc$rtl.v:18$205'.
Removing empty process `top.$proc$rtl.v:17$204'.
Removing empty process `top.$proc$rtl.v:16$203'.
Removing empty process `top.$proc$rtl.v:14$202'.
Removing empty process `top.$proc$rtl.v:13$201'.
Removing empty process `top.$proc$rtl.v:12$200'.
Removing empty process `top.$proc$rtl.v:11$199'.
Removing empty process `top.$proc$rtl.v:10$198'.
Removing empty process `top.$proc$rtl.v:211$188'.
Found and cleaned up 2 empty switches in `\top.$proc$rtl.v:171$124'.
Removing empty process `top.$proc$rtl.v:171$124'.
Found and cleaned up 1 empty switch in `\top.$proc$rtl.v:144$81'.
Removing empty process `top.$proc$rtl.v:144$81'.
Removing empty process `top.$proc$rtl.v:136$70'.
Removing empty process `top.$proc$rtl.v:116$52'.
Removing empty process `top.$proc$rtl.v:104$28'.
Removing empty process `top.$proc$rtl.v:93$10'.
Removing empty process `top.$proc$rtl.v:85$1'.
Cleaned up 3 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
<suppressed ~4 debug messages>
Optimizing module top.
<suppressed ~28 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 32 unused cells and 134 unused wires.
<suppressed ~58 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module10..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
    New input vector for $reduce_and cell $reduce_and$rtl.v:235$223: { \wire14 [0] \wire14 [1] \wire14 [2] \wire14 [3] \wire14 [4] \wire14 [5] \wire14 [6] \wire14 [7] \wire14 [8] \wire14 [9] \wire14 [10] \wire14 [11] \wire14 [12] \wire14 [13] \wire14 [14] \wire14 [15] \wire14 [16] \wire14 [17] }
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:205$173: { \reg40 [0] \reg40 [1] \reg40 [2] \reg40 [3] \reg40 [4] \reg40 [5] \reg40 [6] \reg40 [7] \reg40 [8] \reg40 [9] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:151$93: { $ternary$rtl.v:151$92_Y [0] $ternary$rtl.v:151$92_Y [1] $ternary$rtl.v:151$92_Y [2] $ternary$rtl.v:151$92_Y [3] $ternary$rtl.v:151$92_Y [4] $ternary$rtl.v:151$92_Y [5] $ternary$rtl.v:151$92_Y [6] $ternary$rtl.v:151$92_Y [7] $ternary$rtl.v:151$92_Y [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:139$74: { $ternary$rtl.v:139$73_Y [0] $ternary$rtl.v:139$73_Y [1] $ternary$rtl.v:139$73_Y [2] $ternary$rtl.v:139$73_Y [3] $ternary$rtl.v:139$73_Y [4] $ternary$rtl.v:139$73_Y [5] $ternary$rtl.v:139$73_Y [6] $ternary$rtl.v:139$73_Y [7] $ternary$rtl.v:139$73_Y [8] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:123$58: { \reg22 [0] \reg22 [1] \reg22 [2] \reg22 [3] \reg22 [4] \reg22 [5] \reg22 [6] \reg22 [7] \reg22 [8] \reg22 [9] \reg22 [10] \reg22 [11] \reg22 [12] \reg22 [13] \reg22 [14] \reg22 [15] \reg22 [16] \reg22 [17] \reg22 [18] \reg22 [19] \reg22 [20] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:202$179: { \wire25 [0] \wire25 [1] \wire25 [2] \wire25 [3] \wire25 [4] \wire25 [5] \wire25 [6] \wire25 [7] \wire25 [8] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:174$127: { $add$rtl.v:174$126_Y [0] $add$rtl.v:174$126_Y [1] $add$rtl.v:174$126_Y [2] $add$rtl.v:174$126_Y [3] $add$rtl.v:174$126_Y [4] $add$rtl.v:174$126_Y [5] $add$rtl.v:174$126_Y [6] $add$rtl.v:174$126_Y [7] $add$rtl.v:174$126_Y [8] $add$rtl.v:174$126_Y [9] $add$rtl.v:174$126_Y [10] $add$rtl.v:174$126_Y [11] $add$rtl.v:174$126_Y [12] $add$rtl.v:174$126_Y [13] $add$rtl.v:174$126_Y [14] $add$rtl.v:174$126_Y [15] $add$rtl.v:174$126_Y [16] $add$rtl.v:174$126_Y [17] $add$rtl.v:174$126_Y [18] $add$rtl.v:174$126_Y [19] $add$rtl.v:174$126_Y [20] $add$rtl.v:174$126_Y [21] $add$rtl.v:174$126_Y [22] $add$rtl.v:174$126_Y [23] $add$rtl.v:174$126_Y [24] $add$rtl.v:174$126_Y [25] $add$rtl.v:174$126_Y [26] $add$rtl.v:174$126_Y [27] $add$rtl.v:174$126_Y [28] $add$rtl.v:174$126_Y [29] $add$rtl.v:174$126_Y [30] $add$rtl.v:174$126_Y [31] $add$rtl.v:174$126_Y [32] $add$rtl.v:174$126_Y [33] $add$rtl.v:174$126_Y [34] $add$rtl.v:174$126_Y [35] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:135$68: { $mul$rtl.v:135$67_Y [0] $mul$rtl.v:135$67_Y [1] $mul$rtl.v:135$67_Y [2] $mul$rtl.v:135$67_Y [3] $mul$rtl.v:135$67_Y [4] $mul$rtl.v:135$67_Y [5] $mul$rtl.v:135$67_Y [6] $mul$rtl.v:135$67_Y [7] $mul$rtl.v:135$67_Y [8] }
  Optimizing cells in module \top.
Performed a total of 8 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reg50 = 20'00000000000000000000 to constant driver in module top.
Promoting init spec \reg49 = 6'000000 to constant driver in module top.
Promoting init spec \reg48 = 5'00000 to constant driver in module top.
Promoted 3 init specs to constant drivers.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 21 bits (of 22) from wire module10.wire16.
Removed top 10 bits (of 11) from wire module10.wire17.
Removed top 12 bits (of 16) from wire module10.wire18.
Removed top 1 bits (of 15) from port A of cell top.$xnor$rtl.v:88$3 ($xnor).
Removed top 2 bits (of 15) from port B of cell top.$xnor$rtl.v:88$3 ($xnor).
Removed top 1 bits (of 15) from port A of cell top.$sub$rtl.v:88$4 ($sub).
Removed top 13 bits (of 22) from mux cell top.$ternary$rtl.v:98$23 ($mux).
Removed top 7 bits (of 21) from mux cell top.$ternary$rtl.v:111$40 ($mux).
Removed top 8 bits (of 22) from port B of cell top.$add$rtl.v:111$41 ($add).
Removed top 7 bits (of 21) from port A of cell top.$lt$rtl.v:113$51 ($lt).
Removed top 17 bits (of 41) from port A of cell top.$mul$rtl.v:123$60 ($mul).
Removed top 40 bits (of 41) from port B of cell top.$mul$rtl.v:123$60 ($mul).
Removed top 16 bits (of 41) from port Y of cell top.$mul$rtl.v:123$60 ($mul).
Removed top 33 bits (of 41) from port A of cell top.$xor$rtl.v:123$61 ($xor).
Removed top 16 bits (of 41) from port B of cell top.$xor$rtl.v:123$61 ($xor).
Removed top 16 bits (of 41) from port Y of cell top.$xor$rtl.v:123$61 ($xor).
Removed top 8 bits (of 9) from port A of cell top.$mul$rtl.v:135$67 ($mul).
Removed top 4 bits (of 9) from mux cell top.$ternary$rtl.v:139$73 ($mux).
Removed top 5 bits (of 6) from mux cell top.$ternary$rtl.v:140$76 ($mux).
Removed top 3 bits (of 6) from port A of cell top.$or$rtl.v:140$77 ($or).
Removed top 5 bits (of 6) from port B of cell top.$or$rtl.v:140$77 ($or).
Removed top 3 bits (of 6) from port Y of cell top.$or$rtl.v:140$77 ($or).
Removed top 13 bits (of 18) from mux cell top.$ternary$rtl.v:141$80 ($mux).
Removed top 19 bits (of 23) from mux cell top.$ternary$rtl.v:156$110 ($mux).
Removed top 4 bits (of 9) from mux cell top.$ternary$rtl.v:151$92 ($mux).
Removed top 8 bits (of 10) from mux cell top.$ternary$rtl.v:151$96 ($mux).
Removed top 16 bits (of 17) from mux cell top.$ternary$rtl.v:153$100 ($mux).
Removed top 16 bits (of 17) from port B of cell top.$shr$rtl.v:153$101 ($shr).
Removed top 14 bits (of 22) from mux cell top.$ternary$rtl.v:156$104 ($mux).
Removed top 19 bits (of 22) from port A of cell top.$sub$rtl.v:156$105 ($sub).
Removed top 14 bits (of 22) from port B of cell top.$sub$rtl.v:156$105 ($sub).
Removed top 18 bits (of 22) from port Y of cell top.$sub$rtl.v:156$105 ($sub).
Removed top 4 bits (of 8) from port B of cell top.$sub$rtl.v:156$105 ($sub).
Removed top 5 bits (of 10) from port A of cell top.$eq$rtl.v:166$123 ($eq).
Removed top 16 bits (of 36) from port B of cell top.$add$rtl.v:174$126 ($add).
Removed top 9 bits (of 17) from mux cell top.$ternary$rtl.v:187$145 ($mux).
Removed top 3 bits (of 19) from port Y of cell top.$mul$rtl.v:190$150 ($mul).
Removed top 4 bits (of 19) from mux cell top.$ternary$rtl.v:192$158 ($mux).
Removed top 1 bits (of 9) from port B of cell top.$xor$rtl.v:193$160 ($xor).
Removed top 36 bits (of 52) from mux cell top.$ternary$rtl.v:196$163 ($mux).
Removed top 36 bits (of 52) from port A of cell top.$le$rtl.v:198$170 ($le).
Removed top 16 bits (of 17) from port A of cell top.$sub$rtl.v:205$175 ($sub).
Removed top 16 bits (of 17) from port B of cell top.$sub$rtl.v:205$175 ($sub).
Removed top 18 bits (of 19) from port A of cell top.$add$rtl.v:204$187 ($add).
Removed top 11 bits (of 19) from port Y of cell top.$add$rtl.v:204$187 ($add).
Removed top 11 bits (of 19) from port B of cell top.$add$rtl.v:204$187 ($add).
Removed top 3 bits (of 4) from FF cell top.$procdff$259 ($dff).
Removed top 8 bits (of 10) from FF cell top.$procdff$263 ($dff).
Removed top 18 bits (of 19) from FF cell top.$procdff$264 ($dff).
Removed top 13 bits (of 18) from FF cell top.$procdff$265 ($dff).
Removed top 15 bits (of 16) from FF cell top.$procdff$266 ($dff).
Removed top 3 bits (of 10) from FF cell top.$procdff$267 ($dff).
Removed top 17 bits (of 20) from FF cell top.$procdff$268 ($dff).
Removed top 18 bits (of 21) from FF cell top.$procdff$269 ($dff).
Removed top 14 bits (of 15) from FF cell top.$procdff$271 ($dff).
Removed top 4 bits (of 9) from FF cell top.$procdff$272 ($dff).
Removed top 13 bits (of 22) from FF cell top.$procdff$273 ($dff).
Removed cell top.$procdff$274 ($dff).
Removed top 10 bits (of 16) from FF cell top.$procdff$276 ($dff).
Removed top 13 bits (of 22) from port A of cell top.$add$rtl.v:111$41 ($add).
Removed top 7 bits (of 22) from port Y of cell top.$add$rtl.v:111$41 ($add).
Removed top 10 bits (of 16) from port B of cell top.$xnor$rtl.v:113$42 ($xnor).
Removed top 1 bits (of 2) from mux cell top.$ternary$rtl.v:151$96 ($mux).
Removed top 14 bits (of 23) from port A of cell top.$shr$rtl.v:153$101 ($shr).
Removed top 4 bits (of 8) from mux cell top.$ternary$rtl.v:156$104 ($mux).
Removed top 13 bits (of 18) from port A of cell top.$and$rtl.v:159$118 ($and).
Removed top 14 bits (of 15) from port B of cell top.$ne$rtl.v:159$119 ($ne).
Removed top 13 bits (of 36) from port A of cell top.$add$rtl.v:174$126 ($add).
Removed top 17 bits (of 20) from port B of cell top.$add$rtl.v:174$126 ($add).
Removed top 12 bits (of 36) from port Y of cell top.$add$rtl.v:174$126 ($add).
Removed top 3 bits (of 4) from port A of cell top.$add$rtl.v:183$140 ($add).
Removed top 14 bits (of 23) from mux cell top.$ternary$rtl.v:188$148 ($mux).
Removed top 3 bits (of 10) from port A of cell top.$sshr$rtl.v:189$149 ($sshr).
Removed top 9 bits (of 15) from port B of cell top.$sshr$rtl.v:189$149 ($sshr).
Removed top 2 bits (of 5) from port A of cell top.$mul$rtl.v:190$150 ($mul).
Removed top 2 bits (of 16) from port Y of cell top.$mul$rtl.v:190$150 ($mul).
Removed top 13 bits (of 52) from mux cell top.$ternary$rtl.v:198$169 ($mux).
Removed top 11 bits (of 19) from mux cell top.$ternary$rtl.v:204$186 ($mux).
Removed top 3 bits (of 8) from port A of cell top.$gt$rtl.v:202$178 ($gt).
Removed top 17 bits (of 20) from port B of cell top.$gt$rtl.v:202$178 ($gt).
Removed top 11 bits (of 19) from mux cell top.$ternary$rtl.v:204$184 ($mux).
Removed top 1 bits (of 2) from FF cell top.$procdff$263 ($dff).
Removed top 3 bits (of 11) from FF cell top.$procdff$270 ($dff).
Removed top 3 bits (of 11) from mux cell top.$ternary$rtl.v:157$113 ($mux).
Removed top 3 bits (of 11) from port B of cell top.$mul$rtl.v:190$150 ($mul).
Removed top 3 bits (of 14) from port Y of cell top.$mul$rtl.v:190$150 ($mul).
Removed top 13 bits (of 22) from wire top.$0\reg23[21:0].
Removed top 14 bits (of 15) from wire top.$0\reg28[14:0].
Removed top 15 bits (of 16) from wire top.$0\reg33[15:0].
Removed top 13 bits (of 18) from wire top.$0\reg37[17:0].
Removed top 9 bits (of 10) from wire top.$0\reg40[9:0].
Removed top 7 bits (of 22) from wire top.$add$rtl.v:111$41_Y.
Removed top 12 bits (of 36) from wire top.$add$rtl.v:174$126_Y.
Removed top 11 bits (of 19) from wire top.$add$rtl.v:204$187_Y.
Removed top 22 bits (of 23) from wire top.$eq$rtl.v:188$146_Y.
Removed top 8 bits (of 9) from wire top.$le$rtl.v:198$170_Y.
Removed top 40 bits (of 41) from wire top.$logic_not$rtl.v:123$59_Y.
Removed top 16 bits (of 17) from wire top.$logic_not$rtl.v:205$174_Y.
Removed top 16 bits (of 41) from wire top.$mul$rtl.v:123$60_Y.
Removed top 8 bits (of 19) from wire top.$mul$rtl.v:190$150_Y.
Removed top 3 bits (of 6) from wire top.$or$rtl.v:140$77_Y.
Removed top 9 bits (of 10) from wire top.$reduce_or$rtl.v:151$93_Y.
Removed top 20 bits (of 21) from wire top.$reduce_xnor$rtl.v:113$43_Y.
Removed top 18 bits (of 22) from wire top.$sub$rtl.v:156$105_Y.
Removed top 7 bits (of 21) from wire top.$ternary$rtl.v:111$40_Y.
Removed top 4 bits (of 9) from wire top.$ternary$rtl.v:139$73_Y.
Removed top 5 bits (of 6) from wire top.$ternary$rtl.v:140$76_Y.
Removed top 4 bits (of 9) from wire top.$ternary$rtl.v:151$92_Y.
Removed top 3 bits (of 11) from wire top.$ternary$rtl.v:157$113_Y.
Removed top 9 bits (of 17) from wire top.$ternary$rtl.v:187$145_Y.
Removed top 14 bits (of 23) from wire top.$ternary$rtl.v:188$148_Y.
Removed top 4 bits (of 19) from wire top.$ternary$rtl.v:192$158_Y.
Removed top 36 bits (of 52) from wire top.$ternary$rtl.v:196$163_Y.
Removed top 13 bits (of 52) from wire top.$ternary$rtl.v:198$169_Y.
Removed top 11 bits (of 19) from wire top.$ternary$rtl.v:204$184_Y.
Removed top 11 bits (of 19) from wire top.$ternary$rtl.v:204$186_Y.
Removed top 16 bits (of 41) from wire top.$xor$rtl.v:123$61_Y.
Removed top 8 bits (of 9) from wire top.wire25.
Removed top 2 bits (of 5) from wire top.wire34.
Removed top 16 bits (of 17) from wire top.wire36.
Removed top 3 bits (of 8) from wire top.wire38.
Removed top 4 bits (of 12) from wire top.wire45.
Removed top 1 bits (of 6) from wire top.wire8.
Removed top 4 bits (of 5) from wire top.wire9.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 43 unused wires.
<suppressed ~3 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~152 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module10:
  creating $alu model for $ge$rtl.v:235$225 ($ge): new $alu
  creating $alu model for $gt$rtl.v:235$221 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:235$221: $auto$alumacc.cc:474:replace_alu$320
  creating $alu cell for $ge$rtl.v:235$225: $auto$alumacc.cc:474:replace_alu$325
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:111$41 ($add).
  creating $macc model for $add$rtl.v:174$126 ($add).
  creating $macc model for $add$rtl.v:183$140 ($add).
  creating $macc model for $add$rtl.v:204$187 ($add).
  creating $macc model for $mul$rtl.v:123$60 ($mul).
  creating $macc model for $mul$rtl.v:135$67 ($mul).
  creating $macc model for $mul$rtl.v:190$150 ($mul).
  creating $macc model for $neg$rtl.v:150$90 ($neg).
  creating $macc model for $neg$rtl.v:96$11 ($neg).
  creating $macc model for $sub$rtl.v:156$105 ($sub).
  creating $macc model for $sub$rtl.v:205$175 ($sub).
  creating $macc model for $sub$rtl.v:88$4 ($sub).
  creating $alu model for $macc $sub$rtl.v:88$4.
  creating $alu model for $macc $sub$rtl.v:205$175.
  creating $alu model for $macc $sub$rtl.v:156$105.
  creating $alu model for $macc $neg$rtl.v:96$11.
  creating $alu model for $macc $neg$rtl.v:150$90.
  creating $alu model for $macc $add$rtl.v:204$187.
  creating $alu model for $macc $add$rtl.v:183$140.
  creating $alu model for $macc $add$rtl.v:174$126.
  creating $alu model for $macc $add$rtl.v:111$41.
  creating $macc cell for $mul$rtl.v:135$67: $auto$alumacc.cc:354:replace_macc$338
  creating $macc cell for $mul$rtl.v:123$60: $auto$alumacc.cc:354:replace_macc$339
  creating $macc cell for $mul$rtl.v:190$150: $auto$alumacc.cc:354:replace_macc$340
  creating $alu model for $gt$rtl.v:202$178 ($gt): new $alu
  creating $alu model for $le$rtl.v:156$107 ($le): new $alu
  creating $alu model for $le$rtl.v:198$170 ($le): new $alu
  creating $alu model for $lt$rtl.v:113$51 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:113$51: $auto$alumacc.cc:474:replace_alu$345
  creating $alu cell for $le$rtl.v:198$170: $auto$alumacc.cc:474:replace_alu$350
  creating $alu cell for $le$rtl.v:156$107: $auto$alumacc.cc:474:replace_alu$359
  creating $alu cell for $gt$rtl.v:202$178: $auto$alumacc.cc:474:replace_alu$368
  creating $alu cell for $add$rtl.v:111$41: $auto$alumacc.cc:474:replace_alu$373
  creating $alu cell for $add$rtl.v:174$126: $auto$alumacc.cc:474:replace_alu$376
  creating $alu cell for $add$rtl.v:183$140: $auto$alumacc.cc:474:replace_alu$379
  creating $alu cell for $add$rtl.v:204$187: $auto$alumacc.cc:474:replace_alu$382
  creating $alu cell for $neg$rtl.v:150$90: $auto$alumacc.cc:474:replace_alu$385
  creating $alu cell for $neg$rtl.v:96$11: $auto$alumacc.cc:474:replace_alu$388
  creating $alu cell for $sub$rtl.v:156$105: $auto$alumacc.cc:474:replace_alu$391
  creating $alu cell for $sub$rtl.v:205$175: $auto$alumacc.cc:474:replace_alu$394
  creating $alu cell for $sub$rtl.v:88$4: $auto$alumacc.cc:474:replace_alu$397
  created 13 $alu and 3 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:189$149 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$238_CMP $reduce_bool$rtl.v:190$154_Y $reduce_xnor$rtl.v:186$142_Y $reduce_and$rtl.v:174$127_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:148$86 ($sshl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:148$88_Y.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
<suppressed ~1 debug messages>
Optimizing module top.
<suppressed ~19 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$237.
    dead port 2/2 on $mux $procmux$237.
    dead port 1/2 on $mux $ternary$rtl.v:198$172.
    dead port 2/2 on $mux $ternary$rtl.v:198$172.
Removed 4 multiplexer ports.
<suppressed ~27 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:151$93: { $auto$wreduce.cc:455:run$301 [0] $auto$wreduce.cc:455:run$301 [1] $auto$wreduce.cc:455:run$301 [2] $auto$wreduce.cc:455:run$301 [3] $auto$wreduce.cc:455:run$301 [4] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:139$74: { $auto$wreduce.cc:455:run$299 [0] $auto$wreduce.cc:455:run$299 [1] $auto$wreduce.cc:455:run$299 [2] $auto$wreduce.cc:455:run$299 [3] $auto$wreduce.cc:455:run$299 [4] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$366: { $auto$rtlil.cc:1832:Not$363 $auto$rtlil.cc:1835:ReduceAnd$365 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$357: { $auto$rtlil.cc:1832:Not$354 $auto$rtlil.cc:1835:ReduceAnd$356 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$364: { $auto$alumacc.cc:490:replace_alu$360 [0] $auto$alumacc.cc:490:replace_alu$360 [1] $auto$alumacc.cc:490:replace_alu$360 [2] $auto$alumacc.cc:490:replace_alu$360 [3] $auto$alumacc.cc:490:replace_alu$360 [4] $auto$alumacc.cc:490:replace_alu$360 [5] $auto$alumacc.cc:490:replace_alu$360 [6] $auto$alumacc.cc:490:replace_alu$360 [7] $auto$alumacc.cc:490:replace_alu$360 [8] $auto$alumacc.cc:490:replace_alu$360 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$355: { $auto$alumacc.cc:490:replace_alu$351 [0] $auto$alumacc.cc:490:replace_alu$351 [1] $auto$alumacc.cc:490:replace_alu$351 [2] $auto$alumacc.cc:490:replace_alu$351 [3] $auto$alumacc.cc:490:replace_alu$351 [4] $auto$alumacc.cc:490:replace_alu$351 [5] $auto$alumacc.cc:490:replace_alu$351 [6] $auto$alumacc.cc:490:replace_alu$351 [7] $auto$alumacc.cc:490:replace_alu$351 [8] $auto$alumacc.cc:490:replace_alu$351 [9] $auto$alumacc.cc:490:replace_alu$351 [10] $auto$alumacc.cc:490:replace_alu$351 [11] $auto$alumacc.cc:490:replace_alu$351 [12] $auto$alumacc.cc:490:replace_alu$351 [13] $auto$alumacc.cc:490:replace_alu$351 [14] $auto$alumacc.cc:490:replace_alu$351 [15] $auto$alumacc.cc:490:replace_alu$351 [16] $auto$alumacc.cc:490:replace_alu$351 [17] $auto$alumacc.cc:490:replace_alu$351 [18] $auto$alumacc.cc:490:replace_alu$351 [19] $auto$alumacc.cc:490:replace_alu$351 [20] $auto$alumacc.cc:490:replace_alu$351 [21] $auto$alumacc.cc:490:replace_alu$351 [22] $auto$alumacc.cc:490:replace_alu$351 [23] $auto$alumacc.cc:490:replace_alu$351 [24] $auto$alumacc.cc:490:replace_alu$351 [25] $auto$alumacc.cc:490:replace_alu$351 [26] $auto$alumacc.cc:490:replace_alu$351 [27] $auto$alumacc.cc:490:replace_alu$351 [28] $auto$alumacc.cc:490:replace_alu$351 [29] $auto$alumacc.cc:490:replace_alu$351 [30] $auto$alumacc.cc:490:replace_alu$351 [31] $auto$alumacc.cc:490:replace_alu$351 [32] $auto$alumacc.cc:490:replace_alu$351 [33] $auto$alumacc.cc:490:replace_alu$351 [34] $auto$alumacc.cc:490:replace_alu$351 [35] $auto$alumacc.cc:490:replace_alu$351 [36] $auto$alumacc.cc:490:replace_alu$351 [37] $auto$alumacc.cc:490:replace_alu$351 [38] $auto$alumacc.cc:490:replace_alu$351 [39] $auto$alumacc.cc:490:replace_alu$351 [40] $auto$alumacc.cc:490:replace_alu$351 [41] $auto$alumacc.cc:490:replace_alu$351 [42] $auto$alumacc.cc:490:replace_alu$351 [43] $auto$alumacc.cc:490:replace_alu$351 [44] $auto$alumacc.cc:490:replace_alu$351 [45] $auto$alumacc.cc:490:replace_alu$351 [46] $auto$alumacc.cc:490:replace_alu$351 [47] $auto$alumacc.cc:490:replace_alu$351 [48] $auto$alumacc.cc:490:replace_alu$351 [49] $auto$alumacc.cc:490:replace_alu$351 [50] $auto$alumacc.cc:490:replace_alu$351 [51] }
  Optimizing cells in module \top.
Performed a total of 6 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 32 unused cells and 70 unused wires.
<suppressed ~34 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
<suppressed ~3 debug messages>
Optimizing module top.
<suppressed ~56 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~3 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:113$45:
      Old ports: A=21'000000000000000000001, B={ 7'1111111 $auto$opt_expr.cc:189:group_cell_inputs$412 $auto$opt_expr.cc:189:group_cell_inputs$410 }, Y=$ternary$rtl.v:113$45_Y
      New ports: A=15'000000000000001, B={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$412 $auto$opt_expr.cc:189:group_cell_inputs$410 }, Y=$ternary$rtl.v:113$45_Y [14:0]
      New connections: $ternary$rtl.v:113$45_Y [20:15] = { $ternary$rtl.v:113$45_Y [14] $ternary$rtl.v:113$45_Y [14] $ternary$rtl.v:113$45_Y [14] $ternary$rtl.v:113$45_Y [14] $ternary$rtl.v:113$45_Y [14] $ternary$rtl.v:113$45_Y [14] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:121$54:
      Old ports: A=8'10011110, B=8'00000000, Y=$ternary$rtl.v:121$54_Y
      New ports: A=1'1, B=1'0, Y=$ternary$rtl.v:121$54_Y [1]
      New connections: { $ternary$rtl.v:121$54_Y [7:2] $ternary$rtl.v:121$54_Y [0] } = { $ternary$rtl.v:121$54_Y [1] 2'00 $ternary$rtl.v:121$54_Y [1] $ternary$rtl.v:121$54_Y [1] $ternary$rtl.v:121$54_Y [1] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:122$57:
      Old ports: A=8'10111001, B={ 3'000 \wire1 [9:5] }, Y=$ternary$rtl.v:122$57_Y
      New ports: A=6'111001, B={ 1'0 \wire1 [9:5] }, Y=$ternary$rtl.v:122$57_Y [5:0]
      New connections: $ternary$rtl.v:122$57_Y [7:6] = { $ternary$rtl.v:122$57_Y [5] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:134$66:
      Old ports: A=8'10101100, B=8'00000000, Y=$ternary$rtl.v:134$66_Y
      New ports: A=1'1, B=1'0, Y=$ternary$rtl.v:134$66_Y [2]
      New connections: { $ternary$rtl.v:134$66_Y [7:3] $ternary$rtl.v:134$66_Y [1:0] } = { $ternary$rtl.v:134$66_Y [2] 1'0 $ternary$rtl.v:134$66_Y [2] 1'0 $ternary$rtl.v:134$66_Y [2] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:156$104:
      Old ports: A={ 3'000 \wire25 }, B=4'1111, Y=$ternary$rtl.v:156$104_Y [3:0]
      New ports: A={ 1'0 \wire25 }, B=2'11, Y=$ternary$rtl.v:156$104_Y [1:0]
      New connections: $ternary$rtl.v:156$104_Y [3:2] = { $ternary$rtl.v:156$104_Y [1] $ternary$rtl.v:156$104_Y [1] }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:113$48:
      Old ports: A={ 20'00000000000000000000 \wire25 }, B=$ternary$rtl.v:113$45_Y, Y=$ternary$rtl.v:113$48_Y
      New ports: A={ 14'00000000000000 \wire25 }, B=$ternary$rtl.v:113$45_Y [14:0], Y=$ternary$rtl.v:113$48_Y [14:0]
      New connections: $ternary$rtl.v:113$48_Y [20:15] = { $ternary$rtl.v:113$48_Y [14] $ternary$rtl.v:113$48_Y [14] $ternary$rtl.v:113$48_Y [14] $ternary$rtl.v:113$48_Y [14] $ternary$rtl.v:113$48_Y [14] $ternary$rtl.v:113$48_Y [14] }
  Optimizing cells in module \top.
Performed a total of 6 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.
<suppressed ~12 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.20.16. Rerunning OPT passes. (Maybe there is more to do..)

2.20.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.20.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module10.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.20.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.20.23. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$constmap:ca4ecbd8edf34deb696810b774a895f5b7e0df1b$paramod$46501558c81e6fa6f8178196ae41c073abcea0e6\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:021f4d0da73219e82573729e3b87d76fd634db00$paramod$704a36764ef7872b693c957dd753688c5b7c68b3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add { $ternary$rtl.v:134$66_Y [7] 1'0 $ternary$rtl.v:134$66_Y [7] 1'0 $ternary$rtl.v:134$66_Y [7] $ternary$rtl.v:134$66_Y [7] 2'00 $reduce_xnor$rtl.v:135$63_Y } * \wire25 (9x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=14\Y_WIDTH=15 for cells of type $alu.
  add { \wire0 [11:9] 18'000000000000000000 \reg30 [2:0] } * 1'1 (24x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=10 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
No more expansions possible.
<suppressed ~2103 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
<suppressed ~99 debug messages>
Optimizing module top.
<suppressed ~546 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
<suppressed ~138 debug messages>
Removed a total of 46 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$1672 ($_DFF_P_) from module top.
Replaced 1 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 181 unused cells and 508 unused wires.
<suppressed ~183 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reg47 [8:5] = 4'0000 to constant driver in module top.
Promoted 1 init specs to constant drivers.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.22.10. Rerunning OPT passes. (Removed registers in this run.)

2.22.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..

2.22.15. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module10' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 82 wires to a netlist network with 19 inputs and 1 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       20
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:        internal signals:       62
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:        1
Removing temp directory.

2.23.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 968 gates and 1090 wires to a netlist network with 120 inputs and 78 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:      120
ABC RESULTS:              AOI3 cells:       38
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               BUF cells:        8
ABC RESULTS:               MUX cells:       89
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       29
ABC RESULTS:               NOT cells:       71
ABC RESULTS:              OAI3 cells:       33
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      179
ABC RESULTS:             ORNOT cells:       32
ABC RESULTS:              XNOR cells:       49
ABC RESULTS:               XOR cells:      141
ABC RESULTS:        internal signals:      892
ABC RESULTS:           input signals:      120
ABC RESULTS:          output signals:       78
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module10.
Optimizing module top.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module10'.
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module10..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 489 unused wires.
<suppressed ~2 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module10 ===

   Number of wires:                 45
   Number of wire bits:            185
   Number of public wires:          11
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 35
     $_ANDNOT_                       3
     $_AND_                          1
     $_NAND_                         8
     $_NOR_                          1
     $_OAI3_                         1
     $_ORNOT_                        1
     $_OR_                          20

=== top ===

   Number of wires:                791
   Number of wire bits:           1783
   Number of public wires:          42
   Number of public wire bits:     902
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                920
     $_ANDNOT_                     120
     $_AND_                          8
     $_AOI3_                        38
     $_AOI4_                         1
     $_DFF_P_                      112
     $_MUX_                         89
     $_NAND_                        17
     $_NOR_                         29
     $_NOT_                         71
     $_OAI3_                        33
     $_OAI4_                         1
     $_ORNOT_                       32
     $_OR_                         178
     $_XNOR_                        49
     $_XOR_                        141
     module10                        1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module10..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module10'.
Dumping module `\top'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: c5a3cf8630
CPU: user 0.74s system 0.00s, MEM: 27.85 MB total, 21.14 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 21% 27x opt_clean (0 sec), 14% 27x opt_expr (0 sec), ...
