
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module75'.
Generating RTLIL representation for module `\module9'.
Generating RTLIL representation for module `\module55'.
Generating RTLIL representation for module `\module18'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell top.modinst96 (module75).
Warning: Resizing cell port module9.modinst67.y from 6 bits to 61 bits.
Warning: Resizing cell port module9.modinst67.wire57 from 16 bits to 14 bits.
Warning: Resizing cell port module9.modinst49.y from 16 bits to 302 bits.
Warning: Resizing cell port module9.modinst49.wire23 from 13 bits to 11 bits.
Warning: Resizing cell port module9.modinst49.wire20 from 14 bits to 8 bits.
Warning: Resizing cell port module9.modinst49.wire21 from 7 bits to 6 bits.
Warning: Resizing cell port top.modinst96.y from 3 bits to 176 bits.
Warning: Resizing cell port top.modinst96.wire78 from 21 bits to 4 bits.
Warning: Resizing cell port top.modinst96.wire77 from 13 bits to 11 bits.
Warning: Resizing cell port top.modinst74.wire14 from 14 bits to 13 bits.
Warning: Resizing cell port top.modinst74.wire13 from 21 bits to 14 bits.
Warning: Resizing cell port top.modinst74.wire12 from 19 bits to 9 bits.
Warning: Resizing cell port top.modinst74.wire11 from 21 bits to 7 bits.
Warning: Resizing cell port top.modinst74.wire10 from 21 bits to 14 bits.
Warning: Resizing cell port top.modinst74.y from 15 bits to 171 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$rtl.v:285$192 in module module18.
Marked 3 switch rules as full_case in process $proc$rtl.v:74$37 in module module75.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module18.$proc$rtl.v:256$319'.
  Set init value: \reg26 = 15'000000000000000
Found init rule in `\module18.$proc$rtl.v:255$318'.
  Set init value: \reg27 = 13'0000000000000
Found init rule in `\module18.$proc$rtl.v:254$317'.
  Set init value: \reg28 = 13'0000000000000
Found init rule in `\module18.$proc$rtl.v:253$316'.
  Set init value: \reg29 = 11'00000000000
Found init rule in `\module18.$proc$rtl.v:252$315'.
  Set init value: \reg30 = 10'0000000000
Found init rule in `\module18.$proc$rtl.v:251$314'.
  Set init value: \reg31 = 21'000000000000000000000
Found init rule in `\module18.$proc$rtl.v:250$313'.
  Set init value: \reg32 = 5'00000
Found init rule in `\module18.$proc$rtl.v:249$312'.
  Set init value: \reg33 = 15'000000000000000
Found init rule in `\module18.$proc$rtl.v:248$311'.
  Set init value: \reg34 = 13'0000000000000
Found init rule in `\module18.$proc$rtl.v:247$310'.
  Set init value: \reg35 = 20'00000000000000000000
Found init rule in `\module18.$proc$rtl.v:246$309'.
  Set init value: \reg36 = 18'000000000000000000
Found init rule in `\module18.$proc$rtl.v:245$308'.
  Set init value: \reg37 = 19'0000000000000000000
Found init rule in `\module18.$proc$rtl.v:244$307'.
  Set init value: \reg38 = 8'00000000
Found init rule in `\module18.$proc$rtl.v:243$306'.
  Set init value: \reg39 = 7'0000000
Found init rule in `\module18.$proc$rtl.v:242$305'.
  Set init value: \reg40 = 8'00000000
Found init rule in `\module18.$proc$rtl.v:241$304'.
  Set init value: \reg41 = 19'0000000000000000000
Found init rule in `\module9.$proc$rtl.v:149$162'.
  Set init value: \reg17 = 19'0000000000000000000
Found init rule in `\module9.$proc$rtl.v:148$161'.
  Set init value: \reg16 = 14'00000000000000
Found init rule in `\module9.$proc$rtl.v:147$160'.
  Set init value: \reg15 = 13'0000000000000
Found init rule in `\module75.$proc$rtl.v:54$114'.
  Set init value: \reg82 = 16'0000000000000000
Found init rule in `\module75.$proc$rtl.v:53$113'.
  Set init value: \reg83 = 22'0000000000000000000000
Found init rule in `\module75.$proc$rtl.v:52$112'.
  Set init value: \reg84 = 18'000000000000000000
Found init rule in `\module75.$proc$rtl.v:51$111'.
  Set init value: \reg85 = 21'000000000000000000000
Found init rule in `\module75.$proc$rtl.v:50$110'.
  Set init value: \reg86 = 3'000
Found init rule in `\module75.$proc$rtl.v:49$109'.
  Set init value: \reg87 = 11'00000000000
Found init rule in `\module75.$proc$rtl.v:48$108'.
  Set init value: \reg88 = 21'000000000000000000000
Found init rule in `\module75.$proc$rtl.v:47$107'.
  Set init value: \reg89 = 5'00000
Found init rule in `\module75.$proc$rtl.v:46$106'.
  Set init value: \reg90 = 6'000000
Found init rule in `\module75.$proc$rtl.v:45$105'.
  Set init value: \reg91 = 9'000000000
Found init rule in `\top.$proc$rtl.v:12$35'.
  Set init value: \reg7 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:11$34'.
  Set init value: \reg6 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:10$33'.
  Set init value: \reg5 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:9$32'.
  Set init value: \reg4 = 9'000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module18.$proc$rtl.v:256$319'.
     1/1: $1\reg26[14:0]
Creating decoders for process `\module18.$proc$rtl.v:255$318'.
     1/1: $1\reg27[12:0]
Creating decoders for process `\module18.$proc$rtl.v:254$317'.
     1/1: $1\reg28[12:0]
Creating decoders for process `\module18.$proc$rtl.v:253$316'.
     1/1: $1\reg29[10:0]
Creating decoders for process `\module18.$proc$rtl.v:252$315'.
     1/1: $1\reg30[9:0]
Creating decoders for process `\module18.$proc$rtl.v:251$314'.
     1/1: $1\reg31[20:0]
Creating decoders for process `\module18.$proc$rtl.v:250$313'.
     1/1: $1\reg32[4:0]
Creating decoders for process `\module18.$proc$rtl.v:249$312'.
     1/1: $1\reg33[14:0]
Creating decoders for process `\module18.$proc$rtl.v:248$311'.
     1/1: $1\reg34[12:0]
Creating decoders for process `\module18.$proc$rtl.v:247$310'.
     1/1: $1\reg35[19:0]
Creating decoders for process `\module18.$proc$rtl.v:246$309'.
     1/1: $1\reg36[17:0]
Creating decoders for process `\module18.$proc$rtl.v:245$308'.
     1/1: $1\reg37[18:0]
Creating decoders for process `\module18.$proc$rtl.v:244$307'.
     1/1: $1\reg38[7:0]
Creating decoders for process `\module18.$proc$rtl.v:243$306'.
     1/1: $1\reg39[6:0]
Creating decoders for process `\module18.$proc$rtl.v:242$305'.
     1/1: $1\reg40[7:0]
Creating decoders for process `\module18.$proc$rtl.v:241$304'.
     1/1: $1\reg41[18:0]
Creating decoders for process `\module18.$proc$rtl.v:285$192'.
     1/16: $0\reg27[12:0]
     2/16: $0\reg26[14:0]
     3/16: $0\reg28[12:0]
     4/16: $0\reg29[10:0]
     5/16: $0\reg30[9:0]
     6/16: $0\reg31[20:0]
     7/16: $0\reg32[4:0]
     8/16: $0\reg33[14:0]
     9/16: $0\reg34[12:0]
    10/16: $0\reg35[19:0]
    11/16: $0\reg36[17:0]
    12/16: $0\reg37[18:0]
    13/16: $0\reg38[7:0]
    14/16: $0\reg39[6:0]
    15/16: $0\reg40[7:0]
    16/16: $0\reg41[18:0]
Creating decoders for process `\module9.$proc$rtl.v:149$162'.
     1/1: $1\reg17[18:0]
Creating decoders for process `\module9.$proc$rtl.v:148$161'.
     1/1: $1\reg16[13:0]
Creating decoders for process `\module9.$proc$rtl.v:147$160'.
     1/1: $1\reg15[12:0]
Creating decoders for process `\module9.$proc$rtl.v:167$115'.
     1/3: $0\reg17[18:0]
     2/3: $0\reg16[13:0]
     3/3: $0\reg15[12:0]
Creating decoders for process `\module75.$proc$rtl.v:54$114'.
     1/1: $1\reg82[15:0]
Creating decoders for process `\module75.$proc$rtl.v:53$113'.
     1/1: $1\reg83[21:0]
Creating decoders for process `\module75.$proc$rtl.v:52$112'.
     1/1: $1\reg84[17:0]
Creating decoders for process `\module75.$proc$rtl.v:51$111'.
     1/1: $1\reg85[20:0]
Creating decoders for process `\module75.$proc$rtl.v:50$110'.
     1/1: $1\reg86[2:0]
Creating decoders for process `\module75.$proc$rtl.v:49$109'.
     1/1: $1\reg87[10:0]
Creating decoders for process `\module75.$proc$rtl.v:48$108'.
     1/1: $1\reg88[20:0]
Creating decoders for process `\module75.$proc$rtl.v:47$107'.
     1/1: $1\reg89[4:0]
Creating decoders for process `\module75.$proc$rtl.v:46$106'.
     1/1: $1\reg90[5:0]
Creating decoders for process `\module75.$proc$rtl.v:45$105'.
     1/1: $1\reg91[8:0]
Creating decoders for process `\module75.$proc$rtl.v:74$37'.
     1/10: $0\reg82[15:0]
     2/10: $0\reg83[21:0]
     3/10: $0\reg84[17:0]
     4/10: $0\reg85[20:0]
     5/10: $0\reg86[2:0]
     6/10: $0\reg87[10:0]
     7/10: $0\reg88[20:0]
     8/10: $0\reg89[4:0]
     9/10: $0\reg90[5:0]
    10/10: $0\reg91[8:0]
Creating decoders for process `\top.$proc$rtl.v:12$35'.
     1/1: $1\reg7[11:0]
Creating decoders for process `\top.$proc$rtl.v:11$34'.
     1/1: $1\reg6[18:0]
Creating decoders for process `\top.$proc$rtl.v:10$33'.
     1/1: $1\reg5[12:0]
Creating decoders for process `\top.$proc$rtl.v:9$32'.
     1/1: $1\reg4[8:0]
Creating decoders for process `\top.$proc$rtl.v:16$1'.
     1/4: $0\reg7[11:0]
     2/4: $0\reg6[18:0]
     3/4: $0\reg5[12:0]
     4/4: $0\reg4[8:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module18.\reg41' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$427' with positive edge clock.
Creating register for signal `\module18.\reg40' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$428' with positive edge clock.
Creating register for signal `\module18.\reg39' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$429' with positive edge clock.
Creating register for signal `\module18.\reg38' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$430' with positive edge clock.
Creating register for signal `\module18.\reg37' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$431' with positive edge clock.
Creating register for signal `\module18.\reg36' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$432' with positive edge clock.
Creating register for signal `\module18.\reg35' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$433' with positive edge clock.
Creating register for signal `\module18.\reg34' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$434' with positive edge clock.
Creating register for signal `\module18.\reg33' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$435' with positive edge clock.
Creating register for signal `\module18.\reg32' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$436' with positive edge clock.
Creating register for signal `\module18.\reg31' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$437' with positive edge clock.
Creating register for signal `\module18.\reg30' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$438' with positive edge clock.
Creating register for signal `\module18.\reg29' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$439' with positive edge clock.
Creating register for signal `\module18.\reg28' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$440' with positive edge clock.
Creating register for signal `\module18.\reg27' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$441' with positive edge clock.
Creating register for signal `\module18.\reg26' using process `\module18.$proc$rtl.v:285$192'.
  created $dff cell `$procdff$442' with positive edge clock.
Creating register for signal `\module9.\reg15' using process `\module9.$proc$rtl.v:167$115'.
  created $dff cell `$procdff$443' with positive edge clock.
Creating register for signal `\module9.\reg16' using process `\module9.$proc$rtl.v:167$115'.
  created $dff cell `$procdff$444' with positive edge clock.
Creating register for signal `\module9.\reg17' using process `\module9.$proc$rtl.v:167$115'.
  created $dff cell `$procdff$445' with positive edge clock.
Creating register for signal `\module75.\reg91' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$446' with positive edge clock.
Creating register for signal `\module75.\reg90' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$447' with positive edge clock.
Creating register for signal `\module75.\reg89' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$448' with positive edge clock.
Creating register for signal `\module75.\reg88' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$449' with positive edge clock.
Creating register for signal `\module75.\reg87' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$450' with positive edge clock.
Creating register for signal `\module75.\reg86' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$451' with positive edge clock.
Creating register for signal `\module75.\reg85' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$452' with positive edge clock.
Creating register for signal `\module75.\reg84' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$453' with positive edge clock.
Creating register for signal `\module75.\reg83' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$454' with positive edge clock.
Creating register for signal `\module75.\reg82' using process `\module75.$proc$rtl.v:74$37'.
  created $dff cell `$procdff$455' with positive edge clock.
Creating register for signal `\top.\reg4' using process `\top.$proc$rtl.v:16$1'.
  created $dff cell `$procdff$456' with positive edge clock.
Creating register for signal `\top.\reg5' using process `\top.$proc$rtl.v:16$1'.
  created $dff cell `$procdff$457' with positive edge clock.
Creating register for signal `\top.\reg6' using process `\top.$proc$rtl.v:16$1'.
  created $dff cell `$procdff$458' with positive edge clock.
Creating register for signal `\top.\reg7' using process `\top.$proc$rtl.v:16$1'.
  created $dff cell `$procdff$459' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module18.$proc$rtl.v:256$319'.
Removing empty process `module18.$proc$rtl.v:255$318'.
Removing empty process `module18.$proc$rtl.v:254$317'.
Removing empty process `module18.$proc$rtl.v:253$316'.
Removing empty process `module18.$proc$rtl.v:252$315'.
Removing empty process `module18.$proc$rtl.v:251$314'.
Removing empty process `module18.$proc$rtl.v:250$313'.
Removing empty process `module18.$proc$rtl.v:249$312'.
Removing empty process `module18.$proc$rtl.v:248$311'.
Removing empty process `module18.$proc$rtl.v:247$310'.
Removing empty process `module18.$proc$rtl.v:246$309'.
Removing empty process `module18.$proc$rtl.v:245$308'.
Removing empty process `module18.$proc$rtl.v:244$307'.
Removing empty process `module18.$proc$rtl.v:243$306'.
Removing empty process `module18.$proc$rtl.v:242$305'.
Removing empty process `module18.$proc$rtl.v:241$304'.
Found and cleaned up 5 empty switches in `\module18.$proc$rtl.v:285$192'.
Removing empty process `module18.$proc$rtl.v:285$192'.
Removing empty process `module9.$proc$rtl.v:149$162'.
Removing empty process `module9.$proc$rtl.v:148$161'.
Removing empty process `module9.$proc$rtl.v:147$160'.
Removing empty process `module9.$proc$rtl.v:167$115'.
Removing empty process `module75.$proc$rtl.v:54$114'.
Removing empty process `module75.$proc$rtl.v:53$113'.
Removing empty process `module75.$proc$rtl.v:52$112'.
Removing empty process `module75.$proc$rtl.v:51$111'.
Removing empty process `module75.$proc$rtl.v:50$110'.
Removing empty process `module75.$proc$rtl.v:49$109'.
Removing empty process `module75.$proc$rtl.v:48$108'.
Removing empty process `module75.$proc$rtl.v:47$107'.
Removing empty process `module75.$proc$rtl.v:46$106'.
Removing empty process `module75.$proc$rtl.v:45$105'.
Found and cleaned up 3 empty switches in `\module75.$proc$rtl.v:74$37'.
Removing empty process `module75.$proc$rtl.v:74$37'.
Removing empty process `top.$proc$rtl.v:12$35'.
Removing empty process `top.$proc$rtl.v:11$34'.
Removing empty process `top.$proc$rtl.v:10$33'.
Removing empty process `top.$proc$rtl.v:9$32'.
Removing empty process `top.$proc$rtl.v:16$1'.
Cleaned up 8 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~34 debug messages>
Optimizing module module55.
<suppressed ~5 debug messages>
Optimizing module module9.
Optimizing module module75.
<suppressed ~12 debug messages>
Optimizing module top.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \top..
Removed 38 unused cells and 225 unused wires.
<suppressed ~81 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module18..
checking module module55..
checking module module75..
checking module module9..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 4 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module18..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module55..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module75..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module18.
    New input vector for $reduce_and cell $reduce_and$rtl.v:312$230: { \wire19 [11] \wire19 [12] \wire19 [13] \wire19 [14] \wire19 [15] \wire19 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:293$201: { \wire23 [0] \wire23 [1] \wire23 [2] \wire23 [3] \wire23 [4] \wire23 [5] \wire23 [6] \wire23 [7] \wire23 [8] \wire23 [9] \wire23 [10] }
  Optimizing cells in module \module18.
  Optimizing cells in module \module55.
    New input vector for $reduce_or cell $reduce_or$rtl.v:216$173: { \wire59 [0] \wire59 [1] \wire59 [2] \wire59 [3] \wire59 [4] \wire59 [5] \wire59 [6] \wire59 [7] \wire59 [8] \wire59 [9] \wire59 [10] }
  Optimizing cells in module \module55.
  Optimizing cells in module \module75.
    New input vector for $reduce_or cell $reduce_or$rtl.v:84$56: { \wire81 [0] \wire81 [1] \wire81 [2] \wire81 [3] \wire81 [4] \wire81 [5] \wire81 [6] \wire81 [7] \wire81 [8] \wire81 [9] \wire81 [10] \wire81 [11] \wire81 [12] \wire81 [13] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:106$92: { $xnor$rtl.v:106$91_Y [0] $xnor$rtl.v:106$91_Y [1] $xnor$rtl.v:106$91_Y [2] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:99$76: { \reg84 [0] \reg84 [1] \reg84 [2] \reg84 [3] \reg84 [4] \reg84 [5] \reg84 [6] \reg84 [7] \reg84 [8] \reg84 [9] \reg84 [10] \reg84 [11] \reg84 [12] \reg84 [13] \reg84 [14] \reg84 [15] \reg84 [16] \reg84 [17] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:76$38: { \wire78 [0] \wire78 [1] \wire78 [2] \wire78 [3] }
  Optimizing cells in module \module75.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 7 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module18..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module55..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module75..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module18.
  Optimizing cells in module \module55.
  Optimizing cells in module \module75.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 7 bits (of 15) from mux cell module18.$ternary$rtl.v:293$205 ($mux).
Removed top 6 bits (of 15) from port A of cell module18.$xnor$rtl.v:293$206 ($xnor).
Removed top 7 bits (of 15) from port B of cell module18.$xnor$rtl.v:293$206 ($xnor).
Removed top 2 bits (of 15) from port Y of cell module18.$xnor$rtl.v:293$206 ($xnor).
Removed top 12 bits (of 13) from port A of cell module18.$mul$rtl.v:304$215 ($mul).
Removed top 3 bits (of 11) from port A of cell module18.$sub$rtl.v:306$217 ($sub).
Removed top 16 bits (of 24) from mux cell module18.$ternary$rtl.v:308$224 ($mux).
Removed top 10 bits (of 18) from mux cell module18.$ternary$rtl.v:345$263 ($mux).
Removed top 10 bits (of 18) from port A of cell module18.$eq$rtl.v:345$264 ($eq).
Removed top 7 bits (of 18) from port B of cell module18.$eq$rtl.v:345$264 ($eq).
Removed top 10 bits (of 18) from port A of cell module18.$ne$rtl.v:351$272 ($ne).
Removed top 9 bits (of 18) from port B of cell module18.$ne$rtl.v:351$272 ($ne).
Removed top 20 bits (of 22) from mux cell module18.$ternary$rtl.v:350$278 ($mux).
Removed top 10 bits (of 38) from mux cell module18.$ternary$rtl.v:361$280 ($mux).
Removed top 3 bits (of 13) from mux cell module18.$ternary$rtl.v:362$282 ($mux).
Removed top 10 bits (of 19) from port A of cell module18.$sshr$rtl.v:370$296 ($sshr).
Removed top 6 bits (of 17) from port A of cell module18.$ge$rtl.v:371$299 ($ge).
Removed top 12 bits (of 13) from mux cell module18.$procmux$353 ($mux).
Removed top 7 bits (of 8) from mux cell module18.$procmux$374 ($mux).
Removed top 11 bits (of 13) from FF cell module18.$procdff$440 ($dff).
Removed top 7 bits (of 15) from FF cell module18.$procdff$442 ($dff).
Removed top 11 bits (of 13) from port B of cell module18.$sub$rtl.v:306$217 ($sub).
Removed top 6 bits (of 15) from port A of cell module18.$shl$rtl.v:329$246 ($shl).
Removed top 7 bits (of 10) from mux cell module18.$ternary$rtl.v:362$282 ($mux).
Removed top 12 bits (of 13) from wire module18.$ge$rtl.v:304$213_Y.
Removed top 14 bits (of 15) from wire module18.$logic_not$rtl.v:293$202_Y.
Removed top 20 bits (of 21) from wire module18.$logic_not$rtl.v:312$231_Y.
Removed top 12 bits (of 13) from wire module18.$procmux$353_Y.
Removed top 7 bits (of 8) from wire module18.$procmux$374_Y.
Removed top 10 bits (of 11) from wire module18.$reduce_xnor$rtl.v:324$238_Y.
Removed top 7 bits (of 8) from wire module18.$reduce_xnor$rtl.v:334$248_Y.
Removed top 7 bits (of 8) from wire module18.$reduce_xnor$rtl.v:346$268_Y.
Removed top 9 bits (of 10) from wire module18.$reduce_xor$rtl.v:308$225_Y.
Removed top 7 bits (of 15) from wire module18.$ternary$rtl.v:293$205_Y.
Removed top 16 bits (of 24) from wire module18.$ternary$rtl.v:308$224_Y.
Removed top 10 bits (of 18) from wire module18.$ternary$rtl.v:345$263_Y.
Removed top 20 bits (of 22) from wire module18.$ternary$rtl.v:350$278_Y.
Removed top 10 bits (of 38) from wire module18.$ternary$rtl.v:361$280_Y.
Removed top 12 bits (of 13) from wire module18.$ternary$rtl.v:362$282_Y.
Removed top 1 bits (of 20) from wire module18.wire42.
Removed top 17 bits (of 18) from port B of cell module55.$xor$rtl.v:216$175 ($xor).
Removed top 8 bits (of 18) from port Y of cell module55.$xor$rtl.v:216$175 ($xor).
Removed top 8 bits (of 18) from port A of cell module55.$xor$rtl.v:216$175 ($xor).
Removed top 7 bits (of 10) from port B of cell module55.$eq$rtl.v:215$171 ($eq).
Removed top 17 bits (of 18) from port A of cell module55.$xnor$rtl.v:216$172 ($xnor).
Removed top 8 bits (of 18) from port Y of cell module55.$xnor$rtl.v:216$172 ($xnor).
Removed top 17 bits (of 18) from wire module55.$logic_not$rtl.v:216$174_Y.
Removed top 8 bits (of 18) from wire module55.$xnor$rtl.v:216$172_Y.
Removed top 8 bits (of 18) from wire module55.$xor$rtl.v:216$175_Y.
Removed top 12 bits (of 20) from wire module55.wire61.
Removed top 17 bits (of 18) from wire module55.wire62.
Removed top 1 bits (of 11) from wire module55.wire63.
Removed top 2 bits (of 3) from port A of cell module75.$gt$rtl.v:73$36 ($gt).
Removed top 1 bits (of 12) from port B of cell module75.$xor$rtl.v:78$43 ($xor).
Removed top 3 bits (of 12) from mux cell module75.$ternary$rtl.v:81$49 ($mux).
Removed top 7 bits (of 19) from mux cell module75.$ternary$rtl.v:84$55 ($mux).
Removed top 18 bits (of 19) from port A of cell module75.$xnor$rtl.v:84$57 ($xnor).
Removed top 3 bits (of 19) from mux cell module75.$ternary$rtl.v:84$59 ($mux).
Removed top 4 bits (of 22) from mux cell module75.$ternary$rtl.v:88$66 ($mux).
Removed top 13 bits (of 14) from port A of cell module75.$gt$rtl.v:93$73 ($gt).
Removed top 13 bits (of 14) from port B of cell module75.$gt$rtl.v:93$73 ($gt).
Removed top 15 bits (of 16) from port B of cell module75.$xor$rtl.v:99$77 ($xor).
Removed top 5 bits (of 16) from port Y of cell module75.$xor$rtl.v:99$77 ($xor).
Removed top 5 bits (of 16) from port A of cell module75.$mul$rtl.v:99$81 ($mul).
Removed top 6 bits (of 22) from port A of cell module75.$le$rtl.v:104$88 ($le).
Removed top 2 bits (of 3) from port A of cell module75.$xnor$rtl.v:106$91 ($xnor).
Removed top 2 bits (of 5) from mux cell module75.$ternary$rtl.v:112$96 ($mux).
Removed top 8 bits (of 15) from port B of cell module75.$eq$rtl.v:124$104 ($eq).
Removed top 15 bits (of 21) from FF cell module75.$procdff$452 ($dff).
Removed top 3 bits (of 19) from port Y of cell module75.$xnor$rtl.v:84$57 ($xnor).
Removed top 3 bits (of 4) from wire module75.$gt$rtl.v:93$73_Y.
Removed top 21 bits (of 22) from wire module75.$lt$rtl.v:86$62_Y.
Removed top 15 bits (of 16) from wire module75.$reduce_and$rtl.v:99$76_Y.
Removed top 4 bits (of 5) from wire module75.$reduce_or$rtl.v:106$92_Y.
Removed top 18 bits (of 19) from wire module75.$reduce_or$rtl.v:84$56_Y.
Removed top 13 bits (of 14) from wire module75.$reduce_xnor$rtl.v:93$72_Y.
Removed top 2 bits (of 3) from wire module75.$reduce_xor$rtl.v:106$90_Y.
Removed top 2 bits (of 5) from wire module75.$ternary$rtl.v:112$96_Y.
Removed top 3 bits (of 12) from wire module75.$ternary$rtl.v:81$49_Y.
Removed top 7 bits (of 19) from wire module75.$ternary$rtl.v:84$55_Y.
Removed top 4 bits (of 22) from wire module75.$ternary$rtl.v:88$66_Y.
Removed top 5 bits (of 16) from wire module75.$ternary$rtl.v:99$80_Y.
Removed top 13 bits (of 14) from wire module75.wire81.
Removed top 17 bits (of 18) from wire module75.wire92.
Removed top 2 bits (of 5) from wire module75.wire93.
Removed top 12 bits (of 13) from port A of cell module9.$ne$rtl.v:173$126 ($ne).
Removed top 13 bits (of 20) from mux cell module9.$ternary$rtl.v:182$138 ($mux).
Removed top 3 bits (of 14) from port Y of cell module9.$sshr$rtl.v:185$147 ($sshr).
Removed top 13 bits (of 14) from port A of cell module9.$neg$rtl.v:185$143 ($neg).
Removed top 1 bits (of 2) from port A of cell module9.$or$rtl.v:185$146 ($or).
Removed top 2 bits (of 16) from port Y of cell module9.$or$rtl.v:188$149 ($or).
Removed top 2 bits (of 16) from port B of cell module9.$or$rtl.v:188$149 ($or).
Removed top 6 bits (of 13) from FF cell module9.$procdff$443 ($dff).
Removed top 13 bits (of 14) from FF cell module9.$procdff$444 ($dff).
Removed top 18 bits (of 19) from FF cell module9.$procdff$445 ($dff).
Removed top 4 bits (of 13) from mux cell module9.$ternary$rtl.v:184$141 ($mux).
Removed top 13 bits (of 14) from port B of cell module9.$sshr$rtl.v:185$144 ($sshr).
Removed top 13 bits (of 14) from wire module9.$0\reg16[13:0].
Removed top 4 bits (of 13) from wire module9.$ternary$rtl.v:184$141_Y.
Removed top 1 bits (of 17) from wire module9.wire50.
Removed top 14 bits (of 20) from wire module9.wire52.
Removed top 7 bits (of 21) from port A of cell top.$add$rtl.v:23$17 ($add).
Removed top 14 bits (of 21) from port A of cell top.$and$rtl.v:23$18 ($and).
Removed top 14 bits (of 21) from port Y of cell top.$and$rtl.v:23$18 ($and).
Removed top 2 bits (of 21) from mux cell top.$ternary$rtl.v:23$19 ($mux).
Removed top 11 bits (of 12) from port A of cell top.$shl$rtl.v:26$26 ($shl).
Removed top 8 bits (of 9) from port A of cell top.$sub$rtl.v:27$28 ($sub).
Removed top 1 bits (of 9) from FF cell top.$procdff$456 ($dff).
Removed top 1 bits (of 9) from port A of cell top.$le$rtl.v:23$13 ($le).
Removed top 2 bits (of 21) from port Y of cell top.$add$rtl.v:23$17 ($add).
Removed top 2 bits (of 21) from port B of cell top.$add$rtl.v:23$17 ($add).
Removed top 1 bits (of 9) from port B of cell top.$sub$rtl.v:27$28 ($sub).
Removed top 1 bits (of 9) from port A of cell top.$xor$rtl.v:27$29 ($xor).
Removed top 2 bits (of 21) from mux cell top.$ternary$rtl.v:23$16 ($mux).
Removed top 2 bits (of 21) from port Y of cell top.$sshl$rtl.v:23$14 ($sshl).
Removed top 2 bits (of 21) from wire top.$add$rtl.v:23$17_Y.
Removed top 14 bits (of 21) from wire top.$and$rtl.v:23$18_Y.
Removed top 8 bits (of 9) from wire top.$logic_not$rtl.v:27$27_Y.
Removed top 11 bits (of 12) from wire top.$logic_or$rtl.v:26$25_Y.
Removed top 2 bits (of 21) from wire top.$sshl$rtl.v:23$14_Y.
Removed top 2 bits (of 21) from wire top.$ternary$rtl.v:23$16_Y.
Removed top 5 bits (of 21) from wire top.wire8.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 53 unused wires.
<suppressed ~5 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~340 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module18:
  creating $macc model for $mul$rtl.v:304$215 ($mul).
  creating $macc model for $mul$rtl.v:306$218 ($mul).
  creating $macc model for $neg$rtl.v:335$257 ($neg).
  creating $macc model for $sub$rtl.v:304$214 ($sub).
  creating $macc model for $sub$rtl.v:306$217 ($sub).
  creating $alu model for $macc $sub$rtl.v:306$217.
  creating $alu model for $macc $sub$rtl.v:304$214.
  creating $alu model for $macc $neg$rtl.v:335$257.
  creating $macc cell for $mul$rtl.v:306$218: $auto$alumacc.cc:354:replace_macc$508
  creating $macc cell for $mul$rtl.v:304$215: $auto$alumacc.cc:354:replace_macc$509
  creating $alu model for $ge$rtl.v:304$213 ($ge): new $alu
  creating $alu model for $ge$rtl.v:371$299 ($ge): new $alu
  creating $alu model for $lt$rtl.v:334$247 ($lt): new $alu
  creating $alu model for $lt$rtl.v:349$273 ($lt): new $alu
  creating $alu model for $lt$rtl.v:371$302 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:371$302: $auto$alumacc.cc:474:replace_alu$515
  creating $alu cell for $lt$rtl.v:349$273: $auto$alumacc.cc:474:replace_alu$526
  creating $alu cell for $lt$rtl.v:334$247: $auto$alumacc.cc:474:replace_alu$537
  creating $alu cell for $ge$rtl.v:371$299: $auto$alumacc.cc:474:replace_alu$542
  creating $alu cell for $ge$rtl.v:304$213: $auto$alumacc.cc:474:replace_alu$555
  creating $alu cell for $neg$rtl.v:335$257: $auto$alumacc.cc:474:replace_alu$564
  creating $alu cell for $sub$rtl.v:304$214: $auto$alumacc.cc:474:replace_alu$567
  creating $alu cell for $sub$rtl.v:306$217: $auto$alumacc.cc:474:replace_alu$570
  created 8 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module55:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module75:
  creating $macc model for $mul$rtl.v:99$81 ($mul).
  creating $macc model for $neg$rtl.v:92$70 ($neg).
  creating $alu model for $macc $neg$rtl.v:92$70.
  creating $macc cell for $mul$rtl.v:99$81: $auto$alumacc.cc:354:replace_macc$573
  creating $alu model for $gt$rtl.v:73$36 ($gt): new $alu
  creating $alu model for $gt$rtl.v:93$73 ($gt): new $alu
  creating $alu model for $le$rtl.v:104$88 ($le): new $alu
  creating $alu model for $le$rtl.v:122$103 ($le): new $alu
  creating $alu model for $lt$rtl.v:86$62 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:86$62: $auto$alumacc.cc:474:replace_alu$579
  creating $alu cell for $le$rtl.v:122$103: $auto$alumacc.cc:474:replace_alu$584
  creating $alu cell for $le$rtl.v:104$88: $auto$alumacc.cc:474:replace_alu$593
  creating $alu cell for $gt$rtl.v:93$73: $auto$alumacc.cc:474:replace_alu$602
  creating $alu cell for $gt$rtl.v:73$36: $auto$alumacc.cc:474:replace_alu$607
  creating $alu cell for $neg$rtl.v:92$70: $auto$alumacc.cc:474:replace_alu$618
  created 6 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module9:
  creating $macc model for $add$rtl.v:181$134 ($add).
  creating $macc model for $mul$rtl.v:175$127 ($mul).
  creating $macc model for $mul$rtl.v:183$139 ($mul).
  creating $macc model for $neg$rtl.v:179$133 ($neg).
  creating $macc model for $neg$rtl.v:182$135 ($neg).
  creating $macc model for $neg$rtl.v:185$143 ($neg).
  creating $macc model for $neg$rtl.v:189$150 ($neg).
  creating $alu model for $macc $neg$rtl.v:189$150.
  creating $alu model for $macc $neg$rtl.v:185$143.
  creating $alu model for $macc $neg$rtl.v:182$135.
  creating $alu model for $macc $neg$rtl.v:179$133.
  creating $alu model for $macc $add$rtl.v:181$134.
  creating $macc cell for $mul$rtl.v:175$127: $auto$alumacc.cc:354:replace_macc$621
  creating $macc cell for $mul$rtl.v:183$139: $auto$alumacc.cc:354:replace_macc$622
  creating $alu model for $lt$rtl.v:184$142 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:184$142: $auto$alumacc.cc:474:replace_alu$624
  creating $alu cell for $add$rtl.v:181$134: $auto$alumacc.cc:474:replace_alu$635
  creating $alu cell for $neg$rtl.v:179$133: $auto$alumacc.cc:474:replace_alu$638
  creating $alu cell for $neg$rtl.v:182$135: $auto$alumacc.cc:474:replace_alu$641
  creating $alu cell for $neg$rtl.v:185$143: $auto$alumacc.cc:474:replace_alu$644
  creating $alu cell for $neg$rtl.v:189$150: $auto$alumacc.cc:474:replace_alu$647
  created 6 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:23$17 ($add).
  creating $macc model for $add$rtl.v:26$23 ($add).
  creating $macc model for $sub$rtl.v:26$24 ($sub).
  creating $macc model for $sub$rtl.v:27$28 ($sub).
  creating $alu model for $macc $sub$rtl.v:27$28.
  creating $alu model for $macc $sub$rtl.v:26$24.
  creating $alu model for $macc $add$rtl.v:26$23.
  creating $alu model for $macc $add$rtl.v:23$17.
  creating $alu model for $ge$rtl.v:20$2 ($ge): new $alu
  creating $alu model for $le$rtl.v:23$13 ($le): new $alu
  creating $alu cell for $le$rtl.v:23$13: $auto$alumacc.cc:474:replace_alu$652
  creating $alu cell for $ge$rtl.v:20$2: $auto$alumacc.cc:474:replace_alu$661
  creating $alu cell for $add$rtl.v:23$17: $auto$alumacc.cc:474:replace_alu$674
  creating $alu cell for $add$rtl.v:26$23: $auto$alumacc.cc:474:replace_alu$677
  creating $alu cell for $sub$rtl.v:26$24: $auto$alumacc.cc:474:replace_alu$680
  creating $alu cell for $sub$rtl.v:27$28: $auto$alumacc.cc:474:replace_alu$683
  created 6 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module module18 that may be considered for resource sharing.
  Analyzing resource sharing options for $shr$rtl.v:335$256 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$332_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:329$246 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$354_CMP $procmux$332_CMP }.
    No candidates found.
Found 2 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshl$rtl.v:23$14 ($sshl):
    Found 1 activation_patterns using ctrl signal { $reduce_bool$rtl.v:23$15_Y $logic_or$rtl.v:21$10_Y }.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:26$26 ($shl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:27$30_Y.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~4 debug messages>
Optimizing module module55.
Optimizing module module75.
<suppressed ~1 debug messages>
Optimizing module module9.
<suppressed ~1 debug messages>
Optimizing module top.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module18..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module55..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module75..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module18.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$562: { $auto$rtlil.cc:1832:Not$559 $auto$rtlil.cc:1835:ReduceAnd$561 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$560: { $auto$alumacc.cc:490:replace_alu$556 [0] $auto$alumacc.cc:490:replace_alu$556 [1] $auto$alumacc.cc:490:replace_alu$556 [2] $auto$alumacc.cc:490:replace_alu$556 [3] $auto$alumacc.cc:490:replace_alu$556 [4] $auto$alumacc.cc:490:replace_alu$556 [5] $auto$alumacc.cc:490:replace_alu$556 [6] $auto$alumacc.cc:490:replace_alu$556 [7] $auto$alumacc.cc:490:replace_alu$556 [8] $auto$alumacc.cc:490:replace_alu$556 [9] $auto$alumacc.cc:490:replace_alu$556 [10] $auto$alumacc.cc:490:replace_alu$556 [11] $auto$alumacc.cc:490:replace_alu$556 [12] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$529: { $auto$alumacc.cc:490:replace_alu$527 [0] $auto$alumacc.cc:490:replace_alu$527 [1] $auto$alumacc.cc:490:replace_alu$527 [2] $auto$alumacc.cc:490:replace_alu$527 [3] $auto$alumacc.cc:490:replace_alu$527 [4] $auto$alumacc.cc:490:replace_alu$527 [5] $auto$alumacc.cc:490:replace_alu$527 [6] $auto$alumacc.cc:490:replace_alu$527 [7] $auto$alumacc.cc:490:replace_alu$527 [8] $auto$alumacc.cc:490:replace_alu$527 [9] $auto$alumacc.cc:490:replace_alu$527 [10] $auto$alumacc.cc:490:replace_alu$527 [11] $auto$alumacc.cc:490:replace_alu$527 [12] $auto$alumacc.cc:490:replace_alu$527 [13] $auto$alumacc.cc:490:replace_alu$527 [14] $auto$alumacc.cc:490:replace_alu$527 [15] $auto$alumacc.cc:490:replace_alu$527 [16] $auto$alumacc.cc:490:replace_alu$527 [17] $auto$alumacc.cc:490:replace_alu$527 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$545: { $auto$alumacc.cc:490:replace_alu$543 [0] $auto$alumacc.cc:490:replace_alu$543 [1] $auto$alumacc.cc:490:replace_alu$543 [2] $auto$alumacc.cc:490:replace_alu$543 [3] $auto$alumacc.cc:490:replace_alu$543 [4] $auto$alumacc.cc:490:replace_alu$543 [5] $auto$alumacc.cc:490:replace_alu$543 [6] $auto$alumacc.cc:490:replace_alu$543 [7] $auto$alumacc.cc:490:replace_alu$543 [8] $auto$alumacc.cc:490:replace_alu$543 [9] $auto$alumacc.cc:490:replace_alu$543 [10] $auto$alumacc.cc:490:replace_alu$543 [11] $auto$alumacc.cc:490:replace_alu$543 [12] $auto$alumacc.cc:490:replace_alu$543 [13] $auto$alumacc.cc:490:replace_alu$543 [14] $auto$alumacc.cc:490:replace_alu$543 [15] $auto$alumacc.cc:490:replace_alu$543 [16] }
  Optimizing cells in module \module18.
  Optimizing cells in module \module55.
  Optimizing cells in module \module75.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$589: { $auto$alumacc.cc:490:replace_alu$585 [0] $auto$alumacc.cc:490:replace_alu$585 [1] $auto$alumacc.cc:490:replace_alu$585 [2] $auto$alumacc.cc:490:replace_alu$585 [3] $auto$alumacc.cc:490:replace_alu$585 [4] $auto$alumacc.cc:490:replace_alu$585 [5] $auto$alumacc.cc:490:replace_alu$585 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$598: { $auto$alumacc.cc:490:replace_alu$594 [0] $auto$alumacc.cc:490:replace_alu$594 [1] $auto$alumacc.cc:490:replace_alu$594 [2] $auto$alumacc.cc:490:replace_alu$594 [3] $auto$alumacc.cc:490:replace_alu$594 [4] $auto$alumacc.cc:490:replace_alu$594 [5] $auto$alumacc.cc:490:replace_alu$594 [6] $auto$alumacc.cc:490:replace_alu$594 [7] $auto$alumacc.cc:490:replace_alu$594 [8] $auto$alumacc.cc:490:replace_alu$594 [9] $auto$alumacc.cc:490:replace_alu$594 [10] $auto$alumacc.cc:490:replace_alu$594 [11] $auto$alumacc.cc:490:replace_alu$594 [12] $auto$alumacc.cc:490:replace_alu$594 [13] $auto$alumacc.cc:490:replace_alu$594 [14] $auto$alumacc.cc:490:replace_alu$594 [15] $auto$alumacc.cc:490:replace_alu$594 [16] $auto$alumacc.cc:490:replace_alu$594 [17] $auto$alumacc.cc:490:replace_alu$594 [18] $auto$alumacc.cc:490:replace_alu$594 [19] $auto$alumacc.cc:490:replace_alu$594 [20] $auto$alumacc.cc:490:replace_alu$594 [21] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$610: { $auto$alumacc.cc:490:replace_alu$608 [0] $auto$alumacc.cc:490:replace_alu$608 [1] $auto$alumacc.cc:490:replace_alu$608 [2] }
  Optimizing cells in module \module75.
  Optimizing cells in module \module9.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$627: { $auto$alumacc.cc:490:replace_alu$625 [0] $auto$alumacc.cc:490:replace_alu$625 [1] $auto$alumacc.cc:490:replace_alu$625 [2] $auto$alumacc.cc:490:replace_alu$625 [3] $auto$alumacc.cc:490:replace_alu$625 [4] $auto$alumacc.cc:490:replace_alu$625 [5] $auto$alumacc.cc:490:replace_alu$625 [6] $auto$alumacc.cc:490:replace_alu$625 [7] $auto$alumacc.cc:490:replace_alu$625 [8] $auto$alumacc.cc:490:replace_alu$625 [9] $auto$alumacc.cc:490:replace_alu$625 [10] $auto$alumacc.cc:490:replace_alu$625 [11] $auto$alumacc.cc:490:replace_alu$625 [12] }
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$657: { $auto$alumacc.cc:490:replace_alu$653 [0] $auto$alumacc.cc:490:replace_alu$653 [1] $auto$alumacc.cc:490:replace_alu$653 [2] $auto$alumacc.cc:490:replace_alu$653 [3] $auto$alumacc.cc:490:replace_alu$653 [4] $auto$alumacc.cc:490:replace_alu$653 [5] $auto$alumacc.cc:490:replace_alu$653 [6] $auto$alumacc.cc:490:replace_alu$653 [7] $auto$alumacc.cc:490:replace_alu$653 [8] $auto$alumacc.cc:490:replace_alu$653 [9] $auto$alumacc.cc:490:replace_alu$653 [10] $auto$alumacc.cc:490:replace_alu$653 [11] $auto$alumacc.cc:490:replace_alu$653 [12] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$664: { $auto$alumacc.cc:490:replace_alu$662 [0] $auto$alumacc.cc:490:replace_alu$662 [1] $auto$alumacc.cc:490:replace_alu$662 [2] $auto$alumacc.cc:490:replace_alu$662 [3] $auto$alumacc.cc:490:replace_alu$662 [4] $auto$alumacc.cc:490:replace_alu$662 [5] $auto$alumacc.cc:490:replace_alu$662 [6] $auto$alumacc.cc:490:replace_alu$662 [7] $auto$alumacc.cc:490:replace_alu$662 [8] $auto$alumacc.cc:490:replace_alu$662 [9] $auto$alumacc.cc:490:replace_alu$662 [10] $auto$alumacc.cc:490:replace_alu$662 [11] $auto$alumacc.cc:490:replace_alu$662 [12] $auto$alumacc.cc:490:replace_alu$662 [13] $auto$alumacc.cc:490:replace_alu$662 [14] $auto$alumacc.cc:490:replace_alu$662 [15] $auto$alumacc.cc:490:replace_alu$662 [16] $auto$alumacc.cc:490:replace_alu$662 [17] $auto$alumacc.cc:490:replace_alu$662 [18] $auto$alumacc.cc:490:replace_alu$662 [19] $auto$alumacc.cc:490:replace_alu$662 [20] }
  Optimizing cells in module \top.
Performed a total of 10 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 20 unused wires.
<suppressed ~7 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module18..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module55..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module75..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module18.
  Optimizing cells in module \module55.
  Optimizing cells in module \module75.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~29 debug messages>
Optimizing module module55.
<suppressed ~21 debug messages>
Optimizing module module75.
<suppressed ~41 debug messages>
Optimizing module module9.
<suppressed ~6 debug messages>
Optimizing module top.
<suppressed ~17 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 25 unused wires.
<suppressed ~8 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module18..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module55..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module75..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module18.
    Consolidated identical input bits for $mux cell $procmux$331:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$474 [2:0] }, B={ 9'000000000 $auto$wreduce.cc:455:run$468 [0] }, Y=$0\reg30[9:0]
      New ports: A=$auto$wreduce.cc:455:run$474 [2:0], B={ 2'00 $auto$wreduce.cc:455:run$468 [0] }, Y=$0\reg30[9:0] [2:0]
      New connections: $0\reg30[9:0] [9:3] = 7'0000000
    Consolidated identical input bits for $mux cell $procmux$335:
      Old ports: A={ \reg27 [12] \reg27 [12] \reg27 [12] \reg27 [12] \reg27 [12] \reg27 [12] \reg27 [12] \reg27 [12] \reg27 }, B={ 20'00000000000000000000 $auto$wreduce.cc:455:run$462 [0] }, Y=$procmux$335_Y
      New ports: A=\reg27, B={ 12'000000000000 $auto$wreduce.cc:455:run$462 [0] }, Y=$procmux$335_Y [12:0]
      New connections: $procmux$335_Y [20:13] = { $procmux$335_Y [12] $procmux$335_Y [12] $procmux$335_Y [12] $procmux$335_Y [12] $procmux$335_Y [12] $procmux$335_Y [12] $procmux$335_Y [12] $procmux$335_Y [12] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:334$250:
      Old ports: A=8'10100111, B={ 7'0000000 $auto$alumacc.cc:491:replace_alu$539 [10] }, Y=$ternary$rtl.v:334$250_Y
      New ports: A=2'11, B={ 1'0 $auto$alumacc.cc:491:replace_alu$539 [10] }, Y=$ternary$rtl.v:334$250_Y [1:0]
      New connections: $ternary$rtl.v:334$250_Y [7:2] = { $ternary$rtl.v:334$250_Y [1] 1'0 $ternary$rtl.v:334$250_Y [1] 2'00 $ternary$rtl.v:334$250_Y [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:345$263:
      Old ports: A=8'10111110, B={ 3'000 \reg32 }, Y=$auto$wreduce.cc:455:run$471 [7:0]
      New ports: A=6'111110, B={ 1'0 \reg32 }, Y=$auto$wreduce.cc:455:run$471 [5:0]
      New connections: $auto$wreduce.cc:455:run$471 [7:6] = { $auto$wreduce.cc:455:run$471 [5] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:361$280:
      Old ports: A={ 8'10111110 \reg35 }, B={ 17'00000000000000000 \wire23 }, Y=$auto$wreduce.cc:455:run$473 [27:0]
      New ports: A={ 1'1 \reg35 }, B={ 10'0000000000 \wire23 }, Y={ $auto$wreduce.cc:455:run$473 [21] $auto$wreduce.cc:455:run$473 [19:0] }
      New connections: { $auto$wreduce.cc:455:run$473 [27:22] $auto$wreduce.cc:455:run$473 [20] } = { $auto$wreduce.cc:455:run$473 [21] 1'0 $auto$wreduce.cc:455:run$473 [21] $auto$wreduce.cc:455:run$473 [21] $auto$wreduce.cc:455:run$473 [21] $auto$wreduce.cc:455:run$473 [21] 1'0 }
  Optimizing cells in module \module18.
    Consolidated identical input bits for $mux cell $procmux$337:
      Old ports: A={ 13'0000000000000 \wire20 }, B=$procmux$335_Y, Y=$0\reg31[20:0]
      New ports: A={ 5'00000 \wire20 }, B=$procmux$335_Y [12:0], Y=$0\reg31[20:0] [12:0]
      New connections: $0\reg31[20:0] [20:13] = { $0\reg31[20:0] [12] $0\reg31[20:0] [12] $0\reg31[20:0] [12] $0\reg31[20:0] [12] $0\reg31[20:0] [12] $0\reg31[20:0] [12] $0\reg31[20:0] [12] $0\reg31[20:0] [12] }
  Optimizing cells in module \module18.
  Optimizing cells in module \module55.
  Optimizing cells in module \module75.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:124$102:
      Old ports: A={ \reg89 [4] \reg89 [4] \reg89 [4] \reg89 [4] \reg89 [4] \reg89 [4] \reg89 [4] \reg89 [4] \reg89 [4] \reg89 }, B={ 13'0000000000000 \wire81 }, Y=$ternary$rtl.v:124$102_Y
      New ports: A=\reg89, B={ 4'0000 \wire81 }, Y=$ternary$rtl.v:124$102_Y [4:0]
      New connections: $ternary$rtl.v:124$102_Y [13:5] = { $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] $ternary$rtl.v:124$102_Y [4] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:80$47:
      Old ports: A={ 4'0000 \wire78 }, B=8'10111000, Y=$ternary$rtl.v:80$47_Y
      New ports: A={ 1'0 \wire78 }, B=5'11000, Y=$ternary$rtl.v:80$47_Y [4:0]
      New connections: $ternary$rtl.v:80$47_Y [7:5] = { $ternary$rtl.v:80$47_Y [4] 1'0 $ternary$rtl.v:80$47_Y [4] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:84$59:
      Old ports: A={ 4'1111 $auto$opt_expr.cc:189:group_cell_inputs$718 $auto$opt_expr.cc:189:group_cell_inputs$716 }, B={ 4'0000 $auto$wreduce.cc:455:run$491 [11:0] }, Y=$ternary$rtl.v:84$59_Y [15:0]
      New ports: A={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$718 $auto$opt_expr.cc:189:group_cell_inputs$716 }, B={ 1'0 $auto$wreduce.cc:455:run$491 [11:0] }, Y=$ternary$rtl.v:84$59_Y [12:0]
      New connections: $ternary$rtl.v:84$59_Y [15:13] = { $ternary$rtl.v:84$59_Y [12] $ternary$rtl.v:84$59_Y [12] $ternary$rtl.v:84$59_Y [12] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:88$66:
      Old ports: A={ 16'0000000000000000 \reg83 [1:0] }, B=\reg83 [17:0], Y=$auto$wreduce.cc:455:run$492 [17:0]
      New ports: A=16'0000000000000000, B=\reg83 [17:2], Y=$auto$wreduce.cc:455:run$492 [17:2]
      New connections: $auto$wreduce.cc:455:run$492 [1:0] = \reg83 [1:0]
  Optimizing cells in module \module75.
    Consolidated identical input bits for $mux cell $procmux$397:
      Old ports: A=$ternary$rtl.v:84$59_Y [15:0], B={ 12'000000000000 $ternary$rtl.v:93$75_Y }, Y=$0\reg82[15:0]
      New ports: A=$ternary$rtl.v:84$59_Y [12:0], B={ 9'000000000 $ternary$rtl.v:93$75_Y }, Y=$0\reg82[15:0] [12:0]
      New connections: $0\reg82[15:0] [15:13] = { $0\reg82[15:0] [12] $0\reg82[15:0] [12] $0\reg82[15:0] [12] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:81$49:
      Old ports: A={ $ternary$rtl.v:80$47_Y $logic_or$rtl.v:81$44_Y }, B={ 4'0000 \wire79 [11:7] }, Y=$auto$wreduce.cc:455:run$490 [8:0]
      New ports: A={ $ternary$rtl.v:80$47_Y [4:0] $logic_or$rtl.v:81$44_Y }, B={ 1'0 \wire79 [11:7] }, Y=$auto$wreduce.cc:455:run$490 [5:0]
      New connections: $auto$wreduce.cc:455:run$490 [8:6] = { $auto$wreduce.cc:455:run$490 [5] 1'0 $auto$wreduce.cc:455:run$490 [5] }
  Optimizing cells in module \module75.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 12 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~1 debug messages>
Optimizing module module55.
Optimizing module module75.
<suppressed ~2 debug messages>
Optimizing module module9.
Optimizing module top.

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module18..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module55..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module75..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module9..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module18.
  Optimizing cells in module \module55.
  Optimizing cells in module \module75.
  Optimizing cells in module \module9.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:1df2dfd19795fb97a0d69862283466b7172cb76f$paramod$d24434e15d88f055155b18c274fffdb112f10620\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $reduce_xnor.
Using template $paramod$constmap:c99bd07cb0f4eadc046504dff44b3a8495b4bd9a$paramod$31cd82f2189d101550705aa53ce91608128afb92\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add { \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] \reg17 [0] } * \wire14 (19x13 bits, unsigned)
  add \wire14 * 8'10101111 (13x8 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod$constmap:f4c3cc251bc5920909450861e4b659301ccc08b7$paramod$61ab59ad081e2ce29883983cf3a5f6737f053f90\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:12c21ddc4d5ab25c853f755a228f290d81b01f8e$paramod$8b6253f99290f1df5429eb73eed0f863df55c51e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=19 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=19\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=13 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using extmapper simplemap for cells of type $xnor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
  add \wire76 * { \reg84 [10:1] $auto$opt_expr.cc:189:group_cell_inputs$722 } (16x11 bits, unsigned)
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod$constmap:0bec8fdb887b71abe4df3ff0fd18e4555d147050$paramod$4bf08fac48941a2513d596cc091bc427cb0a2207\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=2\Y_WIDTH=13 for cells of type $alu.
Using template $paramod$constmap:5ad9590d704761a7ebf5dd56d4b1936ab6aa76d9$paramod$394ca9a9618ddbd8b52a8785c1f44b455df47d45\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
  add $sub$rtl.v:306$217_Y * \reg29 [9:5] (13x5 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
  add $sub$rtl.v:304$214_Y * $auto$rtlil.cc:1836:ReduceOr$563 (13x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod$constmap:94b9974ba8013702cda1dd8393bda8152e2178b2$paramod$ff145ab5cff172af3501d876dc8173492f955637\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:201a1d1f45a39980162751d10abe220720229b0f$paramod$af4bf3e6b133d7a840f48e1aff4f86af64687f18\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
No more expansions possible.
<suppressed ~5725 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~494 debug messages>
Optimizing module module55.
<suppressed ~7 debug messages>
Optimizing module module75.
<suppressed ~611 debug messages>
Optimizing module module9.
<suppressed ~1270 debug messages>
Optimizing module top.
<suppressed ~380 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
<suppressed ~342 debug messages>
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
<suppressed ~135 debug messages>
Finding identical cells in module `\module9'.
<suppressed ~2121 debug messages>
Finding identical cells in module `\top'.
<suppressed ~111 debug messages>
Removed a total of 903 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$10903 ($_DFF_P_) from module module18.
Removing $auto$simplemap.cc:420:simplemap_dff$3557 ($_DFF_P_) from module module9.
Removing $auto$simplemap.cc:420:simplemap_dff$1432 ($_DFF_P_) from module top.
Replaced 3 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 513 unused cells and 1766 unused wires.
<suppressed ~518 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~26 debug messages>
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
<suppressed ~3 debug messages>
Optimizing module top.
<suppressed ~26 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
<suppressed ~18 debug messages>
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
Finding identical cells in module `\module9'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 14 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 21 unused wires.
<suppressed ~3 debug messages>

2.22.10. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module18' to `<abc-temp-dir>/input.blif'..
Extracted 1393 gates and 1614 wires to a netlist network with 219 inputs and 164 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       23
ABC RESULTS:            ANDNOT cells:      250
ABC RESULTS:              AOI3 cells:       58
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:      237
ABC RESULTS:              NAND cells:       44
ABC RESULTS:               NOR cells:       47
ABC RESULTS:               NOT cells:       45
ABC RESULTS:              OAI3 cells:       44
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      201
ABC RESULTS:             ORNOT cells:       41
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:               XOR cells:      171
ABC RESULTS:        internal signals:     1231
ABC RESULTS:           input signals:      219
ABC RESULTS:          output signals:      164
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module55' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 93 wires to a netlist network with 30 inputs and 2 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:              AOI3 cells:        4
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       17
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:       61
ABC RESULTS:           input signals:       30
ABC RESULTS:          output signals:        2
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module75' to `<abc-temp-dir>/input.blif'..
Extracted 1273 gates and 1417 wires to a netlist network with 142 inputs and 100 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      147
ABC RESULTS:            ANDNOT cells:      212
ABC RESULTS:              AOI3 cells:       83
ABC RESULTS:               MUX cells:       91
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       37
ABC RESULTS:               NOT cells:       63
ABC RESULTS:              OAI3 cells:       31
ABC RESULTS:                OR cells:      126
ABC RESULTS:             ORNOT cells:       25
ABC RESULTS:              XNOR cells:       80
ABC RESULTS:               XOR cells:      194
ABC RESULTS:        internal signals:     1175
ABC RESULTS:           input signals:      142
ABC RESULTS:          output signals:      100
Removing temp directory.

2.23.4. Extracting gate netlist of module `\module9' to `<abc-temp-dir>/input.blif'..
Extracted 916 gates and 994 wires to a netlist network with 76 inputs and 31 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       48
ABC RESULTS:            ANDNOT cells:      162
ABC RESULTS:              AOI3 cells:       44
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               MUX cells:       35
ABC RESULTS:              NAND cells:       37
ABC RESULTS:               NOR cells:       25
ABC RESULTS:               NOT cells:       48
ABC RESULTS:              OAI3 cells:       32
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      119
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:       76
ABC RESULTS:               XOR cells:      209
ABC RESULTS:        internal signals:      887
ABC RESULTS:           input signals:       76
ABC RESULTS:          output signals:       31
Removing temp directory.

2.23.5. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 678 gates and 785 wires to a netlist network with 105 inputs and 28 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:            ANDNOT cells:       78
ABC RESULTS:              AOI3 cells:       26
ABC RESULTS:               MUX cells:       46
ABC RESULTS:              NAND cells:       23
ABC RESULTS:               NOR cells:       19
ABC RESULTS:               NOT cells:       24
ABC RESULTS:              OAI3 cells:       28
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:      153
ABC RESULTS:             ORNOT cells:       21
ABC RESULTS:              XNOR cells:       17
ABC RESULTS:               XOR cells:       59
ABC RESULTS:        internal signals:      652
ABC RESULTS:           input signals:      105
ABC RESULTS:          output signals:       28
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module18.
<suppressed ~51 debug messages>
Optimizing module module55.
Optimizing module module75.
Optimizing module module9.
Optimizing module top.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module18'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module55'.
Finding identical cells in module `\module75'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module9'.
<suppressed ~6 debug messages>
Finding identical cells in module `\top'.
<suppressed ~18 debug messages>
Removed a total of 14 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module18..
Finding unused cells or wires in module \module55..
Finding unused cells or wires in module \module75..
Finding unused cells or wires in module \module9..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2014 unused wires.
<suppressed ~6 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module18 ===

   Number of wires:               1075
   Number of wire bits:           1886
   Number of public wires:          30
   Number of public wire bits:     678
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1362
     $_ANDNOT_                     250
     $_AND_                         23
     $_AOI3_                        58
     $_AOI4_                         1
     $_DFF_P_                      166
     $_MUX_                        237
     $_NAND_                        44
     $_NOR_                         45
     $_NOT_                         44
     $_OAI3_                        42
     $_OAI4_                         1
     $_ORNOT_                       41
     $_OR_                         200
     $_XNOR_                        39
     $_XOR_                        171

=== module55 ===

   Number of wires:                 58
   Number of wire bits:            197
   Number of public wires:          10
   Number of public wire bits:     149
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $_ANDNOT_                      13
     $_AOI3_                         4
     $_MUX_                          1
     $_NAND_                         5
     $_NOR_                          3
     $_NOT_                          1
     $_OAI3_                         1
     $_ORNOT_                        1
     $_OR_                          17
     $_XNOR_                         2
     $_XOR_                          2

=== module75 ===

   Number of wires:               1049
   Number of wire bits:           1499
   Number of public wires:          20
   Number of public wire bits:     376
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1229
     $_ANDNOT_                     212
     $_AND_                        147
     $_AOI3_                        83
     $_DFF_P_                      108
     $_MUX_                         91
     $_NAND_                        33
     $_NOR_                         37
     $_NOT_                         63
     $_OAI3_                        30
     $_ORNOT_                       25
     $_OR_                         126
     $_XNOR_                        80
     $_XOR_                        194

=== module9 ===

   Number of wires:                839
   Number of wire bits:           1569
   Number of public wires:          21
   Number of public wire bits:     394
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                849
     $_ANDNOT_                     162
     $_AND_                         48
     $_AOI3_                        44
     $_AOI4_                         1
     $_DFF_P_                        3
     $_MUX_                         35
     $_NAND_                        36
     $_NOR_                         24
     $_NOT_                         48
     $_OAI3_                        32
     $_OAI4_                         1
     $_ORNOT_                        9
     $_OR_                         119
     $_XNOR_                        76
     $_XOR_                        209
     module18                        1
     module55                        1

=== top ===

   Number of wires:                496
   Number of wire bits:            912
   Number of public wires:          12
   Number of public wire bits:     244
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                546
     $_ANDNOT_                      78
     $_AND_                         10
     $_AOI3_                        26
     $_DFF_P_                       39
     $_MUX_                         46
     $_NAND_                        23
     $_NOR_                         19
     $_NOT_                         24
     $_OAI3_                        28
     $_OAI4_                         2
     $_ORNOT_                       21
     $_OR_                         153
     $_XNOR_                        17
     $_XOR_                         59
     module9                         1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module18..
checking module module55..
checking module module75..
checking module module9..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module18'.
Dumping module `\module55'.
Dumping module `\module75'.
Dumping module `\module9'.
Dumping module `\top'.

Warnings: 15 unique messages, 15 total
End of script. Logfile hash: 4075bde382
CPU: user 2.46s system 0.00s, MEM: 45.63 MB total, 39.04 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 28x opt_merge (0 sec), 16% 31x opt_clean (0 sec), ...
