
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module159'.
Generating RTLIL representation for module `\module40'.
Generating RTLIL representation for module `\module113'.
Generating RTLIL representation for module `\module88'.
Generating RTLIL representation for module `\module46'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell module40.modinst107 (module88).
Mapping positional arguments of cell module40.modinst87 (module46).
Warning: Resizing cell port module40.modinst132.y from 8 bits to 130 bits.
Warning: Resizing cell port module40.modinst132.wire116 from 13 bits to 11 bits.
Warning: Resizing cell port module40.modinst107.y from 8 bits to 161 bits.
Warning: Resizing cell port module40.modinst107.wire92 from 17 bits to 16 bits.
Warning: Resizing cell port module40.modinst107.wire90 from 20 bits to 5 bits.
Warning: Resizing cell port module40.modinst87.y from 17 bits to 414 bits.
Warning: Resizing cell port module40.modinst87.wire51 from 22 bits to 3 bits.
Warning: Resizing cell port module40.modinst87.wire50 from 13 bits to 8 bits.
Warning: Resizing cell port module40.modinst87.wire49 from 13 bits to 11 bits.
Warning: Resizing cell port module40.modinst87.wire48 from 21 bits to 17 bits.
Warning: Resizing cell port module40.modinst87.wire47 from 20 bits to 11 bits.
Warning: Resizing cell port top.modinst206.wire92 from 17 bits to 16 bits.
Warning: Resizing cell port top.modinst206.y from 9 bits to 161 bits.
Warning: Resizing cell port top.modinst206.wire91 from 21 bits to 13 bits.
Warning: Resizing cell port top.modinst206.wire90 from 8 bits to 5 bits.
Warning: Resizing cell port top.modinst206.wire89 from 20 bits to 13 bits.
Warning: Resizing cell port top.modinst204.wire116 from 20 bits to 11 bits.
Warning: Resizing cell port top.modinst204.wire117 from 19 bits to 10 bits.
Warning: Resizing cell port top.modinst204.y from 18 bits to 130 bits.
Warning: Resizing cell port top.modinst204.wire115 from 10 bits to 8 bits.
Warning: Resizing cell port top.modinst199.wire49 from 18 bits to 11 bits.
Warning: Resizing cell port top.modinst199.y from 10 bits to 414 bits.
Warning: Resizing cell port top.modinst199.wire51 from 12 bits to 3 bits.
Warning: Resizing cell port top.modinst199.wire50 from 11 bits to 8 bits.
Warning: Resizing cell port top.modinst194.wire160 from 17 bits to 7 bits.
Warning: Resizing cell port top.modinst194.y from 13 bits to 346 bits.
Warning: Resizing cell port top.modinst156.y from 21 bits to 312 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$rtl.v:926$912 in module module46.
Marked 2 switch rules as full_case in process $proc$rtl.v:646$660 in module module40.
Marked 7 switch rules as full_case in process $proc$rtl.v:414$379 in module module159.
Marked 9 switch rules as full_case in process $proc$rtl.v:134$19 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module46.$proc$rtl.v:864$1011'.
  Set init value: \reg53 = 18'000000000000000000
Found init rule in `\module46.$proc$rtl.v:863$1010'.
  Set init value: \reg54 = 16'0000000000000000
Found init rule in `\module46.$proc$rtl.v:862$1009'.
  Set init value: \reg55 = 21'000000000000000000000
Found init rule in `\module46.$proc$rtl.v:861$1008'.
  Set init value: \reg56 = 19'0000000000000000000
Found init rule in `\module46.$proc$rtl.v:851$1007'.
  Set init value: \reg66 = 13'0000000000000
Found init rule in `\module46.$proc$rtl.v:850$1006'.
  Set init value: \reg67 = 15'000000000000000
Found init rule in `\module46.$proc$rtl.v:849$1005'.
  Set init value: \reg68 = 17'00000000000000000
Found init rule in `\module46.$proc$rtl.v:848$1004'.
  Set init value: \reg69 = 13'0000000000000
Found init rule in `\module46.$proc$rtl.v:847$1003'.
  Set init value: \reg70 = 12'000000000000
Found init rule in `\module46.$proc$rtl.v:846$1002'.
  Set init value: \reg71 = 4'0000
Found init rule in `\module46.$proc$rtl.v:845$1001'.
  Set init value: \reg72 = 17'00000000000000000
Found init rule in `\module46.$proc$rtl.v:844$1000'.
  Set init value: \reg73 = 22'0000000000000000000000
Found init rule in `\module46.$proc$rtl.v:843$999'.
  Set init value: \reg74 = 10'0000000000
Found init rule in `\module46.$proc$rtl.v:842$998'.
  Set init value: \reg75 = 10'0000000000
Found init rule in `\module46.$proc$rtl.v:841$997'.
  Set init value: \reg76 = 8'00000000
Found init rule in `\module46.$proc$rtl.v:840$996'.
  Set init value: \reg77 = 12'000000000000
Found init rule in `\module46.$proc$rtl.v:835$995'.
  Set init value: \reg82 = 13'0000000000000
Found init rule in `\module46.$proc$rtl.v:834$994'.
  Set init value: \reg83 = 12'000000000000
Found init rule in `\module40.$proc$rtl.v:561$762'.
  Set init value: \reg138 = 21'000000000000000000000
Found init rule in `\module40.$proc$rtl.v:560$761'.
  Set init value: \reg139 = 5'00000
Found init rule in `\module40.$proc$rtl.v:559$760'.
  Set init value: \reg140 = 8'00000000
Found init rule in `\module40.$proc$rtl.v:558$759'.
  Set init value: \reg141 = 22'0000000000000000000000
Found init rule in `\module40.$proc$rtl.v:557$758'.
  Set init value: \reg142 = 15'000000000000000
Found init rule in `\module40.$proc$rtl.v:556$757'.
  Set init value: \reg143 = 3'000
Found init rule in `\module40.$proc$rtl.v:555$756'.
  Set init value: \reg144 = 6'000000
Found init rule in `\module40.$proc$rtl.v:554$755'.
  Set init value: \reg145 = 7'0000000
Found init rule in `\module40.$proc$rtl.v:553$754'.
  Set init value: \reg146 = 9'000000000
Found init rule in `\module40.$proc$rtl.v:552$753'.
  Set init value: \reg147 = 17'00000000000000000
Found init rule in `\module40.$proc$rtl.v:551$752'.
  Set init value: \reg148 = 14'00000000000000
Found init rule in `\module159.$proc$rtl.v:373$580'.
  Set init value: \reg170 = 17'00000000000000000
Found init rule in `\module159.$proc$rtl.v:372$579'.
  Set init value: \reg171 = 15'000000000000000
Found init rule in `\module159.$proc$rtl.v:371$578'.
  Set init value: \reg172 = 13'0000000000000
Found init rule in `\module159.$proc$rtl.v:370$577'.
  Set init value: \reg173 = 11'00000000000
Found init rule in `\module159.$proc$rtl.v:369$576'.
  Set init value: \reg174 = 19'0000000000000000000
Found init rule in `\module159.$proc$rtl.v:368$575'.
  Set init value: \reg175 = 5'00000
Found init rule in `\module159.$proc$rtl.v:367$574'.
  Set init value: \reg176 = 7'0000000
Found init rule in `\module159.$proc$rtl.v:366$573'.
  Set init value: \reg177 = 21'000000000000000000000
Found init rule in `\module159.$proc$rtl.v:365$572'.
  Set init value: \reg178 = 12'000000000000
Found init rule in `\module159.$proc$rtl.v:364$571'.
  Set init value: \reg179 = 9'000000000
Found init rule in `\module159.$proc$rtl.v:363$570'.
  Set init value: \reg180 = 19'0000000000000000000
Found init rule in `\module159.$proc$rtl.v:362$569'.
  Set init value: \reg181 = 6'000000
Found init rule in `\module159.$proc$rtl.v:361$568'.
  Set init value: \reg182 = 21'000000000000000000000
Found init rule in `\module159.$proc$rtl.v:360$567'.
  Set init value: \reg183 = 9'000000000
Found init rule in `\module159.$proc$rtl.v:359$566'.
  Set init value: \reg184 = 16'0000000000000000
Found init rule in `\module159.$proc$rtl.v:358$565'.
  Set init value: \reg185 = 14'00000000000000
Found init rule in `\module159.$proc$rtl.v:357$564'.
  Set init value: \reg186 = 22'0000000000000000000000
Found init rule in `\module159.$proc$rtl.v:356$563'.
  Set init value: \reg187 = 4'0000
Found init rule in `\module159.$proc$rtl.v:355$562'.
  Set init value: \reg188 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:52$367'.
  Set init value: \reg38 = 10'0000000000
Found init rule in `\top.$proc$rtl.v:51$366'.
  Set init value: \reg37 = 17'00000000000000000
Found init rule in `\top.$proc$rtl.v:50$365'.
  Set init value: \reg36 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:49$364'.
  Set init value: \reg35 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:48$363'.
  Set init value: \reg34 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:47$362'.
  Set init value: \reg33 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:46$361'.
  Set init value: \reg32 = 21'000000000000000000000
Found init rule in `\top.$proc$rtl.v:45$360'.
  Set init value: \reg31 = 18'000000000000000000
Found init rule in `\top.$proc$rtl.v:44$359'.
  Set init value: \reg30 = 19'0000000000000000000
Found init rule in `\top.$proc$rtl.v:43$358'.
  Set init value: \reg29 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:42$357'.
  Set init value: \reg28 = 8'00000000
Found init rule in `\top.$proc$rtl.v:41$356'.
  Set init value: \reg27 = 7'0000000
Found init rule in `\top.$proc$rtl.v:40$355'.
  Set init value: \reg26 = 10'0000000000
Found init rule in `\top.$proc$rtl.v:39$354'.
  Set init value: \reg25 = 22'0000000000000000000000
Found init rule in `\top.$proc$rtl.v:38$353'.
  Set init value: \reg24 = 21'000000000000000000000
Found init rule in `\top.$proc$rtl.v:37$352'.
  Set init value: \reg23 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:36$351'.
  Set init value: \reg22 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:35$350'.
  Set init value: \reg21 = 4'0000
Found init rule in `\top.$proc$rtl.v:34$349'.
  Set init value: \reg20 = 10'0000000000
Found init rule in `\top.$proc$rtl.v:33$348'.
  Set init value: \reg19 = 9'000000000
Found init rule in `\top.$proc$rtl.v:32$347'.
  Set init value: \reg18 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:31$346'.
  Set init value: \reg17 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:30$345'.
  Set init value: \reg16 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:29$344'.
  Set init value: \reg15 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:28$343'.
  Set init value: \reg14 = 17'00000000000000000
Found init rule in `\top.$proc$rtl.v:27$342'.
  Set init value: \reg13 = 3'000
Found init rule in `\top.$proc$rtl.v:26$341'.
  Set init value: \reg12 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:25$340'.
  Set init value: \reg11 = 9'000000000
Found init rule in `\top.$proc$rtl.v:24$339'.
  Set init value: \reg10 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:23$338'.
  Set init value: \reg9 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:22$337'.
  Set init value: \reg8 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:21$336'.
  Set init value: \reg7 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:18$335'.
  Set init value: \reg4 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:13$334'.
  Set init value: \reg207 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:12$333'.
  Set init value: \reg208 = 20'00000000000000000000
Found init rule in `\top.$proc$rtl.v:11$332'.
  Set init value: \reg209 = 14'00000000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module46.$proc$rtl.v:864$1011'.
     1/1: $1\reg53[17:0]
Creating decoders for process `\module46.$proc$rtl.v:863$1010'.
     1/1: $1\reg54[15:0]
Creating decoders for process `\module46.$proc$rtl.v:862$1009'.
     1/1: $1\reg55[20:0]
Creating decoders for process `\module46.$proc$rtl.v:861$1008'.
     1/1: $1\reg56[18:0]
Creating decoders for process `\module46.$proc$rtl.v:851$1007'.
     1/1: $1\reg66[12:0]
Creating decoders for process `\module46.$proc$rtl.v:850$1006'.
     1/1: $1\reg67[14:0]
Creating decoders for process `\module46.$proc$rtl.v:849$1005'.
     1/1: $1\reg68[16:0]
Creating decoders for process `\module46.$proc$rtl.v:848$1004'.
     1/1: $1\reg69[12:0]
Creating decoders for process `\module46.$proc$rtl.v:847$1003'.
     1/1: $1\reg70[11:0]
Creating decoders for process `\module46.$proc$rtl.v:846$1002'.
     1/1: $1\reg71[3:0]
Creating decoders for process `\module46.$proc$rtl.v:845$1001'.
     1/1: $1\reg72[16:0]
Creating decoders for process `\module46.$proc$rtl.v:844$1000'.
     1/1: $1\reg73[21:0]
Creating decoders for process `\module46.$proc$rtl.v:843$999'.
     1/1: $1\reg74[9:0]
Creating decoders for process `\module46.$proc$rtl.v:842$998'.
     1/1: $1\reg75[9:0]
Creating decoders for process `\module46.$proc$rtl.v:841$997'.
     1/1: $1\reg76[7:0]
Creating decoders for process `\module46.$proc$rtl.v:840$996'.
     1/1: $1\reg77[11:0]
Creating decoders for process `\module46.$proc$rtl.v:835$995'.
     1/1: $1\reg82[12:0]
Creating decoders for process `\module46.$proc$rtl.v:834$994'.
     1/1: $1\reg83[11:0]
Creating decoders for process `\module46.$proc$rtl.v:984$966'.
     1/2: $0\reg83[11:0]
     2/2: $0\reg82[12:0]
Creating decoders for process `\module46.$proc$rtl.v:926$912'.
     1/12: $0\reg77[11:0]
     2/12: $0\reg76[7:0]
     3/12: $0\reg66[12:0]
     4/12: $0\reg67[14:0]
     5/12: $0\reg68[16:0]
     6/12: $0\reg69[12:0]
     7/12: $0\reg70[11:0]
     8/12: $0\reg71[3:0]
     9/12: $0\reg72[16:0]
    10/12: $0\reg73[21:0]
    11/12: $0\reg74[9:0]
    12/12: $0\reg75[9:0]
Creating decoders for process `\module46.$proc$rtl.v:903$882'.
     1/4: $0\reg56[18:0]
     2/4: $0\reg55[20:0]
     3/4: $0\reg54[15:0]
     4/4: $0\reg53[17:0]
Creating decoders for process `\module40.$proc$rtl.v:561$762'.
     1/1: $1\reg138[20:0]
Creating decoders for process `\module40.$proc$rtl.v:560$761'.
     1/1: $1\reg139[4:0]
Creating decoders for process `\module40.$proc$rtl.v:559$760'.
     1/1: $1\reg140[7:0]
Creating decoders for process `\module40.$proc$rtl.v:558$759'.
     1/1: $1\reg141[21:0]
Creating decoders for process `\module40.$proc$rtl.v:557$758'.
     1/1: $1\reg142[14:0]
Creating decoders for process `\module40.$proc$rtl.v:556$757'.
     1/1: $1\reg143[2:0]
Creating decoders for process `\module40.$proc$rtl.v:555$756'.
     1/1: $1\reg144[5:0]
Creating decoders for process `\module40.$proc$rtl.v:554$755'.
     1/1: $1\reg145[6:0]
Creating decoders for process `\module40.$proc$rtl.v:553$754'.
     1/1: $1\reg146[8:0]
Creating decoders for process `\module40.$proc$rtl.v:552$753'.
     1/1: $1\reg147[16:0]
Creating decoders for process `\module40.$proc$rtl.v:551$752'.
     1/1: $1\reg148[13:0]
Creating decoders for process `\module40.$proc$rtl.v:646$660'.
     1/11: $0\reg140[7:0]
     2/11: $0\reg139[4:0]
     3/11: $0\reg138[20:0]
     4/11: $0\reg141[21:0]
     5/11: $0\reg142[14:0]
     6/11: $0\reg143[2:0]
     7/11: $0\reg144[5:0]
     8/11: $0\reg147[16:0]
     9/11: $0\reg148[13:0]
    10/11: $0\reg145[6:0]
    11/11: $0\reg146[8:0]
Creating decoders for process `\module159.$proc$rtl.v:373$580'.
     1/1: $1\reg170[16:0]
Creating decoders for process `\module159.$proc$rtl.v:372$579'.
     1/1: $1\reg171[14:0]
Creating decoders for process `\module159.$proc$rtl.v:371$578'.
     1/1: $1\reg172[12:0]
Creating decoders for process `\module159.$proc$rtl.v:370$577'.
     1/1: $1\reg173[10:0]
Creating decoders for process `\module159.$proc$rtl.v:369$576'.
     1/1: $1\reg174[18:0]
Creating decoders for process `\module159.$proc$rtl.v:368$575'.
     1/1: $1\reg175[4:0]
Creating decoders for process `\module159.$proc$rtl.v:367$574'.
     1/1: $1\reg176[6:0]
Creating decoders for process `\module159.$proc$rtl.v:366$573'.
     1/1: $1\reg177[20:0]
Creating decoders for process `\module159.$proc$rtl.v:365$572'.
     1/1: $1\reg178[11:0]
Creating decoders for process `\module159.$proc$rtl.v:364$571'.
     1/1: $1\reg179[8:0]
Creating decoders for process `\module159.$proc$rtl.v:363$570'.
     1/1: $1\reg180[18:0]
Creating decoders for process `\module159.$proc$rtl.v:362$569'.
     1/1: $1\reg181[5:0]
Creating decoders for process `\module159.$proc$rtl.v:361$568'.
     1/1: $1\reg182[20:0]
Creating decoders for process `\module159.$proc$rtl.v:360$567'.
     1/1: $1\reg183[8:0]
Creating decoders for process `\module159.$proc$rtl.v:359$566'.
     1/1: $1\reg184[15:0]
Creating decoders for process `\module159.$proc$rtl.v:358$565'.
     1/1: $1\reg185[13:0]
Creating decoders for process `\module159.$proc$rtl.v:357$564'.
     1/1: $1\reg186[21:0]
Creating decoders for process `\module159.$proc$rtl.v:356$563'.
     1/1: $1\reg187[3:0]
Creating decoders for process `\module159.$proc$rtl.v:355$562'.
     1/1: $1\reg188[18:0]
Creating decoders for process `\module159.$proc$rtl.v:414$379'.
     1/19: $0\reg188[18:0]
     2/19: $0\reg171[14:0]
     3/19: $0\reg170[16:0]
     4/19: $0\reg172[12:0]
     5/19: $0\reg173[10:0]
     6/19: $0\reg174[18:0]
     7/19: $0\reg175[4:0]
     8/19: $0\reg176[6:0]
     9/19: $0\reg177[20:0]
    10/19: $0\reg178[11:0]
    11/19: $0\reg179[8:0]
    12/19: $0\reg180[18:0]
    13/19: $0\reg181[5:0]
    14/19: $0\reg187[3:0]
    15/19: $0\reg182[20:0]
    16/19: $0\reg183[8:0]
    17/19: $0\reg186[21:0]
    18/19: $0\reg184[15:0]
    19/19: $0\reg185[13:0]
Creating decoders for process `\top.$proc$rtl.v:52$367'.
     1/1: $1\reg38[9:0]
Creating decoders for process `\top.$proc$rtl.v:51$366'.
     1/1: $1\reg37[16:0]
Creating decoders for process `\top.$proc$rtl.v:50$365'.
     1/1: $1\reg36[21:0]
Creating decoders for process `\top.$proc$rtl.v:49$364'.
     1/1: $1\reg35[15:0]
Creating decoders for process `\top.$proc$rtl.v:48$363'.
     1/1: $1\reg34[21:0]
Creating decoders for process `\top.$proc$rtl.v:47$362'.
     1/1: $1\reg33[18:0]
Creating decoders for process `\top.$proc$rtl.v:46$361'.
     1/1: $1\reg32[20:0]
Creating decoders for process `\top.$proc$rtl.v:45$360'.
     1/1: $1\reg31[17:0]
Creating decoders for process `\top.$proc$rtl.v:44$359'.
     1/1: $1\reg30[18:0]
Creating decoders for process `\top.$proc$rtl.v:43$358'.
     1/1: $1\reg29[11:0]
Creating decoders for process `\top.$proc$rtl.v:42$357'.
     1/1: $1\reg28[7:0]
Creating decoders for process `\top.$proc$rtl.v:41$356'.
     1/1: $1\reg27[6:0]
Creating decoders for process `\top.$proc$rtl.v:40$355'.
     1/1: $1\reg26[9:0]
Creating decoders for process `\top.$proc$rtl.v:39$354'.
     1/1: $1\reg25[21:0]
Creating decoders for process `\top.$proc$rtl.v:38$353'.
     1/1: $1\reg24[20:0]
Creating decoders for process `\top.$proc$rtl.v:37$352'.
     1/1: $1\reg23[10:0]
Creating decoders for process `\top.$proc$rtl.v:36$351'.
     1/1: $1\reg22[19:0]
Creating decoders for process `\top.$proc$rtl.v:35$350'.
     1/1: $1\reg21[3:0]
Creating decoders for process `\top.$proc$rtl.v:34$349'.
     1/1: $1\reg20[9:0]
Creating decoders for process `\top.$proc$rtl.v:33$348'.
     1/1: $1\reg19[8:0]
Creating decoders for process `\top.$proc$rtl.v:32$347'.
     1/1: $1\reg18[12:0]
Creating decoders for process `\top.$proc$rtl.v:31$346'.
     1/1: $1\reg17[19:0]
Creating decoders for process `\top.$proc$rtl.v:30$345'.
     1/1: $1\reg16[10:0]
Creating decoders for process `\top.$proc$rtl.v:29$344'.
     1/1: $1\reg15[19:0]
Creating decoders for process `\top.$proc$rtl.v:28$343'.
     1/1: $1\reg14[16:0]
Creating decoders for process `\top.$proc$rtl.v:27$342'.
     1/1: $1\reg13[2:0]
Creating decoders for process `\top.$proc$rtl.v:26$341'.
     1/1: $1\reg12[12:0]
Creating decoders for process `\top.$proc$rtl.v:25$340'.
     1/1: $1\reg11[8:0]
Creating decoders for process `\top.$proc$rtl.v:24$339'.
     1/1: $1\reg10[12:0]
Creating decoders for process `\top.$proc$rtl.v:23$338'.
     1/1: $1\reg9[19:0]
Creating decoders for process `\top.$proc$rtl.v:22$337'.
     1/1: $1\reg8[10:0]
Creating decoders for process `\top.$proc$rtl.v:21$336'.
     1/1: $1\reg7[10:0]
Creating decoders for process `\top.$proc$rtl.v:18$335'.
     1/1: $1\reg4[11:0]
Creating decoders for process `\top.$proc$rtl.v:13$334'.
     1/1: $1\reg207[19:0]
Creating decoders for process `\top.$proc$rtl.v:12$333'.
     1/1: $1\reg208[19:0]
Creating decoders for process `\top.$proc$rtl.v:11$332'.
     1/1: $1\reg209[13:0]
Creating decoders for process `\top.$proc$rtl.v:326$298'.
     1/3: $0\reg209[13:0]
     2/3: $0\reg208[19:0]
     3/3: $0\reg207[19:0]
Creating decoders for process `\top.$proc$rtl.v:134$19'.
     1/27: $0\reg28[7:0]
     2/27: $0\reg38[9:0]
     3/27: $0\reg37[16:0]
     4/27: $0\reg36[21:0]
     5/27: $0\reg35[15:0]
     6/27: $0\reg34[21:0]
     7/27: $0\reg33[18:0]
     8/27: $0\reg32[20:0]
     9/27: $0\reg31[17:0]
    10/27: $0\reg30[18:0]
    11/27: $0\reg29[11:0]
    12/27: $0\reg27[6:0]
    13/27: $0\reg26[9:0]
    14/27: $0\reg25[21:0]
    15/27: $0\reg24[20:0]
    16/27: $0\reg23[10:0]
    17/27: $0\reg22[19:0]
    18/27: $0\reg21[3:0]
    19/27: $0\reg20[9:0]
    20/27: $0\reg19[8:0]
    21/27: $0\reg18[12:0]
    22/27: $0\reg17[19:0]
    23/27: $0\reg16[10:0]
    24/27: $0\reg15[19:0]
    25/27: $0\reg14[16:0]
    26/27: $0\reg13[2:0]
    27/27: $0\reg12[12:0]
Creating decoders for process `\top.$proc$rtl.v:123$6'.
     1/5: $0\reg11[8:0]
     2/5: $0\reg10[12:0]
     3/5: $0\reg9[19:0]
     4/5: $0\reg8[10:0]
     5/5: $0\reg7[10:0]
Creating decoders for process `\top.$proc$rtl.v:116$1'.
     1/1: $0\reg4[11:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module46.\reg83' using process `\module46.$proc$rtl.v:984$966'.
  created $dff cell `$procdff$1334' with positive edge clock.
Creating register for signal `\module46.\reg82' using process `\module46.$proc$rtl.v:984$966'.
  created $dff cell `$procdff$1335' with positive edge clock.
Creating register for signal `\module46.\reg77' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1336' with positive edge clock.
Creating register for signal `\module46.\reg76' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1337' with positive edge clock.
Creating register for signal `\module46.\reg75' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1338' with positive edge clock.
Creating register for signal `\module46.\reg74' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1339' with positive edge clock.
Creating register for signal `\module46.\reg73' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1340' with positive edge clock.
Creating register for signal `\module46.\reg72' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1341' with positive edge clock.
Creating register for signal `\module46.\reg71' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1342' with positive edge clock.
Creating register for signal `\module46.\reg70' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1343' with positive edge clock.
Creating register for signal `\module46.\reg69' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1344' with positive edge clock.
Creating register for signal `\module46.\reg68' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1345' with positive edge clock.
Creating register for signal `\module46.\reg67' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1346' with positive edge clock.
Creating register for signal `\module46.\reg66' using process `\module46.$proc$rtl.v:926$912'.
  created $dff cell `$procdff$1347' with positive edge clock.
Creating register for signal `\module46.\reg56' using process `\module46.$proc$rtl.v:903$882'.
  created $dff cell `$procdff$1348' with positive edge clock.
Creating register for signal `\module46.\reg55' using process `\module46.$proc$rtl.v:903$882'.
  created $dff cell `$procdff$1349' with positive edge clock.
Creating register for signal `\module46.\reg54' using process `\module46.$proc$rtl.v:903$882'.
  created $dff cell `$procdff$1350' with positive edge clock.
Creating register for signal `\module46.\reg53' using process `\module46.$proc$rtl.v:903$882'.
  created $dff cell `$procdff$1351' with positive edge clock.
Creating register for signal `\module40.\reg146' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1352' with positive edge clock.
Creating register for signal `\module40.\reg145' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1353' with positive edge clock.
Creating register for signal `\module40.\reg148' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1354' with positive edge clock.
Creating register for signal `\module40.\reg147' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1355' with positive edge clock.
Creating register for signal `\module40.\reg144' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1356' with positive edge clock.
Creating register for signal `\module40.\reg143' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1357' with positive edge clock.
Creating register for signal `\module40.\reg142' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1358' with positive edge clock.
Creating register for signal `\module40.\reg141' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1359' with positive edge clock.
Creating register for signal `\module40.\reg140' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1360' with positive edge clock.
Creating register for signal `\module40.\reg139' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1361' with positive edge clock.
Creating register for signal `\module40.\reg138' using process `\module40.$proc$rtl.v:646$660'.
  created $dff cell `$procdff$1362' with positive edge clock.
Creating register for signal `\module159.\reg185' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1363' with positive edge clock.
Creating register for signal `\module159.\reg184' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1364' with positive edge clock.
Creating register for signal `\module159.\reg186' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1365' with positive edge clock.
Creating register for signal `\module159.\reg183' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1366' with positive edge clock.
Creating register for signal `\module159.\reg182' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1367' with positive edge clock.
Creating register for signal `\module159.\reg188' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1368' with positive edge clock.
Creating register for signal `\module159.\reg187' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1369' with positive edge clock.
Creating register for signal `\module159.\reg181' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1370' with positive edge clock.
Creating register for signal `\module159.\reg180' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1371' with positive edge clock.
Creating register for signal `\module159.\reg179' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1372' with positive edge clock.
Creating register for signal `\module159.\reg178' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1373' with positive edge clock.
Creating register for signal `\module159.\reg177' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1374' with positive edge clock.
Creating register for signal `\module159.\reg176' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1375' with positive edge clock.
Creating register for signal `\module159.\reg175' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1376' with positive edge clock.
Creating register for signal `\module159.\reg174' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1377' with positive edge clock.
Creating register for signal `\module159.\reg173' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1378' with positive edge clock.
Creating register for signal `\module159.\reg172' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1379' with positive edge clock.
Creating register for signal `\module159.\reg171' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1380' with positive edge clock.
Creating register for signal `\module159.\reg170' using process `\module159.$proc$rtl.v:414$379'.
  created $dff cell `$procdff$1381' with positive edge clock.
Creating register for signal `\top.\reg209' using process `\top.$proc$rtl.v:326$298'.
  created $dff cell `$procdff$1382' with positive edge clock.
Creating register for signal `\top.\reg208' using process `\top.$proc$rtl.v:326$298'.
  created $dff cell `$procdff$1383' with positive edge clock.
Creating register for signal `\top.\reg207' using process `\top.$proc$rtl.v:326$298'.
  created $dff cell `$procdff$1384' with positive edge clock.
Creating register for signal `\top.\reg12' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1385' with positive edge clock.
Creating register for signal `\top.\reg13' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1386' with positive edge clock.
Creating register for signal `\top.\reg14' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1387' with positive edge clock.
Creating register for signal `\top.\reg15' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1388' with positive edge clock.
Creating register for signal `\top.\reg16' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1389' with positive edge clock.
Creating register for signal `\top.\reg17' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1390' with positive edge clock.
Creating register for signal `\top.\reg18' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1391' with positive edge clock.
Creating register for signal `\top.\reg19' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1392' with positive edge clock.
Creating register for signal `\top.\reg20' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1393' with positive edge clock.
Creating register for signal `\top.\reg21' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1394' with positive edge clock.
Creating register for signal `\top.\reg22' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1395' with positive edge clock.
Creating register for signal `\top.\reg23' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1396' with positive edge clock.
Creating register for signal `\top.\reg24' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1397' with positive edge clock.
Creating register for signal `\top.\reg25' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1398' with positive edge clock.
Creating register for signal `\top.\reg26' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1399' with positive edge clock.
Creating register for signal `\top.\reg27' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1400' with positive edge clock.
Creating register for signal `\top.\reg28' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1401' with positive edge clock.
Creating register for signal `\top.\reg29' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1402' with positive edge clock.
Creating register for signal `\top.\reg30' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1403' with positive edge clock.
Creating register for signal `\top.\reg31' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1404' with positive edge clock.
Creating register for signal `\top.\reg32' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1405' with positive edge clock.
Creating register for signal `\top.\reg33' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1406' with positive edge clock.
Creating register for signal `\top.\reg34' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1407' with positive edge clock.
Creating register for signal `\top.\reg35' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1408' with positive edge clock.
Creating register for signal `\top.\reg36' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1409' with positive edge clock.
Creating register for signal `\top.\reg37' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1410' with positive edge clock.
Creating register for signal `\top.\reg38' using process `\top.$proc$rtl.v:134$19'.
  created $dff cell `$procdff$1411' with positive edge clock.
Creating register for signal `\top.\reg7' using process `\top.$proc$rtl.v:123$6'.
  created $dff cell `$procdff$1412' with positive edge clock.
Creating register for signal `\top.\reg8' using process `\top.$proc$rtl.v:123$6'.
  created $dff cell `$procdff$1413' with positive edge clock.
Creating register for signal `\top.\reg9' using process `\top.$proc$rtl.v:123$6'.
  created $dff cell `$procdff$1414' with positive edge clock.
Creating register for signal `\top.\reg10' using process `\top.$proc$rtl.v:123$6'.
  created $dff cell `$procdff$1415' with positive edge clock.
Creating register for signal `\top.\reg11' using process `\top.$proc$rtl.v:123$6'.
  created $dff cell `$procdff$1416' with positive edge clock.
Creating register for signal `\top.\reg4' using process `\top.$proc$rtl.v:116$1'.
  created $dff cell `$procdff$1417' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module46.$proc$rtl.v:864$1011'.
Removing empty process `module46.$proc$rtl.v:863$1010'.
Removing empty process `module46.$proc$rtl.v:862$1009'.
Removing empty process `module46.$proc$rtl.v:861$1008'.
Removing empty process `module46.$proc$rtl.v:851$1007'.
Removing empty process `module46.$proc$rtl.v:850$1006'.
Removing empty process `module46.$proc$rtl.v:849$1005'.
Removing empty process `module46.$proc$rtl.v:848$1004'.
Removing empty process `module46.$proc$rtl.v:847$1003'.
Removing empty process `module46.$proc$rtl.v:846$1002'.
Removing empty process `module46.$proc$rtl.v:845$1001'.
Removing empty process `module46.$proc$rtl.v:844$1000'.
Removing empty process `module46.$proc$rtl.v:843$999'.
Removing empty process `module46.$proc$rtl.v:842$998'.
Removing empty process `module46.$proc$rtl.v:841$997'.
Removing empty process `module46.$proc$rtl.v:840$996'.
Removing empty process `module46.$proc$rtl.v:835$995'.
Removing empty process `module46.$proc$rtl.v:834$994'.
Removing empty process `module46.$proc$rtl.v:984$966'.
Found and cleaned up 3 empty switches in `\module46.$proc$rtl.v:926$912'.
Removing empty process `module46.$proc$rtl.v:926$912'.
Removing empty process `module46.$proc$rtl.v:903$882'.
Removing empty process `module40.$proc$rtl.v:561$762'.
Removing empty process `module40.$proc$rtl.v:560$761'.
Removing empty process `module40.$proc$rtl.v:559$760'.
Removing empty process `module40.$proc$rtl.v:558$759'.
Removing empty process `module40.$proc$rtl.v:557$758'.
Removing empty process `module40.$proc$rtl.v:556$757'.
Removing empty process `module40.$proc$rtl.v:555$756'.
Removing empty process `module40.$proc$rtl.v:554$755'.
Removing empty process `module40.$proc$rtl.v:553$754'.
Removing empty process `module40.$proc$rtl.v:552$753'.
Removing empty process `module40.$proc$rtl.v:551$752'.
Found and cleaned up 2 empty switches in `\module40.$proc$rtl.v:646$660'.
Removing empty process `module40.$proc$rtl.v:646$660'.
Removing empty process `module159.$proc$rtl.v:373$580'.
Removing empty process `module159.$proc$rtl.v:372$579'.
Removing empty process `module159.$proc$rtl.v:371$578'.
Removing empty process `module159.$proc$rtl.v:370$577'.
Removing empty process `module159.$proc$rtl.v:369$576'.
Removing empty process `module159.$proc$rtl.v:368$575'.
Removing empty process `module159.$proc$rtl.v:367$574'.
Removing empty process `module159.$proc$rtl.v:366$573'.
Removing empty process `module159.$proc$rtl.v:365$572'.
Removing empty process `module159.$proc$rtl.v:364$571'.
Removing empty process `module159.$proc$rtl.v:363$570'.
Removing empty process `module159.$proc$rtl.v:362$569'.
Removing empty process `module159.$proc$rtl.v:361$568'.
Removing empty process `module159.$proc$rtl.v:360$567'.
Removing empty process `module159.$proc$rtl.v:359$566'.
Removing empty process `module159.$proc$rtl.v:358$565'.
Removing empty process `module159.$proc$rtl.v:357$564'.
Removing empty process `module159.$proc$rtl.v:356$563'.
Removing empty process `module159.$proc$rtl.v:355$562'.
Found and cleaned up 7 empty switches in `\module159.$proc$rtl.v:414$379'.
Removing empty process `module159.$proc$rtl.v:414$379'.
Removing empty process `top.$proc$rtl.v:52$367'.
Removing empty process `top.$proc$rtl.v:51$366'.
Removing empty process `top.$proc$rtl.v:50$365'.
Removing empty process `top.$proc$rtl.v:49$364'.
Removing empty process `top.$proc$rtl.v:48$363'.
Removing empty process `top.$proc$rtl.v:47$362'.
Removing empty process `top.$proc$rtl.v:46$361'.
Removing empty process `top.$proc$rtl.v:45$360'.
Removing empty process `top.$proc$rtl.v:44$359'.
Removing empty process `top.$proc$rtl.v:43$358'.
Removing empty process `top.$proc$rtl.v:42$357'.
Removing empty process `top.$proc$rtl.v:41$356'.
Removing empty process `top.$proc$rtl.v:40$355'.
Removing empty process `top.$proc$rtl.v:39$354'.
Removing empty process `top.$proc$rtl.v:38$353'.
Removing empty process `top.$proc$rtl.v:37$352'.
Removing empty process `top.$proc$rtl.v:36$351'.
Removing empty process `top.$proc$rtl.v:35$350'.
Removing empty process `top.$proc$rtl.v:34$349'.
Removing empty process `top.$proc$rtl.v:33$348'.
Removing empty process `top.$proc$rtl.v:32$347'.
Removing empty process `top.$proc$rtl.v:31$346'.
Removing empty process `top.$proc$rtl.v:30$345'.
Removing empty process `top.$proc$rtl.v:29$344'.
Removing empty process `top.$proc$rtl.v:28$343'.
Removing empty process `top.$proc$rtl.v:27$342'.
Removing empty process `top.$proc$rtl.v:26$341'.
Removing empty process `top.$proc$rtl.v:25$340'.
Removing empty process `top.$proc$rtl.v:24$339'.
Removing empty process `top.$proc$rtl.v:23$338'.
Removing empty process `top.$proc$rtl.v:22$337'.
Removing empty process `top.$proc$rtl.v:21$336'.
Removing empty process `top.$proc$rtl.v:18$335'.
Removing empty process `top.$proc$rtl.v:13$334'.
Removing empty process `top.$proc$rtl.v:12$333'.
Removing empty process `top.$proc$rtl.v:11$332'.
Removing empty process `top.$proc$rtl.v:326$298'.
Found and cleaned up 9 empty switches in `\top.$proc$rtl.v:134$19'.
Removing empty process `top.$proc$rtl.v:134$19'.
Removing empty process `top.$proc$rtl.v:123$6'.
Removing empty process `top.$proc$rtl.v:116$1'.
Cleaned up 21 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module46.
<suppressed ~18 debug messages>
Optimizing module module88.
<suppressed ~14 debug messages>
Optimizing module module113.
<suppressed ~14 debug messages>
Optimizing module module40.
<suppressed ~26 debug messages>
Optimizing module module159.
<suppressed ~22 debug messages>
Optimizing module top.
<suppressed ~34 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \top..
Removed 102 unused cells and 631 unused wires.
<suppressed ~225 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module113..
checking module module159..
checking module module40..
checking module module46..
checking module module88..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module159'.
<suppressed ~27 debug messages>
Finding identical cells in module `\module40'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module88'.
<suppressed ~6 debug messages>
Finding identical cells in module `\top'.
<suppressed ~36 debug messages>
Removed a total of 29 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:749$773.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $ternary$rtl.v:915$892.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~157 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
    New input vector for $reduce_and cell $reduce_and$rtl.v:743$765: { \wire116 [0] \wire116 [1] \wire116 [2] \wire116 [3] \wire116 [4] \wire116 [5] \wire116 [6] \wire116 [7] \wire116 [8] \wire116 [9] \wire116 [10] }
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
    New input vector for $reduce_or cell $reduce_or$rtl.v:493$514: { $ternary$rtl.v:493$513_Y [0] $ternary$rtl.v:493$513_Y [1] $ternary$rtl.v:493$513_Y [2] $ternary$rtl.v:493$513_Y [3] $ternary$rtl.v:493$513_Y [4] $ternary$rtl.v:493$513_Y [5] $ternary$rtl.v:493$513_Y [6] $ternary$rtl.v:493$513_Y [7] $ternary$rtl.v:493$513_Y [8] $ternary$rtl.v:493$513_Y [9] $ternary$rtl.v:493$513_Y [10] $ternary$rtl.v:493$513_Y [11] $ternary$rtl.v:493$513_Y [12] $ternary$rtl.v:493$513_Y [13] $ternary$rtl.v:493$513_Y [14] $ternary$rtl.v:493$513_Y [15] $ternary$rtl.v:493$513_Y [16] $ternary$rtl.v:493$513_Y [17] $ternary$rtl.v:493$513_Y [18] $ternary$rtl.v:493$513_Y [19] $ternary$rtl.v:493$513_Y [20] $ternary$rtl.v:493$513_Y [21] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:466$477: { \wire167 [0] \wire167 [1] \wire167 [2] \wire167 [3] \wire167 [4] \wire167 [5] \wire167 [6] \wire167 [7] \wire167 [8] \wire167 [9] \wire167 [10] \wire167 [11] \wire167 [12] \wire167 [13] \wire167 [14] \wire167 [15] \wire167 [16] \wire167 [17] \wire167 [18] \wire167 [19] \wire167 [20] \wire167 [21] $eq$rtl.v:466$476_Y }
    New input vector for $reduce_or cell $reduce_or$rtl.v:452$462: { \wire162 [0] \wire162 [1] \wire162 [2] \wire162 [3] \wire162 [4] \wire162 [5] \wire162 [6] \wire162 [7] \wire162 [8] \wire162 [9] \wire162 [10] \wire162 [11] \wire162 [12] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:433$432: { \wire160 [0] \wire160 [1] \wire160 [2] \wire160 [3] \wire160 [4] \wire160 [5] \wire160 [6] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:450$457: { \wire162 [0] \wire162 [1] \wire162 [2] \wire162 [3] \wire162 [4] \wire162 [5] \wire162 [6] \wire162 [7] \wire162 [8] \wire162 [9] \wire162 [10] \wire162 [11] \wire162 [12] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:432$430: { \wire161 [0] \wire161 [1] \wire161 [2] \wire161 [3] \wire161 [4] \wire161 [5] \wire161 [6] \wire161 [7] \wire161 [8] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:421$395: { $ternary$rtl.v:421$394_Y [0] $ternary$rtl.v:421$394_Y [1] $ternary$rtl.v:421$394_Y [2] $ternary$rtl.v:421$394_Y [3] $ternary$rtl.v:421$394_Y [4] $ternary$rtl.v:421$394_Y [5] $ternary$rtl.v:421$394_Y [6] $ternary$rtl.v:421$394_Y [7] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:419$401: { $ternary$rtl.v:419$400_Y [0] $ternary$rtl.v:419$400_Y [1] $ternary$rtl.v:419$400_Y [2] $ternary$rtl.v:419$400_Y [3] $ternary$rtl.v:419$400_Y [4] $ternary$rtl.v:419$400_Y [5] $ternary$rtl.v:419$400_Y [6] $ternary$rtl.v:419$400_Y [7] $ternary$rtl.v:419$400_Y [8] $ternary$rtl.v:419$400_Y [9] $ternary$rtl.v:419$400_Y [10] $ternary$rtl.v:419$400_Y [11] $ternary$rtl.v:419$400_Y [12] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:417$383: { \wire164 [0] \wire164 [1] \wire164 [2] \wire164 [3] \wire164 [4] \wire164 [5] \wire164 [6] \wire164 [7] \wire164 [8] \wire164 [9] \wire164 [10] \wire164 [11] \wire164 [12] \wire164 [13] \wire164 [14] \wire164 [15] \wire164 [16] \wire164 [17] \wire164 [18] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:410$374: { \wire166 [0] \wire166 [1] \wire166 [2] \wire166 [3] \wire166 [4] \wire166 [5] \wire166 [6] \wire166 [7] \wire166 [8] \wire166 [9] \wire166 [10] \wire166 [11] \wire166 [12] \wire166 [13] \wire166 [14] \wire166 [15] \wire166 [16] \wire166 [17] \wire166 [18] \wire166 [19] }
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
    New input vector for $reduce_or cell $reduce_or$rtl.v:692$734: { \reg143 [0] \reg143 [1] \reg143 [2] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:684$708: { \reg142 [0] \reg142 [1] \reg142 [2] \reg142 [3] \reg142 [4] \reg142 [5] \reg142 [6] \reg142 [7] \reg142 [8] \reg142 [9] \reg142 [10] \reg142 [11] \reg142 [12] \reg142 [13] \reg142 [14] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:661$674: { \wire112 [0] \wire112 [1] \wire112 [2] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:635$622: { \wire41 [0] \wire41 [1] \wire41 [2] \wire41 [3] \wire41 [4] \wire41 [5] \wire41 [6] \wire41 [7] \wire41 [8] \wire41 [9] \wire41 [10] \wire41 [11] \wire41 [12] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:624$611: { $ternary$rtl.v:624$610_Y [0] $ternary$rtl.v:624$610_Y [1] $ternary$rtl.v:624$610_Y [2] $ternary$rtl.v:624$610_Y [3] $ternary$rtl.v:624$610_Y [4] $ternary$rtl.v:624$610_Y [5] $ternary$rtl.v:624$610_Y [6] $ternary$rtl.v:624$610_Y [7] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:698$750: { $ternary$rtl.v:698$749_Y [0] $ternary$rtl.v:698$749_Y [1] $ternary$rtl.v:698$749_Y [2] $ternary$rtl.v:698$749_Y [3] $ternary$rtl.v:698$749_Y [4] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:696$740: { \reg143 [0] \reg143 [1] \reg143 [2] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:684$710: { \wire44 [0] \wire44 [1] \wire44 [2] \wire44 [3] \wire44 [4] \wire44 [5] \wire44 [6] \wire44 [7] \wire44 [8] \wire44 [9] \wire44 [10] \wire44 [11] \wire44 [12] \wire44 [13] \wire44 [14] \wire44 [15] \wire44 [16] \wire44 [17] \wire44 [18] \wire44 [19] \wire45 [20] \wire45 [21] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:653$666: { $xnor$rtl.v:653$665_Y [0] $xnor$rtl.v:653$665_Y [1] $xnor$rtl.v:653$665_Y [2] $xnor$rtl.v:653$665_Y [3] $xnor$rtl.v:653$665_Y [4] $xnor$rtl.v:653$665_Y [5] $xnor$rtl.v:653$665_Y [6] $xnor$rtl.v:653$665_Y [7] $xnor$rtl.v:653$665_Y [8] $xnor$rtl.v:653$665_Y [9] $xnor$rtl.v:653$665_Y [10] $xnor$rtl.v:653$665_Y [11] $xnor$rtl.v:653$665_Y [12] $xnor$rtl.v:653$665_Y [13] $xnor$rtl.v:653$665_Y [14] $xnor$rtl.v:653$665_Y [15] $xnor$rtl.v:653$665_Y [16] $xnor$rtl.v:653$665_Y [17] $xnor$rtl.v:653$665_Y [18] $xnor$rtl.v:653$665_Y [19] $xnor$rtl.v:653$665_Y [20] $xnor$rtl.v:653$665_Y [21] }
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:983$963: { \reg76 [0] \reg76 [1] \reg76 [2] \reg76 [3] \reg76 [4] \reg76 [5] \reg76 [6] \reg76 [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:924$911: { $xor$rtl.v:924$910_Y [0] $xor$rtl.v:924$910_Y [1] $xor$rtl.v:924$910_Y [2] $xor$rtl.v:924$910_Y [3] $xor$rtl.v:924$910_Y [4] $xor$rtl.v:924$910_Y [5] $xor$rtl.v:924$910_Y [6] $xor$rtl.v:924$910_Y [7] $xor$rtl.v:924$910_Y [8] $xor$rtl.v:924$910_Y [9] $xor$rtl.v:924$910_Y [10] $xor$rtl.v:924$910_Y [11] $xor$rtl.v:924$910_Y [12] $xor$rtl.v:924$910_Y [13] $xor$rtl.v:924$910_Y [14] $xor$rtl.v:924$910_Y [15] $xor$rtl.v:924$910_Y [16] $xor$rtl.v:924$910_Y [17] $xor$rtl.v:924$910_Y [18] $xor$rtl.v:924$910_Y [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:919$898: { \wire58 [0] \wire58 [1] \wire58 [2] \wire58 [3] \wire58 [4] \wire58 [5] \wire58 [6] \wire58 [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:917$896: { \wire52 [0] \wire52 [1] \wire52 [2] \wire52 [3] \wire52 [4] \wire52 [5] \wire52 [6] \wire52 [7] \wire52 [8] \wire52 [9] \wire52 [10] \wire52 [11] \wire52 [12] \wire52 [13] \wire52 [14] \wire52 [15] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:905$883: { \wire51 [0] \wire51 [1] \wire51 [2] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:952$936: { \reg72 [0] \reg72 [1] \reg72 [2] \reg72 [3] \reg72 [4] \reg72 [5] \reg72 [6] \reg72 [7] \reg72 [8] \reg72 [9] \reg72 [10] \reg72 [11] \reg72 [12] \reg72 [13] \reg72 [14] \reg72 [15] \reg72 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:931$914: { \wire52 [0] \wire52 [1] \wire52 [2] \wire52 [3] \wire52 [4] \wire52 [5] \wire52 [6] \wire52 [7] \wire52 [8] \wire52 [9] \wire52 [10] \wire52 [11] \wire52 [12] \wire52 [13] \wire52 [14] \wire52 [15] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
    New input vector for $reduce_or cell $reduce_or$rtl.v:794$807: { \wire93 [0] \wire93 [1] \wire93 [2] \wire93 [3] \wire93 [4] \wire93 [5] \wire93 [6] \wire93 [7] \wire93 [8] \wire93 [9] \wire93 [10] \wire93 [11] \wire93 [12] \wire93 [13] \wire93 [14] \wire93 [15] \wire93 [16] \wire93 [17] \wire93 [18] \wire93 [19] \wire93 [20] \wire93 [21] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:793$792: { \wire92 [0] \wire92 [1] \wire92 [2] \wire92 [3] \wire92 [4] \wire92 [5] \wire92 [6] \wire92 [7] \wire92 [8] \wire92 [9] \wire92 [10] \wire92 [11] \wire92 [12] \wire92 [13] \wire92 [14] \wire92 [15] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:805$833: { \wire99 [0] \wire99 [1] \wire99 [2] \wire99 [3] \wire99 [4] \wire99 [5] \wire99 [6] \wire99 [7] \wire99 [8] \wire99 [9] \wire99 [10] \wire99 [11] \wire99 [12] }
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:323$296: { $ternary$rtl.v:323$295_Y [0] $ternary$rtl.v:323$295_Y [1] $ternary$rtl.v:323$295_Y [2] $ternary$rtl.v:323$295_Y [3] $ternary$rtl.v:323$295_Y [4] $ternary$rtl.v:323$295_Y [5] $ternary$rtl.v:323$295_Y [6] $ternary$rtl.v:323$295_Y [7] $ternary$rtl.v:323$295_Y [8] $ternary$rtl.v:323$295_Y [9] $ternary$rtl.v:323$295_Y [10] $ternary$rtl.v:323$295_Y [11] $ternary$rtl.v:323$295_Y [12] $ternary$rtl.v:323$295_Y [13] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:316$281: { $ternary$rtl.v:316$280_Y [0] $ternary$rtl.v:316$280_Y [1] $ternary$rtl.v:316$280_Y [2] $ternary$rtl.v:316$280_Y [3] $ternary$rtl.v:316$280_Y [4] $ternary$rtl.v:316$280_Y [5] $ternary$rtl.v:316$280_Y [6] $ternary$rtl.v:316$280_Y [7] $ternary$rtl.v:316$280_Y [8] $ternary$rtl.v:316$280_Y [9] $ternary$rtl.v:316$280_Y [10] $ternary$rtl.v:316$280_Y [11] $ternary$rtl.v:316$280_Y [12] $ternary$rtl.v:316$280_Y [13] $ternary$rtl.v:316$280_Y [14] $ternary$rtl.v:316$280_Y [15] $ternary$rtl.v:316$280_Y [16] $ternary$rtl.v:316$280_Y [17] $ternary$rtl.v:316$280_Y [18] $ternary$rtl.v:316$280_Y [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:187$90: { \reg8 [0] \reg8 [1] \reg8 [2] \reg8 [3] \reg8 [4] \reg8 [5] \reg8 [6] \reg8 [7] \reg8 [8] \reg8 [9] \reg8 [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:272$206: { \reg33 [0] \reg33 [1] \reg33 [2] \reg33 [3] \reg33 [4] \reg33 [5] \reg33 [6] \reg33 [7] \reg33 [8] \reg33 [9] \reg33 [10] \reg33 [11] \reg33 [12] \reg33 [13] \reg33 [14] \reg33 [15] \reg33 [16] \reg33 [17] \reg33 [18] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:171$55: { \reg17 [0] \reg17 [1] \reg17 [2] \reg17 [3] \reg17 [4] \reg17 [5] \reg17 [6] \reg17 [7] \reg17 [8] \reg17 [9] \reg17 [10] \reg17 [11] \reg17 [12] \reg17 [13] \reg17 [14] \reg17 [15] \reg17 [16] \reg17 [17] \reg17 [18] \reg17 [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:167$50: { $add$rtl.v:167$49_Y [0] $add$rtl.v:167$49_Y [1] $add$rtl.v:167$49_Y [2] $add$rtl.v:167$49_Y [3] $add$rtl.v:167$49_Y [4] $add$rtl.v:167$49_Y [5] $add$rtl.v:167$49_Y [6] $add$rtl.v:167$49_Y [7] $add$rtl.v:167$49_Y [8] $add$rtl.v:167$49_Y [9] $add$rtl.v:167$49_Y [10] $add$rtl.v:167$49_Y [11] $add$rtl.v:167$49_Y [12] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:121$5: { $xnor$rtl.v:121$3_Y [0] $xnor$rtl.v:121$3_Y [1] $xnor$rtl.v:121$3_Y [2] $xnor$rtl.v:121$3_Y [3] $xnor$rtl.v:121$3_Y [4] $xnor$rtl.v:121$3_Y [5] $xnor$rtl.v:121$3_Y [6] $xnor$rtl.v:121$3_Y [7] $xnor$rtl.v:121$3_Y [8] $xnor$rtl.v:121$3_Y [9] $xnor$rtl.v:121$3_Y [10] $xnor$rtl.v:121$3_Y [11] $shr$rtl.v:120$4_Y [0] $shr$rtl.v:120$4_Y [1] $shr$rtl.v:120$4_Y [2] $shr$rtl.v:120$4_Y [3] }
  Optimizing cells in module \top.
Performed a total of 37 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1366 ($dff) from module module159.
Removing $procdff$1362 ($dff) from module module40.
Removing $procdff$1348 ($dff) from module module46.
Promoting init spec \reg209 = 14'00000000000000 to constant driver in module top.
Promoting init spec \reg208 = 20'00000000000000000000 to constant driver in module top.
Promoted 2 init specs to constant drivers.
Replaced 3 DFF cells.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 33 unused wires.
<suppressed ~8 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
<suppressed ~1 debug messages>
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~156 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 12 bits (of 20) from mux cell module113.$ternary$rtl.v:749$776 ($mux).
Removed top 12 bits (of 20) from mux cell module113.$ternary$rtl.v:749$780 ($mux).
Removed top 12 bits (of 20) from wire module113.$ternary$rtl.v:749$776_Y.
Removed top 12 bits (of 20) from wire module113.$ternary$rtl.v:749$780_Y.
Removed top 18 bits (of 20) from wire module113.wire118.
Removed top 14 bits (of 18) from wire module113.wire125.
Removed top 6 bits (of 14) from wire module113.wire126.
Removed top 19 bits (of 20) from port A of cell module159.$xnor$rtl.v:408$373 ($xnor).
Removed top 7 bits (of 20) from port B of cell module159.$xnor$rtl.v:408$373 ($xnor).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:411$378 ($mux).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:417$382 ($mux).
Removed top 6 bits (of 7) from port B of cell module159.$lt$rtl.v:421$397 ($lt).
Removed top 3 bits (of 8) from mux cell module159.$ternary$rtl.v:421$394 ($mux).
Removed top 15 bits (of 17) from mux cell module159.$ternary$rtl.v:421$405 ($mux).
Removed top 10 bits (of 19) from port A of cell module159.$xnor$rtl.v:423$407 ($xnor).
Removed top 18 bits (of 19) from port B of cell module159.$xnor$rtl.v:423$407 ($xnor).
Removed top 4 bits (of 19) from port Y of cell module159.$xnor$rtl.v:423$407 ($xnor).
Removed top 9 bits (of 22) from port A of cell module159.$add$rtl.v:429$427 ($add).
Removed top 3 bits (of 22) from port A of cell module159.$not$rtl.v:429$424 ($not).
Removed top 21 bits (of 22) from port B of cell module159.$xnor$rtl.v:430$429 ($xnor).
Removed top 9 bits (of 22) from port Y of cell module159.$xnor$rtl.v:430$429 ($xnor).
Removed top 29 bits (of 30) from port A of cell module159.$add$rtl.v:433$433 ($add).
Removed top 22 bits (of 30) from port Y of cell module159.$add$rtl.v:433$433 ($add).
Removed top 22 bits (of 30) from port A of cell module159.$sshr$rtl.v:435$439 ($sshr).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:436$444 ($mux).
Removed top 12 bits (of 19) from mux cell module159.$ternary$rtl.v:445$448 ($mux).
Removed top 10 bits (of 19) from port B of cell module159.$ge$rtl.v:445$449 ($ge).
Removed top 12 bits (of 19) from port A of cell module159.$le$rtl.v:445$450 ($le).
Removed top 18 bits (of 19) from port B of cell module159.$le$rtl.v:445$450 ($le).
Removed top 4 bits (of 5) from port A of cell module159.$sshl$rtl.v:445$451 ($sshl).
Removed top 13 bits (of 20) from mux cell module159.$ternary$rtl.v:450$461 ($mux).
Removed top 13 bits (of 20) from port Y of cell module159.$xor$rtl.v:450$458 ($xor).
Removed top 13 bits (of 20) from port A of cell module159.$xor$rtl.v:450$458 ($xor).
Removed top 20 bits (of 21) from port A of cell module159.$lt$rtl.v:461$474 ($lt).
Removed top 16 bits (of 17) from port A of cell module159.$eq$rtl.v:466$476 ($eq).
Removed top 11 bits (of 20) from mux cell module159.$ternary$rtl.v:474$482 ($mux).
Removed top 1 bits (of 2) from port A of cell module159.$lt$rtl.v:476$488 ($lt).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:478$491 ($mux).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:478$493 ($mux).
Removed top 13 bits (of 19) from mux cell module159.$ternary$rtl.v:480$501 ($mux).
Removed top 11 bits (of 14) from port A of cell module159.$neg$rtl.v:492$510 ($neg).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:493$513 ($mux).
Removed top 7 bits (of 22) from port A of cell module159.$neg$rtl.v:495$520 ($neg).
Removed top 2 bits (of 22) from mux cell module159.$ternary$rtl.v:495$518 ($mux).
Removed top 2 bits (of 22) from port A of cell module159.$xor$rtl.v:495$521 ($xor).
Removed top 15 bits (of 16) from port B of cell module159.$xor$rtl.v:500$529 ($xor).
Removed top 11 bits (of 15) from mux cell module159.$ternary$rtl.v:500$532 ($mux).
Removed top 18 bits (of 19) from port B of cell module159.$sshl$rtl.v:510$533 ($sshl).
Removed top 13 bits (of 22) from mux cell module159.$ternary$rtl.v:511$535 ($mux).
Removed top 28 bits (of 29) from port B of cell module159.$xnor$rtl.v:517$539 ($xnor).
Removed top 23 bits (of 29) from port Y of cell module159.$xnor$rtl.v:517$539 ($xnor).
Removed top 11 bits (of 19) from mux cell module159.$ternary$rtl.v:528$542 ($mux).
Removed top 17 bits (of 21) from port A of cell module159.$xnor$rtl.v:528$543 ($xnor).
Removed top 11 bits (of 19) from port A of cell module159.$shl$rtl.v:528$544 ($shl).
Removed top 15 bits (of 16) from mux cell module159.$procmux$1171 ($mux).
Removed top 15 bits (of 17) from FF cell module159.$procdff$1381 ($dff).
Removed top 15 bits (of 17) from port B of cell module159.$shl$rtl.v:437$441 ($shl).
Removed top 15 bits (of 17) from port B of cell module159.$eq$rtl.v:466$476 ($eq).
Removed top 15 bits (of 17) from wire module159.$0\reg170[16:0].
Removed top 22 bits (of 30) from wire module159.$add$rtl.v:433$433_Y.
Removed top 20 bits (of 21) from wire module159.$eq$rtl.v:481$502_Y.
Removed top 18 bits (of 19) from wire module159.$ge$rtl.v:445$449_Y.
Removed top 4 bits (of 5) from wire module159.$le$rtl.v:445$450_Y.
Removed top 21 bits (of 22) from wire module159.$logic_not$rtl.v:410$375_Y.
Removed top 16 bits (of 17) from wire module159.$logic_not$rtl.v:418$392_Y.
Removed top 6 bits (of 7) from wire module159.$logic_not$rtl.v:421$396_Y.
Removed top 19 bits (of 20) from wire module159.$logic_not$rtl.v:474$480_Y.
Removed top 1 bits (of 2) from wire module159.$logic_not$rtl.v:476$487_Y.
Removed top 15 bits (of 16) from wire module159.$logic_not$rtl.v:491$509_Y.
Removed top 15 bits (of 16) from wire module159.$logic_not$rtl.v:500$528_Y.
Removed top 20 bits (of 21) from wire module159.$logic_or$rtl.v:459$465_Y.
Removed top 18 bits (of 19) from wire module159.$lt$rtl.v:476$488_Y.
Removed top 1 bits (of 8) from wire module159.$mul$rtl.v:491$508_Y.
Removed top 15 bits (of 16) from wire module159.$procmux$1171_Y.
Removed top 29 bits (of 30) from wire module159.$reduce_or$rtl.v:433$432_Y.
Removed top 1 bits (of 2) from wire module159.$reduce_or$rtl.v:452$462_Y.
Removed top 18 bits (of 19) from wire module159.$reduce_xnor$rtl.v:480$499_Y.
Removed top 15 bits (of 16) from wire module159.$reduce_xor$rtl.v:486$504_Y.
Removed top 14 bits (of 15) from wire module159.$reduce_xor$rtl.v:500$530_Y.
Removed top 2 bits (of 22) from wire module159.$ternary$rtl.v:417$382_Y.
Removed top 3 bits (of 8) from wire module159.$ternary$rtl.v:421$394_Y.
Removed top 2 bits (of 22) from wire module159.$ternary$rtl.v:436$444_Y.
Removed top 13 bits (of 19) from wire module159.$ternary$rtl.v:445$448_Y.
Removed top 13 bits (of 20) from wire module159.$ternary$rtl.v:450$461_Y.
Removed top 11 bits (of 20) from wire module159.$ternary$rtl.v:474$482_Y.
Removed top 2 bits (of 22) from wire module159.$ternary$rtl.v:478$491_Y.
Removed top 2 bits (of 22) from wire module159.$ternary$rtl.v:478$493_Y.
Removed top 13 bits (of 19) from wire module159.$ternary$rtl.v:480$501_Y.
Removed top 2 bits (of 8) from wire module159.$ternary$rtl.v:491$507_Y.
Removed top 2 bits (of 22) from wire module159.$ternary$rtl.v:493$513_Y.
Removed top 2 bits (of 22) from wire module159.$ternary$rtl.v:495$518_Y.
Removed top 11 bits (of 15) from wire module159.$ternary$rtl.v:500$532_Y.
Removed top 13 bits (of 22) from wire module159.$ternary$rtl.v:511$535_Y.
Removed top 11 bits (of 19) from wire module159.$ternary$rtl.v:528$542_Y.
Removed top 9 bits (of 22) from wire module159.$xnor$rtl.v:430$429_Y.
Removed top 23 bits (of 29) from wire module159.$xnor$rtl.v:517$539_Y.
Removed top 13 bits (of 20) from wire module159.$xor$rtl.v:450$458_Y.
Removed top 18 bits (of 19) from wire module159.wire165.
Removed top 2 bits (of 22) from wire module159.wire167.
Removed top 20 bits (of 21) from port A of cell module40.$xnor$rtl.v:609$590 ($xnor).
Removed top 19 bits (of 21) from port Y of cell module40.$xnor$rtl.v:609$590 ($xnor).
Removed top 10 bits (of 20) from mux cell module40.$ternary$rtl.v:620$598 ($mux).
Removed top 14 bits (of 22) from mux cell module40.$ternary$rtl.v:622$608 ($mux).
Removed top 10 bits (of 13) from mux cell module40.$ternary$rtl.v:625$614 ($mux).
Removed top 3 bits (of 13) from mux cell module40.$ternary$rtl.v:629$618 ($mux).
Removed top 3 bits (of 13) from port A of cell module40.$xnor$rtl.v:629$619 ($xnor).
Removed top 2 bits (of 10) from port A of cell module40.$sshl$rtl.v:634$621 ($sshl).
Removed top 2 bits (of 10) from mux cell module40.$ternary$rtl.v:633$628 ($mux).
Removed top 2 bits (of 10) from mux cell module40.$ternary$rtl.v:641$635 ($mux).
Removed top 2 bits (of 15) from mux cell module40.$ternary$rtl.v:643$644 ($mux).
Removed top 9 bits (of 15) from mux cell module40.$ternary$rtl.v:644$647 ($mux).
Removed top 2 bits (of 15) from port A of cell module40.$ne$rtl.v:644$648 ($ne).
Removed top 7 bits (of 15) from port B of cell module40.$ne$rtl.v:644$648 ($ne).
Removed top 15 bits (of 16) from port B of cell module40.$or$rtl.v:645$654 ($or).
Removed top 14 bits (of 22) from port Y of cell module40.$or$rtl.v:645$654 ($or).
Removed top 14 bits (of 22) from port B of cell module40.$add$rtl.v:645$655 ($add).
Removed top 14 bits (of 22) from port A of cell module40.$xor$rtl.v:645$656 ($xor).
Removed top 21 bits (of 22) from port A of cell module40.$or$rtl.v:645$659 ($or).
Removed top 14 bits (of 22) from port Y of cell module40.$or$rtl.v:645$659 ($or).
Removed top 14 bits (of 22) from port B of cell module40.$or$rtl.v:645$659 ($or).
Removed top 8 bits (of 11) from mux cell module40.$ternary$rtl.v:658$672 ($mux).
Removed top 26 bits (of 39) from port B of cell module40.$sub$rtl.v:660$673 ($sub).
Removed top 9 bits (of 22) from mux cell module40.$ternary$rtl.v:662$679 ($mux).
Removed top 2 bits (of 10) from mux cell module40.$ternary$rtl.v:663$682 ($mux).
Removed top 16 bits (of 17) from port B of cell module40.$ne$rtl.v:664$688 ($ne).
Removed top 7 bits (of 13) from mux cell module40.$ternary$rtl.v:664$691 ($mux).
Removed top 21 bits (of 22) from port B of cell module40.$gt$rtl.v:676$695 ($gt).
Removed top 6 bits (of 16) from mux cell module40.$ternary$rtl.v:676$698 ($mux).
Removed top 1 bits (of 16) from port A of cell module40.$sub$rtl.v:676$699 ($sub).
Removed top 6 bits (of 16) from port B of cell module40.$sub$rtl.v:676$699 ($sub).
Removed top 14 bits (of 22) from mux cell module40.$ternary$rtl.v:684$714 ($mux).
Removed top 15 bits (of 22) from mux cell module40.$ternary$rtl.v:689$727 ($mux).
Removed top 10 bits (of 13) from mux cell module40.$ternary$rtl.v:690$732 ($mux).
Removed top 5 bits (of 6) from port A of cell module40.$neg$rtl.v:696$742 ($neg).
Removed top 14 bits (of 15) from mux cell module40.$procmux$1065 ($mux).
Removed top 14 bits (of 15) from FF cell module40.$procdff$1358 ($dff).
Removed top 7 bits (of 8) from FF cell module40.$procdff$1360 ($dff).
Removed top 3 bits (of 5) from FF cell module40.$procdff$1361 ($dff).
Removed top 3 bits (of 13) from mux cell module40.$ternary$rtl.v:619$593 ($mux).
Removed top 10 bits (of 20) from mux cell module40.$ternary$rtl.v:620$596 ($mux).
Removed top 14 bits (of 22) from mux cell module40.$ternary$rtl.v:645$658 ($mux).
Removed top 7 bits (of 13) from mux cell module40.$ternary$rtl.v:661$676 ($mux).
Removed top 14 bits (of 15) from port A of cell module40.$sub$rtl.v:676$699 ($sub).
Removed top 1 bits (of 2) from port B of cell module40.$xor$rtl.v:695$737 ($xor).
Removed top 14 bits (of 22) from port Y of cell module40.$xor$rtl.v:645$656 ($xor).
Removed top 14 bits (of 22) from port B of cell module40.$xor$rtl.v:645$656 ($xor).
Removed top 14 bits (of 22) from port Y of cell module40.$add$rtl.v:645$655 ($add).
Removed top 14 bits (of 22) from port A of cell module40.$add$rtl.v:645$655 ($add).
Removed top 14 bits (of 15) from wire module40.$0\reg142[14:0].
Removed top 14 bits (of 22) from wire module40.$add$rtl.v:645$655_Y.
Removed top 15 bits (of 16) from wire module40.$gt$rtl.v:676$695_Y.
Removed top 12 bits (of 13) from wire module40.$logic_and$rtl.v:664$689_Y.
Removed top 12 bits (of 13) from wire module40.$logic_and$rtl.v:690$730_Y.
Removed top 6 bits (of 7) from wire module40.$logic_not$rtl.v:692$736_Y.
Removed top 21 bits (of 22) from wire module40.$ne$rtl.v:644$648_Y.
Removed top 16 bits (of 22) from wire module40.$or$rtl.v:645$654_Y.
Removed top 12 bits (of 13) from wire module40.$reduce_or$rtl.v:661$674_Y.
Removed top 10 bits (of 11) from wire module40.$reduce_xnor$rtl.v:658$670_Y.
Removed top 3 bits (of 13) from wire module40.$ternary$rtl.v:619$593_Y.
Removed top 10 bits (of 20) from wire module40.$ternary$rtl.v:620$596_Y.
Removed top 3 bits (of 13) from wire module40.$ternary$rtl.v:629$618_Y.
Removed top 2 bits (of 10) from wire module40.$ternary$rtl.v:633$628_Y.
Removed top 2 bits (of 10) from wire module40.$ternary$rtl.v:641$635_Y.
Removed top 14 bits (of 22) from wire module40.$ternary$rtl.v:645$658_Y.
Removed top 8 bits (of 11) from wire module40.$ternary$rtl.v:658$672_Y.
Removed top 7 bits (of 13) from wire module40.$ternary$rtl.v:661$676_Y.
Removed top 9 bits (of 22) from wire module40.$ternary$rtl.v:662$679_Y.
Removed top 2 bits (of 10) from wire module40.$ternary$rtl.v:663$682_Y.
Removed top 7 bits (of 13) from wire module40.$ternary$rtl.v:664$691_Y.
Removed top 6 bits (of 16) from wire module40.$ternary$rtl.v:676$698_Y.
Removed top 14 bits (of 22) from wire module40.$ternary$rtl.v:684$714_Y.
Removed top 15 bits (of 22) from wire module40.$ternary$rtl.v:689$727_Y.
Removed top 10 bits (of 13) from wire module40.$ternary$rtl.v:690$732_Y.
Removed top 19 bits (of 21) from wire module40.$xnor$rtl.v:609$590_Y.
Removed top 14 bits (of 22) from wire module40.$xor$rtl.v:645$656_Y.
Removed top 15 bits (of 16) from port A of cell module46.$xor$rtl.v:902$881 ($xor).
Removed top 15 bits (of 16) from port Y of cell module46.$xor$rtl.v:902$881 ($xor).
Removed top 31 bits (of 32) from port A of cell module46.$sshl$rtl.v:916$893 ($sshl).
Removed top 24 bits (of 32) from mux cell module46.$ternary$rtl.v:916$895 ($mux).
Removed top 19 bits (of 20) from mux cell module46.$ternary$rtl.v:923$904 ($mux).
Removed top 19 bits (of 20) from port A of cell module46.$mul$rtl.v:924$909 ($mul).
Removed top 1 bits (of 20) from port B of cell module46.$mul$rtl.v:924$909 ($mul).
Removed top 3 bits (of 19) from mux cell module46.$ternary$rtl.v:924$907 ($mux).
Removed top 19 bits (of 20) from port A of cell module46.$xor$rtl.v:924$910 ($xor).
Removed top 19 bits (of 20) from port A of cell module46.$lt$rtl.v:941$916 ($lt).
Removed top 15 bits (of 16) from port A of cell module46.$neg$rtl.v:941$917 ($neg).
Removed top 15 bits (of 16) from port A of cell module46.$mul$rtl.v:941$918 ($mul).
Removed top 14 bits (of 16) from port B of cell module46.$and$rtl.v:941$919 ($and).
Removed top 3 bits (of 16) from port Y of cell module46.$and$rtl.v:941$919 ($and).
Removed top 3 bits (of 16) from port A of cell module46.$and$rtl.v:941$919 ($and).
Removed top 12 bits (of 20) from mux cell module46.$ternary$rtl.v:942$922 ($mux).
Removed top 9 bits (of 12) from mux cell module46.$ternary$rtl.v:945$932 ($mux).
Removed top 13 bits (of 17) from mux cell module46.$ternary$rtl.v:949$935 ($mux).
Removed top 7 bits (of 20) from port A of cell module46.$not$rtl.v:969$945 ($not).
Removed top 7 bits (of 20) from port Y of cell module46.$not$rtl.v:969$945 ($not).
Removed top 13 bits (of 15) from mux cell module46.$ternary$rtl.v:972$955 ($mux).
Removed top 5 bits (of 17) from mux cell module46.$ternary$rtl.v:974$961 ($mux).
Removed top 5 bits (of 17) from port A of cell module46.$sshl$rtl.v:974$962 ($sshl).
Removed top 9 bits (of 10) from port A of cell module46.$neg$rtl.v:983$965 ($neg).
Removed top 8 bits (of 9) from port B of cell module46.$le$rtl.v:989$973 ($le).
Removed top 5 bits (of 17) from port Y of cell module46.$or$rtl.v:987$969 ($or).
Removed top 11 bits (of 23) from mux cell module46.$ternary$rtl.v:990$980 ($mux).
Removed top 7 bits (of 15) from mux cell module46.$procmux$1025 ($mux).
Removed top 6 bits (of 17) from mux cell module46.$procmux$1031 ($mux).
Removed top 11 bits (of 12) from FF cell module46.$procdff$1334 ($dff).
Removed top 7 bits (of 8) from FF cell module46.$procdff$1337 ($dff).
Removed top 19 bits (of 21) from FF cell module46.$procdff$1349 ($dff).
Removed top 8 bits (of 16) from FF cell module46.$procdff$1350 ($dff).
Removed top 17 bits (of 18) from FF cell module46.$procdff$1351 ($dff).
Removed top 24 bits (of 32) from port Y of cell module46.$sshl$rtl.v:916$893 ($sshl).
Removed top 8 bits (of 16) from mux cell module46.$ternary$rtl.v:924$907 ($mux).
Removed top 3 bits (of 16) from port Y of cell module46.$mul$rtl.v:941$918 ($mul).
Removed top 17 bits (of 18) from mux cell module46.$ternary$rtl.v:942$926 ($mux).
Removed top 11 bits (of 22) from mux cell module46.$ternary$rtl.v:988$976 ($mux).
Removed top 11 bits (of 12) from FF cell module46.$procdff$1336 ($dff).
Removed cell module46.$procdff$1349 ($dff).
Removed top 17 bits (of 18) from wire module46.$0\reg53[17:0].
Removed top 11 bits (of 12) from wire module46.$0\reg83[11:0].
Removed top 3 bits (of 16) from wire module46.$and$rtl.v:941$919_Y.
Removed top 16 bits (of 17) from wire module46.$ne$rtl.v:974$960_Y.
Removed top 7 bits (of 20) from wire module46.$not$rtl.v:969$945_Y.
Removed top 12 bits (of 20) from wire module46.$pos$rtl.v:924$908_Y.
Removed top 7 bits (of 15) from wire module46.$procmux$1025_Y.
Removed top 6 bits (of 17) from wire module46.$procmux$1031_Y.
Removed top 17 bits (of 18) from wire module46.$reduce_xor$rtl.v:942$925_Y.
Removed top 8 bits (of 9) from wire module46.$reduce_xor$rtl.v:989$972_Y.
Removed top 24 bits (of 32) from wire module46.$sshl$rtl.v:916$893_Y.
Removed top 12 bits (of 20) from wire module46.$ternary$rtl.v:942$922_Y.
Removed top 9 bits (of 12) from wire module46.$ternary$rtl.v:945$932_Y.
Removed top 13 bits (of 17) from wire module46.$ternary$rtl.v:949$935_Y.
Removed top 11 bits (of 22) from wire module46.$ternary$rtl.v:988$976_Y.
Removed top 15 bits (of 16) from wire module46.wire52.
Removed top 3 bits (of 4) from wire module46.wire57.
Removed top 2 bits (of 3) from wire module46.wire59.
Removed top 19 bits (of 20) from wire module46.wire61.
Removed top 21 bits (of 22) from wire module46.wire64.
Removed top 17 bits (of 22) from port B of cell module88.$xor$rtl.v:792$791 ($xor).
Removed top 10 bits (of 16) from mux cell module88.$ternary$rtl.v:791$806 ($mux).
Removed top 8 bits (of 13) from port A of cell module88.$mul$rtl.v:801$820 ($mul).
Removed top 13 bits (of 22) from mux cell module88.$ternary$rtl.v:798$817 ($mux).
Removed top 14 bits (of 22) from mux cell module88.$ternary$rtl.v:804$826 ($mux).
Removed top 14 bits (of 22) from port A of cell module88.$sub$rtl.v:804$827 ($sub).
Removed top 15 bits (of 22) from port B of cell module88.$sub$rtl.v:804$827 ($sub).
Removed top 5 bits (of 12) from port B of cell module88.$xnor$rtl.v:808$838 ($xnor).
Removed top 10 bits (of 15) from mux cell module88.$ternary$rtl.v:810$843 ($mux).
Removed top 9 bits (of 22) from mux cell module88.$ternary$rtl.v:812$849 ($mux).
Removed top 7 bits (of 22) from mux cell module88.$ternary$rtl.v:812$854 ($mux).
Removed top 9 bits (of 22) from mux cell module88.$ternary$rtl.v:812$851 ($mux).
Removed top 5 bits (of 12) from port A of cell module88.$ne$rtl.v:813$859 ($ne).
Removed top 14 bits (of 15) from port B of cell module88.$ne$rtl.v:813$859 ($ne).
Removed top 19 bits (of 21) from port A of cell module88.$gt$rtl.v:813$860 ($gt).
Removed top 10 bits (of 16) from port Y of cell module88.$neg$rtl.v:791$804 ($neg).
Removed top 10 bits (of 16) from port A of cell module88.$neg$rtl.v:791$804 ($neg).
Removed top 10 bits (of 16) from mux cell module88.$ternary$rtl.v:791$803 ($mux).
Removed top 10 bits (of 16) from mux cell module88.$ternary$rtl.v:791$800 ($mux).
Removed top 10 bits (of 16) from port Y of cell module88.$sshr$rtl.v:791$801 ($sshr).
Removed top 10 bits (of 16) from wire module88.$neg$rtl.v:791$804_Y.
Removed top 7 bits (of 8) from wire module88.$reduce_or$rtl.v:793$792_Y.
Removed top 10 bits (of 16) from wire module88.$sshr$rtl.v:791$801_Y.
Removed top 10 bits (of 16) from wire module88.$ternary$rtl.v:791$800_Y.
Removed top 10 bits (of 16) from wire module88.$ternary$rtl.v:791$806_Y.
Removed top 14 bits (of 22) from wire module88.$ternary$rtl.v:804$826_Y.
Removed top 10 bits (of 15) from wire module88.$ternary$rtl.v:810$843_Y.
Removed top 9 bits (of 22) from wire module88.$ternary$rtl.v:812$849_Y.
Removed top 9 bits (of 22) from wire module88.$ternary$rtl.v:812$851_Y.
Removed top 14 bits (of 15) from wire module88.wire100.
Removed top 19 bits (of 20) from wire module88.wire101.
Removed top 12 bits (of 13) from wire module88.wire103.
Removed top 6 bits (of 13) from wire module88.wire104.
Removed top 5 bits (of 12) from wire module88.wire95.
Removed top 14 bits (of 15) from wire module88.wire96.
Removed top 11 bits (of 12) from port A of cell top.$xnor$rtl.v:121$3 ($xnor).
Removed top 5 bits (of 13) from port Y of cell top.$and$rtl.v:126$7 ($and).
Removed top 9 bits (of 21) from port B of cell top.$mul$rtl.v:145$20 ($mul).
Removed top 8 bits (of 21) from port A of cell top.$add$rtl.v:145$21 ($add).
Removed top 8 bits (of 21) from port Y of cell top.$add$rtl.v:145$21 ($add).
Removed top 8 bits (of 21) from port B of cell top.$add$rtl.v:145$21 ($add).
Removed top 11 bits (of 31) from mux cell top.$ternary$rtl.v:162$38 ($mux).
Removed top 2 bits (of 10) from port A of cell top.$not$rtl.v:171$57 ($not).
Removed top 7 bits (of 8) from port A of cell top.$xor$rtl.v:171$56 ($xor).
Removed top 3 bits (of 24) from port B of cell top.$ne$rtl.v:175$73 ($ne).
Removed top 3 bits (of 4) from port A of cell top.$not$rtl.v:175$74 ($not).
Removed top 3 bits (of 13) from mux cell top.$ternary$rtl.v:185$87 ($mux).
Removed top 2 bits (of 10) from port B of cell top.$le$rtl.v:186$88 ($le).
Removed top 8 bits (of 9) from port A of cell top.$or$rtl.v:198$99 ($or).
Removed top 8 bits (of 9) from port B of cell top.$or$rtl.v:198$99 ($or).
Removed top 8 bits (of 9) from port Y of cell top.$or$rtl.v:198$99 ($or).
Removed top 1 bits (of 9) from port A of cell top.$le$rtl.v:198$100 ($le).
Removed top 8 bits (of 9) from port B of cell top.$le$rtl.v:198$100 ($le).
Removed top 6 bits (of 13) from mux cell top.$ternary$rtl.v:207$117 ($mux).
Removed top 14 bits (of 16) from port B of cell top.$or$rtl.v:206$109 ($or).
Removed top 7 bits (of 16) from port Y of cell top.$or$rtl.v:206$109 ($or).
Removed top 2 bits (of 13) from port A of cell top.$add$rtl.v:213$120 ($add).
Removed top 1 bits (of 13) from port Y of cell top.$add$rtl.v:213$120 ($add).
Removed top 1 bits (of 13) from port A of cell top.$or$rtl.v:213$123 ($or).
Removed top 12 bits (of 13) from port B of cell top.$or$rtl.v:213$123 ($or).
Removed top 1 bits (of 13) from port Y of cell top.$or$rtl.v:213$123 ($or).
Removed top 1 bits (of 13) from mux cell top.$ternary$rtl.v:213$125 ($mux).
Removed top 10 bits (of 11) from port A of cell top.$sshr$rtl.v:227$139 ($sshr).
Removed top 18 bits (of 21) from port A of cell top.$ge$rtl.v:223$130 ($ge).
Removed top 8 bits (of 12) from port A of cell top.$xor$rtl.v:225$134 ($xor).
Removed top 7 bits (of 11) from port Y of cell top.$shr$rtl.v:228$147 ($shr).
Removed top 2 bits (of 22) from port Y of cell top.$not$rtl.v:229$148 ($not).
Removed top 2 bits (of 22) from port A of cell top.$not$rtl.v:229$148 ($not).
Removed top 11 bits (of 21) from mux cell top.$ternary$rtl.v:236$159 ($mux).
Removed top 9 bits (of 10) from port A of cell top.$neg$rtl.v:238$164 ($neg).
Removed top 11 bits (of 21) from port A of cell top.$xor$rtl.v:236$160 ($xor).
Removed top 8 bits (of 21) from port Y of cell top.$xor$rtl.v:236$160 ($xor).
Removed top 6 bits (of 20) from mux cell top.$ternary$rtl.v:240$171 ($mux).
Removed top 8 bits (of 9) from port A of cell top.$mul$rtl.v:242$172 ($mul).
Removed top 8 bits (of 20) from port Y of cell top.$mul$rtl.v:242$172 ($mul).
Removed top 6 bits (of 20) from port A of cell top.$ge$rtl.v:242$179 ($ge).
Removed top 10 bits (of 20) from port A of cell top.$and$rtl.v:242$176 ($and).
Removed top 19 bits (of 20) from port B of cell top.$and$rtl.v:242$176 ($and).
Removed top 10 bits (of 20) from port Y of cell top.$and$rtl.v:242$176 ($and).
Removed top 10 bits (of 19) from port A of cell top.$xor$rtl.v:257$192 ($xor).
Removed top 11 bits (of 19) from port B of cell top.$xor$rtl.v:257$192 ($xor).
Removed top 10 bits (of 19) from port Y of cell top.$xor$rtl.v:257$192 ($xor).
Removed top 7 bits (of 19) from mux cell top.$ternary$rtl.v:257$194 ($mux).
Removed top 18 bits (of 19) from mux cell top.$ternary$rtl.v:262$202 ($mux).
Removed top 17 bits (of 25) from mux cell top.$ternary$rtl.v:272$210 ($mux).
Removed top 24 bits (of 25) from port B of cell top.$sub$rtl.v:273$212 ($sub).
Removed top 17 bits (of 25) from port A of cell top.$xnor$rtl.v:273$213 ($xnor).
Removed top 18 bits (of 19) from mux cell top.$ternary$rtl.v:274$216 ($mux).
Removed top 2 bits (of 19) from mux cell top.$ternary$rtl.v:274$219 ($mux).
Removed top 6 bits (of 10) from port A of cell top.$neg$rtl.v:284$231 ($neg).
Removed top 14 bits (of 16) from port A of cell top.$sub$rtl.v:286$234 ($sub).
Removed top 5 bits (of 22) from mux cell top.$ternary$rtl.v:290$243 ($mux).
Removed top 5 bits (of 9) from port B of cell top.$or$rtl.v:295$244 ($or).
Removed top 1 bits (of 22) from mux cell top.$ternary$rtl.v:313$273 ($mux).
Removed top 7 bits (of 20) from mux cell top.$ternary$rtl.v:316$284 ($mux).
Removed top 13 bits (of 14) from mux cell top.$ternary$rtl.v:323$295 ($mux).
Removed top 15 bits (of 16) from mux cell top.$procmux$1200 ($mux).
Removed top 17 bits (of 22) from mux cell top.$procmux$1194 ($mux).
Removed top 2 bits (of 19) from mux cell top.$procmux$1209 ($mux).
Removed top 4 bits (of 21) from mux cell top.$procmux$1215 ($mux).
Removed top 2 bits (of 19) from mux cell top.$procmux$1227 ($mux).
Removed top 20 bits (of 21) from mux cell top.$procmux$1255 ($mux).
Removed top 4 bits (of 9) from mux cell top.$procmux$1293 ($mux).
Removed top 8 bits (of 9) from mux cell top.$procmux$1297 ($mux).
Removed top 4 bits (of 9) from mux cell top.$procmux$1299 ($mux).
Removed top 19 bits (of 20) from FF cell top.$procdff$1384 ($dff).
Removed top 4 bits (of 9) from FF cell top.$procdff$1392 ($dff).
Removed top 7 bits (of 8) from FF cell top.$procdff$1401 ($dff).
Removed top 3 bits (of 11) from FF cell top.$procdff$1412 ($dff).
Removed top 10 bits (of 11) from FF cell top.$procdff$1413 ($dff).
Removed top 16 bits (of 20) from FF cell top.$procdff$1414 ($dff).
Removed top 12 bits (of 13) from FF cell top.$procdff$1415 ($dff).
Removed top 6 bits (of 9) from FF cell top.$procdff$1416 ($dff).
Removed top 11 bits (of 12) from FF cell top.$procdff$1417 ($dff).
Removed top 3 bits (of 4) from port A of cell top.$shr$rtl.v:120$4 ($shr).
Removed top 11 bits (of 12) from port B of cell top.$shr$rtl.v:120$4 ($shr).
Removed top 11 bits (of 12) from port B of cell top.$mul$rtl.v:145$20 ($mul).
Removed top 8 bits (of 21) from port Y of cell top.$mul$rtl.v:145$20 ($mul).
Removed top 12 bits (of 13) from port A of cell top.$add$rtl.v:145$21 ($add).
Removed top 10 bits (of 23) from mux cell top.$ternary$rtl.v:161$32 ($mux).
Removed top 6 bits (of 9) from mux cell top.$ternary$rtl.v:166$41 ($mux).
Removed top 12 bits (of 13) from port B of cell top.$xor$rtl.v:167$47 ($xor).
Removed top 11 bits (of 13) from port A of cell top.$not$rtl.v:167$48 ($not).
Converting cell top.$not$rtl.v:167$48 ($not) from signed to unsigned.
Removed top 1 bits (of 2) from port A of cell top.$not$rtl.v:167$48 ($not).
Removed top 2 bits (of 12) from mux cell top.$ternary$rtl.v:172$60 ($mux).
Removed top 7 bits (of 20) from mux cell top.$ternary$rtl.v:174$66 ($mux).
Removed top 5 bits (of 7) from mux cell top.$ternary$rtl.v:180$77 ($mux).
Removed top 10 bits (of 11) from port B of cell top.$shl$rtl.v:183$79 ($shl).
Removed top 3 bits (of 13) from mux cell top.$ternary$rtl.v:185$85 ($mux).
Removed top 5 bits (of 9) from mux cell top.$ternary$rtl.v:193$94 ($mux).
Removed top 5 bits (of 9) from port A of cell top.$sshl$rtl.v:193$95 ($sshl).
Removed top 6 bits (of 20) from port B of cell top.$sshl$rtl.v:197$97 ($sshl).
Removed top 3 bits (of 11) from port A of cell top.$add$rtl.v:197$98 ($add).
Removed top 5 bits (of 9) from port A of cell top.$or$rtl.v:206$109 ($or).
Converting cell top.$or$rtl.v:206$109 ($or) from signed to unsigned.
Removed top 5 bits (of 9) from port Y of cell top.$or$rtl.v:206$109 ($or).
Removed top 1 bits (of 4) from port A of cell top.$or$rtl.v:206$109 ($or).
Removed top 1 bits (of 2) from port B of cell top.$or$rtl.v:206$109 ($or).
Removed top 1 bits (of 4) from port Y of cell top.$or$rtl.v:206$109 ($or).
Removed top 3 bits (of 11) from port B of cell top.$add$rtl.v:213$120 ($add).
Removed top 10 bits (of 11) from port B of cell top.$sshr$rtl.v:227$139 ($sshr).
Removed top 10 bits (of 11) from port A of cell top.$sshl$rtl.v:226$136 ($sshl).
Removed top 10 bits (of 11) from port A of cell top.$gt$rtl.v:227$137 ($gt).
Removed top 10 bits (of 11) from port A of cell top.$le$rtl.v:239$166 ($le).
Removed top 10 bits (of 11) from port B of cell top.$le$rtl.v:239$166 ($le).
Removed top 1 bits (of 2) from port A of cell top.$or$rtl.v:251$182 ($or).
Removed top 11 bits (of 12) from port B of cell top.$or$rtl.v:251$182 ($or).
Removed top 11 bits (of 12) from port Y of cell top.$or$rtl.v:251$182 ($or).
Removed top 3 bits (of 12) from mux cell top.$ternary$rtl.v:257$194 ($mux).
Removed top 4 bits (of 22) from port Y of cell top.$neg$rtl.v:290$240 ($neg).
Removed top 4 bits (of 22) from port A of cell top.$neg$rtl.v:290$240 ($neg).
Removed top 4 bits (of 9) from port A of cell top.$or$rtl.v:295$244 ($or).
Removed top 4 bits (of 9) from port Y of cell top.$or$rtl.v:295$244 ($or).
Removed top 12 bits (of 13) from port B of cell top.$xnor$rtl.v:301$247 ($xnor).
Removed top 10 bits (of 19) from port A of cell top.$or$rtl.v:303$251 ($or).
Removed top 11 bits (of 12) from mux cell top.$ternary$rtl.v:307$264 ($mux).
Removed top 11 bits (of 12) from port A of cell top.$xor$rtl.v:316$277 ($xor).
Removed top 16 bits (of 20) from port B of cell top.$xor$rtl.v:316$277 ($xor).
Removed top 16 bits (of 20) from port Y of cell top.$xor$rtl.v:316$277 ($xor).
Removed top 11 bits (of 12) from port A of cell top.$or$rtl.v:320$285 ($or).
Removed top 4 bits (of 12) from port Y of cell top.$or$rtl.v:320$285 ($or).
Removed top 10 bits (of 11) from port A of cell top.$sub$rtl.v:321$286 ($sub).
Removed top 2 bits (of 3) from mux cell top.$procmux$1323 ($mux).
Removed cell top.$procdff$1416 ($dff).
Removed top 3 bits (of 13) from mux cell top.$ternary$rtl.v:185$82 ($mux).
Removed top 4 bits (of 22) from mux cell top.$ternary$rtl.v:290$239 ($mux).
Removed top 4 bits (of 9) from wire top.$0\reg19[8:0].
Removed top 19 bits (of 20) from wire top.$0\reg207[19:0].
Removed top 7 bits (of 8) from wire top.$0\reg28[7:0].
Removed top 3 bits (of 11) from wire top.$0\reg7[10:0].
Removed top 8 bits (of 21) from wire top.$add$rtl.v:145$21_Y.
Removed top 1 bits (of 13) from wire top.$add$rtl.v:213$120_Y.
Removed top 10 bits (of 20) from wire top.$and$rtl.v:242$176_Y.
Removed top 11 bits (of 12) from wire top.$eq$rtl.v:121$2_Y.
Removed top 8 bits (of 9) from wire top.$ge$rtl.v:181$78_Y.
Removed top 21 bits (of 22) from wire top.$ge$rtl.v:242$179_Y.
Removed top 12 bits (of 13) from wire top.$gt$rtl.v:213$122_Y.
Removed top 10 bits (of 11) from wire top.$gt$rtl.v:227$137_Y.
Removed top 20 bits (of 21) from wire top.$le$rtl.v:199$102_Y.
Removed top 9 bits (of 10) from wire top.$le$rtl.v:239$166_Y.
Removed top 12 bits (of 13) from wire top.$logic_and$rtl.v:207$116_Y.
Removed top 24 bits (of 25) from wire top.$logic_not$rtl.v:272$207_Y.
Removed top 8 bits (of 21) from wire top.$mul$rtl.v:145$20_Y.
Removed top 8 bits (of 20) from wire top.$mul$rtl.v:242$172_Y.
Removed top 3 bits (of 4) from wire top.$ne$rtl.v:175$73_Y.
Removed top 19 bits (of 20) from wire top.$ne$rtl.v:239$169_Y.
Removed top 4 bits (of 22) from wire top.$neg$rtl.v:290$240_Y.
Removed top 2 bits (of 22) from wire top.$not$rtl.v:229$148_Y.
Removed top 8 bits (of 9) from wire top.$or$rtl.v:198$99_Y.
Removed top 13 bits (of 16) from wire top.$or$rtl.v:206$109_Y.
Removed top 1 bits (of 13) from wire top.$or$rtl.v:213$123_Y.
Removed top 4 bits (of 12) from wire top.$or$rtl.v:320$285_Y.
Removed top 17 bits (of 22) from wire top.$procmux$1194_Y.
Removed top 2 bits (of 19) from wire top.$procmux$1209_Y.
Removed top 4 bits (of 21) from wire top.$procmux$1215_Y.
Removed top 2 bits (of 19) from wire top.$procmux$1227_Y.
Removed top 20 bits (of 21) from wire top.$procmux$1255_Y.
Removed top 4 bits (of 9) from wire top.$procmux$1293_Y.
Removed top 8 bits (of 9) from wire top.$procmux$1297_Y.
Removed top 2 bits (of 3) from wire top.$procmux$1323_Y.
Removed top 19 bits (of 20) from wire top.$reduce_or$rtl.v:187$90_Y.
Removed top 12 bits (of 13) from wire top.$reduce_xnor$rtl.v:151$23_Y.
Removed top 2 bits (of 12) from wire top.$ternary$rtl.v:172$60_Y.
Removed top 7 bits (of 20) from wire top.$ternary$rtl.v:174$66_Y.
Removed top 5 bits (of 7) from wire top.$ternary$rtl.v:180$77_Y.
Removed top 3 bits (of 13) from wire top.$ternary$rtl.v:185$82_Y.
Removed top 3 bits (of 13) from wire top.$ternary$rtl.v:185$85_Y.
Removed top 3 bits (of 13) from wire top.$ternary$rtl.v:185$87_Y.
Removed top 5 bits (of 9) from wire top.$ternary$rtl.v:193$94_Y.
Removed top 6 bits (of 13) from wire top.$ternary$rtl.v:207$117_Y.
Removed top 4 bits (of 22) from wire top.$ternary$rtl.v:290$239_Y.
Removed top 11 bits (of 12) from wire top.$ternary$rtl.v:307$264_Y.
Removed top 13 bits (of 14) from wire top.$ternary$rtl.v:323$295_Y.
Removed top 16 bits (of 20) from wire top.$xor$rtl.v:316$277_Y.
Removed top 13 bits (of 14) from wire top.wire157.
Removed top 1 bits (of 22) from wire top.wire196.
Removed top 7 bits (of 20) from wire top.wire197.
Removed top 4 bits (of 5) from wire top.wire201.
Removed top 19 bits (of 20) from wire top.wire39.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 174 unused wires.
<suppressed ~6 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~676 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module113:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module159:
  creating $macc model for $add$rtl.v:429$427 ($add).
  creating $macc model for $add$rtl.v:433$433 ($add).
  creating $macc model for $mul$rtl.v:447$452 ($mul).
  creating $macc model for $mul$rtl.v:491$508 ($mul).
  creating $macc model for $neg$rtl.v:448$454 ($neg).
  creating $macc model for $neg$rtl.v:459$464 ($neg).
  creating $macc model for $neg$rtl.v:492$510 ($neg).
  creating $macc model for $neg$rtl.v:495$520 ($neg).
  creating $macc model for $neg$rtl.v:500$526 ($neg).
  creating $macc model for $neg$rtl.v:500$527 ($neg).
  merging $macc model for $neg$rtl.v:500$526 into $neg$rtl.v:500$527.
  creating $alu model for $macc $neg$rtl.v:500$527.
  creating $alu model for $macc $neg$rtl.v:495$520.
  creating $alu model for $macc $neg$rtl.v:492$510.
  creating $alu model for $macc $neg$rtl.v:459$464.
  creating $alu model for $macc $neg$rtl.v:448$454.
  creating $alu model for $macc $add$rtl.v:433$433.
  creating $alu model for $macc $add$rtl.v:429$427.
  creating $macc cell for $mul$rtl.v:491$508: $auto$alumacc.cc:354:replace_macc$1579
  creating $macc cell for $mul$rtl.v:447$452: $auto$alumacc.cc:354:replace_macc$1580
  creating $alu model for $ge$rtl.v:445$449 ($ge): new $alu
  creating $alu model for $le$rtl.v:445$450 ($le): new $alu
  creating $alu model for $lt$rtl.v:421$397 ($lt): new $alu
  creating $alu model for $lt$rtl.v:425$413 ($lt): new $alu
  creating $alu model for $lt$rtl.v:459$467 ($lt): new $alu
  creating $alu model for $lt$rtl.v:461$474 ($lt): new $alu
  creating $alu model for $lt$rtl.v:476$488 ($lt): new $alu
  creating $alu model for $lt$rtl.v:527$540 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:527$540: $auto$alumacc.cc:474:replace_alu$1589
  creating $alu cell for $lt$rtl.v:476$488: $auto$alumacc.cc:474:replace_alu$1594
  creating $alu cell for $lt$rtl.v:461$474: $auto$alumacc.cc:474:replace_alu$1599
  creating $alu cell for $lt$rtl.v:459$467: $auto$alumacc.cc:474:replace_alu$1604
  creating $alu cell for $lt$rtl.v:425$413: $auto$alumacc.cc:474:replace_alu$1615
  creating $alu cell for $lt$rtl.v:421$397: $auto$alumacc.cc:474:replace_alu$1620
  creating $alu cell for $le$rtl.v:445$450: $auto$alumacc.cc:474:replace_alu$1631
  creating $alu cell for $ge$rtl.v:445$449: $auto$alumacc.cc:474:replace_alu$1644
  creating $alu cell for $add$rtl.v:429$427: $auto$alumacc.cc:474:replace_alu$1653
  creating $alu cell for $add$rtl.v:433$433: $auto$alumacc.cc:474:replace_alu$1656
  creating $alu cell for $neg$rtl.v:448$454: $auto$alumacc.cc:474:replace_alu$1659
  creating $alu cell for $neg$rtl.v:459$464: $auto$alumacc.cc:474:replace_alu$1662
  creating $alu cell for $neg$rtl.v:492$510: $auto$alumacc.cc:474:replace_alu$1665
  creating $alu cell for $neg$rtl.v:495$520: $auto$alumacc.cc:474:replace_alu$1668
  creating $pos cell for $neg$rtl.v:500$527: $auto$alumacc.cc:464:replace_alu$1671
  created 14 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module40:
  creating $macc model for $add$rtl.v:645$655 ($add).
  creating $macc model for $neg$rtl.v:609$587 ($neg).
  creating $macc model for $neg$rtl.v:682$706 ($neg).
  creating $macc model for $neg$rtl.v:696$742 ($neg).
  creating $macc model for $sub$rtl.v:660$673 ($sub).
  creating $macc model for $sub$rtl.v:676$699 ($sub).
  creating $alu model for $macc $sub$rtl.v:676$699.
  creating $alu model for $macc $sub$rtl.v:660$673.
  creating $alu model for $macc $neg$rtl.v:696$742.
  creating $alu model for $macc $neg$rtl.v:682$706.
  creating $alu model for $macc $neg$rtl.v:609$587.
  creating $alu model for $macc $add$rtl.v:645$655.
  creating $alu model for $ge$rtl.v:641$638 ($ge): new $alu
  creating $alu model for $gt$rtl.v:621$605 ($gt): new $alu
  creating $alu model for $gt$rtl.v:676$695 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:676$695: $auto$alumacc.cc:474:replace_alu$1675
  creating $alu cell for $gt$rtl.v:621$605: $auto$alumacc.cc:474:replace_alu$1680
  creating $alu cell for $ge$rtl.v:641$638: $auto$alumacc.cc:474:replace_alu$1685
  creating $alu cell for $add$rtl.v:645$655: $auto$alumacc.cc:474:replace_alu$1698
  creating $alu cell for $neg$rtl.v:609$587: $auto$alumacc.cc:474:replace_alu$1701
  creating $alu cell for $neg$rtl.v:682$706: $auto$alumacc.cc:474:replace_alu$1704
  creating $alu cell for $neg$rtl.v:696$742: $auto$alumacc.cc:474:replace_alu$1707
  creating $alu cell for $sub$rtl.v:660$673: $auto$alumacc.cc:474:replace_alu$1710
  creating $alu cell for $sub$rtl.v:676$699: $auto$alumacc.cc:474:replace_alu$1713
  created 9 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module46:
  creating $macc model for $add$rtl.v:920$900 ($add).
  creating $macc model for $mul$rtl.v:924$909 ($mul).
  creating $macc model for $mul$rtl.v:941$918 ($mul).
  creating $macc model for $neg$rtl.v:941$917 ($neg).
  creating $macc model for $neg$rtl.v:983$965 ($neg).
  creating $alu model for $macc $neg$rtl.v:983$965.
  creating $alu model for $macc $neg$rtl.v:941$917.
  creating $alu model for $macc $add$rtl.v:920$900.
  creating $macc cell for $mul$rtl.v:924$909: $auto$alumacc.cc:354:replace_macc$1716
  creating $macc cell for $mul$rtl.v:941$918: $auto$alumacc.cc:354:replace_macc$1717
  creating $alu model for $ge$rtl.v:993$982 ($ge): new $alu
  creating $alu model for $gt$rtl.v:972$951 ($gt): new $alu
  creating $alu model for $le$rtl.v:989$973 ($le): new $alu
  creating $alu model for $lt$rtl.v:941$916 ($lt): new $alu
  creating $alu model for $lt$rtl.v:989$977 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:989$977: $auto$alumacc.cc:474:replace_alu$1723
  creating $alu cell for $lt$rtl.v:941$916: $auto$alumacc.cc:474:replace_alu$1730
  creating $alu cell for $le$rtl.v:989$973: $auto$alumacc.cc:474:replace_alu$1735
  creating $alu cell for $gt$rtl.v:972$951: $auto$alumacc.cc:474:replace_alu$1748
  creating $alu cell for $ge$rtl.v:993$982: $auto$alumacc.cc:474:replace_alu$1753
  creating $alu cell for $add$rtl.v:920$900: $auto$alumacc.cc:474:replace_alu$1762
  creating $alu cell for $neg$rtl.v:941$917: $auto$alumacc.cc:474:replace_alu$1765
  creating $alu cell for $neg$rtl.v:983$965: $auto$alumacc.cc:474:replace_alu$1768
  created 8 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module88:
  creating $macc model for $add$rtl.v:813$861 ($add).
  creating $macc model for $mul$rtl.v:801$820 ($mul).
  creating $macc model for $neg$rtl.v:791$804 ($neg).
  creating $macc model for $sub$rtl.v:804$827 ($sub).
  creating $alu model for $macc $sub$rtl.v:804$827.
  creating $alu model for $macc $neg$rtl.v:791$804.
  creating $alu model for $macc $add$rtl.v:813$861.
  creating $macc cell for $mul$rtl.v:801$820: $auto$alumacc.cc:354:replace_macc$1771
  creating $alu model for $gt$rtl.v:813$860 ($gt): new $alu
  creating $alu model for $gt$rtl.v:813$862 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:813$862: $auto$alumacc.cc:474:replace_alu$1774
  creating $alu cell for $gt$rtl.v:813$860: $auto$alumacc.cc:474:replace_alu$1779
  creating $alu cell for $add$rtl.v:813$861: $auto$alumacc.cc:474:replace_alu$1792
  creating $alu cell for $neg$rtl.v:791$804: $auto$alumacc.cc:474:replace_alu$1795
  creating $alu cell for $sub$rtl.v:804$827: $auto$alumacc.cc:474:replace_alu$1798
  created 5 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:145$21 ($add).
  creating $macc model for $add$rtl.v:167$49 ($add).
  creating $macc model for $add$rtl.v:197$98 ($add).
  creating $macc model for $add$rtl.v:213$120 ($add).
  creating $macc model for $add$rtl.v:228$146 ($add).
  creating $macc model for $mul$rtl.v:145$20 ($mul).
  creating $macc model for $mul$rtl.v:167$46 ($mul).
  creating $macc model for $mul$rtl.v:242$172 ($mul).
  creating $macc model for $neg$rtl.v:238$164 ($neg).
  creating $macc model for $neg$rtl.v:260$198 ($neg).
  creating $macc model for $neg$rtl.v:284$231 ($neg).
  creating $macc model for $neg$rtl.v:290$240 ($neg).
  creating $macc model for $sub$rtl.v:273$212 ($sub).
  creating $macc model for $sub$rtl.v:286$234 ($sub).
  creating $macc model for $sub$rtl.v:321$286 ($sub).
  merging $macc model for $mul$rtl.v:145$20 into $add$rtl.v:145$21.
  creating $alu model for $macc $sub$rtl.v:286$234.
  creating $alu model for $macc $sub$rtl.v:273$212.
  creating $alu model for $macc $neg$rtl.v:290$240.
  creating $alu model for $macc $neg$rtl.v:284$231.
  creating $alu model for $macc $neg$rtl.v:260$198.
  creating $alu model for $macc $neg$rtl.v:238$164.
  creating $alu model for $macc $sub$rtl.v:321$286.
  creating $alu model for $macc $add$rtl.v:228$146.
  creating $alu model for $macc $add$rtl.v:213$120.
  creating $alu model for $macc $add$rtl.v:197$98.
  creating $alu model for $macc $add$rtl.v:167$49.
  creating $macc cell for $mul$rtl.v:167$46: $auto$alumacc.cc:354:replace_macc$1801
  creating $macc cell for $mul$rtl.v:242$172: $auto$alumacc.cc:354:replace_macc$1802
  creating $macc cell for $add$rtl.v:145$21: $auto$alumacc.cc:354:replace_macc$1803
  creating $alu model for $ge$rtl.v:181$78 ($ge): new $alu
  creating $alu model for $ge$rtl.v:223$130 ($ge): new $alu
  creating $alu model for $ge$rtl.v:242$179 ($ge): new $alu
  creating $alu model for $ge$rtl.v:305$258 ($ge): new $alu
  creating $alu model for $ge$rtl.v:313$271 ($ge): new $alu
  creating $alu model for $gt$rtl.v:213$122 ($gt): new $alu
  creating $alu model for $gt$rtl.v:227$137 ($gt): new $alu
  creating $alu model for $gt$rtl.v:284$232 ($gt): new $alu
  creating $alu model for $le$rtl.v:186$88 ($le): new $alu
  creating $alu model for $le$rtl.v:198$100 ($le): new $alu
  creating $alu model for $le$rtl.v:199$102 ($le): new $alu
  creating $alu model for $le$rtl.v:239$166 ($le): new $alu
  creating $alu cell for $le$rtl.v:239$166: $auto$alumacc.cc:474:replace_alu$1816
  creating $alu cell for $le$rtl.v:199$102: $auto$alumacc.cc:474:replace_alu$1825
  creating $alu cell for $le$rtl.v:198$100: $auto$alumacc.cc:474:replace_alu$1838
  creating $alu cell for $le$rtl.v:186$88: $auto$alumacc.cc:474:replace_alu$1851
  creating $alu cell for $gt$rtl.v:284$232: $auto$alumacc.cc:474:replace_alu$1864
  creating $alu cell for $gt$rtl.v:227$137: $auto$alumacc.cc:474:replace_alu$1869
  creating $alu cell for $gt$rtl.v:213$122: $auto$alumacc.cc:474:replace_alu$1880
  creating $alu cell for $ge$rtl.v:313$271: $auto$alumacc.cc:474:replace_alu$1885
  creating $alu cell for $ge$rtl.v:305$258: $auto$alumacc.cc:474:replace_alu$1896
  creating $alu cell for $ge$rtl.v:242$179: $auto$alumacc.cc:474:replace_alu$1909
  creating $alu cell for $ge$rtl.v:223$130: $auto$alumacc.cc:474:replace_alu$1922
  creating $alu cell for $ge$rtl.v:181$78: $auto$alumacc.cc:474:replace_alu$1937
  creating $alu cell for $add$rtl.v:167$49: $auto$alumacc.cc:474:replace_alu$1950
  creating $alu cell for $add$rtl.v:197$98: $auto$alumacc.cc:474:replace_alu$1953
  creating $alu cell for $add$rtl.v:213$120: $auto$alumacc.cc:474:replace_alu$1956
  creating $alu cell for $add$rtl.v:228$146: $auto$alumacc.cc:474:replace_alu$1959
  creating $alu cell for $sub$rtl.v:321$286: $auto$alumacc.cc:474:replace_alu$1962
  creating $alu cell for $neg$rtl.v:238$164: $auto$alumacc.cc:474:replace_alu$1965
  creating $alu cell for $neg$rtl.v:260$198: $auto$alumacc.cc:474:replace_alu$1968
  creating $alu cell for $neg$rtl.v:284$231: $auto$alumacc.cc:474:replace_alu$1971
  creating $alu cell for $neg$rtl.v:290$240: $auto$alumacc.cc:474:replace_alu$1974
  creating $alu cell for $sub$rtl.v:273$212: $auto$alumacc.cc:474:replace_alu$1977
  creating $alu cell for $sub$rtl.v:286$234: $auto$alumacc.cc:474:replace_alu$1980
  created 23 $alu and 3 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module module159 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:435$439 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$1099_CMP $reduce_and$rtl.v:432$430_Y }.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:528$544 ($shl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:528$546_Y.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:437$441 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$1099_CMP $reduce_and$rtl.v:432$430_Y }.
    No candidates found.
Found 2 cells in module module46 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshl$rtl.v:974$962 ($sshl):
    Found 1 activation_patterns using ctrl signal $procmux$1022_CMP.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:916$893 ($sshl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:915$891_Y.
    No candidates found.
Found 8 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:227$139 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$1267_CMP $procmux$1240_CMP $reduce_bool$rtl.v:228$144_Y $reduce_bool$rtl.v:228$142_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshr$rtl.v:207$115 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$1240_CMP \wire3 [1] }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:259$195 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$1210_CMP $procmux$1186_CMP }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:226$136 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$1267_CMP $procmux$1240_CMP $reduce_bool$rtl.v:228$144_Y }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:197$97 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$1244_CMP $procmux$1240_CMP }.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:193$95 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$1244_CMP $procmux$1240_CMP }.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:183$79 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$1271_CMP $procmux$1240_CMP \reg20 [3] }.
    No candidates found.
  Analyzing resource sharing options for $mul$rtl.v:145$20 ($mul):
    Found cell that is never activated: $mul$rtl.v:145$20
    Cell is never active. Sharing is pointless, we simply remove it.
Removing 1 cells in module top:
  Removing cell $mul$rtl.v:145$20 ($mul).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
<suppressed ~6 debug messages>
Optimizing module module40.
<suppressed ~9 debug messages>
Optimizing module module46.
<suppressed ~10 debug messages>
Optimizing module module88.
Optimizing module top.
<suppressed ~18 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:421$394.
    dead port 2/2 on $mux $ternary$rtl.v:421$394.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:661$676.
    dead port 2/2 on $mux $ternary$rtl.v:661$676.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$1188: { 16'0000000000000000 \reg10 [0] } -> 17'00000000000000000
      Replacing known input bits on port B of cell $ternary$rtl.v:257$194: { 8'00000000 \reg4 [0] } -> 9'000000001
      Replacing known input bits on port A of cell $ternary$rtl.v:161$32: { \reg8 [0] \wire3 } -> { 1'0 \wire3 }
  Analyzing evaluation results.
Removed 4 multiplexer ports.
<suppressed ~155 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
    New input vector for $reduce_or cell $reduce_or$rtl.v:493$514: { $auto$wreduce.cc:455:run$1454 [0] $auto$wreduce.cc:455:run$1454 [1] $auto$wreduce.cc:455:run$1454 [2] $auto$wreduce.cc:455:run$1454 [3] $auto$wreduce.cc:455:run$1454 [4] $auto$wreduce.cc:455:run$1454 [5] $auto$wreduce.cc:455:run$1454 [6] $auto$wreduce.cc:455:run$1454 [7] $auto$wreduce.cc:455:run$1454 [8] $auto$wreduce.cc:455:run$1454 [9] $auto$wreduce.cc:455:run$1454 [10] $auto$wreduce.cc:455:run$1454 [11] $auto$wreduce.cc:455:run$1454 [12] $auto$wreduce.cc:455:run$1454 [13] $auto$wreduce.cc:455:run$1454 [14] $auto$wreduce.cc:455:run$1454 [15] $auto$wreduce.cc:455:run$1454 [16] $auto$wreduce.cc:455:run$1454 [17] $auto$wreduce.cc:455:run$1454 [18] $auto$wreduce.cc:455:run$1454 [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:466$477: { \wire167 [0] \wire167 [1] \wire167 [2] \wire167 [3] \wire167 [4] \wire167 [5] \wire167 [6] \wire167 [7] \wire167 [8] \wire167 [9] \wire167 [10] \wire167 [11] \wire167 [12] \wire167 [13] \wire167 [14] \wire167 [15] \wire167 [16] \wire167 [17] \wire167 [18] \wire167 [19] $eq$rtl.v:466$476_Y }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1642: { $auto$rtlil.cc:1832:Not$1641 $auto$rtlil.cc:1835:ReduceAnd$1635 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1649: { $auto$alumacc.cc:490:replace_alu$1645 [0] $auto$alumacc.cc:490:replace_alu$1645 [1] $auto$alumacc.cc:490:replace_alu$1645 [2] $auto$alumacc.cc:490:replace_alu$1645 [3] $auto$alumacc.cc:490:replace_alu$1645 [4] $auto$alumacc.cc:490:replace_alu$1645 [5] $auto$alumacc.cc:490:replace_alu$1645 [6] $auto$alumacc.cc:490:replace_alu$1645 [7] $auto$alumacc.cc:490:replace_alu$1645 [8] $auto$alumacc.cc:490:replace_alu$1645 [9] $auto$alumacc.cc:490:replace_alu$1645 [10] $auto$alumacc.cc:490:replace_alu$1645 [11] $auto$alumacc.cc:490:replace_alu$1645 [12] $auto$alumacc.cc:490:replace_alu$1645 [13] $auto$alumacc.cc:490:replace_alu$1645 [14] $auto$alumacc.cc:490:replace_alu$1645 [15] $auto$alumacc.cc:490:replace_alu$1645 [16] $auto$alumacc.cc:490:replace_alu$1645 [17] $auto$alumacc.cc:490:replace_alu$1645 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1607: { $auto$alumacc.cc:490:replace_alu$1605 [0] $auto$alumacc.cc:490:replace_alu$1605 [1] $auto$alumacc.cc:490:replace_alu$1605 [2] $auto$alumacc.cc:490:replace_alu$1605 [3] $auto$alumacc.cc:490:replace_alu$1605 [4] $auto$alumacc.cc:490:replace_alu$1605 [5] $auto$alumacc.cc:490:replace_alu$1605 [6] $auto$alumacc.cc:490:replace_alu$1605 [7] $auto$alumacc.cc:490:replace_alu$1605 [8] $auto$alumacc.cc:490:replace_alu$1605 [9] $auto$alumacc.cc:490:replace_alu$1605 [10] $auto$alumacc.cc:490:replace_alu$1605 [11] $auto$alumacc.cc:490:replace_alu$1605 [12] $auto$alumacc.cc:490:replace_alu$1605 [13] $auto$alumacc.cc:490:replace_alu$1605 [14] $auto$alumacc.cc:490:replace_alu$1605 [15] $auto$alumacc.cc:490:replace_alu$1605 [16] $auto$alumacc.cc:490:replace_alu$1605 [17] $auto$alumacc.cc:490:replace_alu$1605 [18] $auto$alumacc.cc:490:replace_alu$1605 [19] $auto$alumacc.cc:490:replace_alu$1605 [20] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1623: { $auto$alumacc.cc:490:replace_alu$1621 [0] $auto$alumacc.cc:490:replace_alu$1621 [1] $auto$alumacc.cc:490:replace_alu$1621 [2] $auto$alumacc.cc:490:replace_alu$1621 [3] $auto$alumacc.cc:490:replace_alu$1621 [4] $auto$alumacc.cc:490:replace_alu$1621 [5] $auto$alumacc.cc:490:replace_alu$1621 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1634: { $auto$alumacc.cc:490:replace_alu$1632 [0] $auto$alumacc.cc:490:replace_alu$1632 [1] $auto$alumacc.cc:490:replace_alu$1632 [2] $auto$alumacc.cc:490:replace_alu$1632 [3] $auto$alumacc.cc:490:replace_alu$1632 [4] $auto$alumacc.cc:490:replace_alu$1632 [5] $auto$alumacc.cc:490:replace_alu$1632 [6] }
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1746: { $auto$rtlil.cc:1832:Not$1745 $auto$rtlil.cc:1835:ReduceAnd$1739 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1758: { $auto$alumacc.cc:490:replace_alu$1754 [0] $auto$alumacc.cc:490:replace_alu$1754 [1] $auto$alumacc.cc:490:replace_alu$1754 [2] $auto$alumacc.cc:490:replace_alu$1754 [3] $auto$alumacc.cc:490:replace_alu$1754 [4] $auto$alumacc.cc:490:replace_alu$1754 [5] $auto$alumacc.cc:490:replace_alu$1754 [6] $auto$alumacc.cc:490:replace_alu$1754 [7] $auto$alumacc.cc:490:replace_alu$1754 [8] $auto$alumacc.cc:490:replace_alu$1754 [9] $auto$alumacc.cc:490:replace_alu$1754 [10] $auto$alumacc.cc:490:replace_alu$1754 [11] $auto$alumacc.cc:490:replace_alu$1754 [12] $auto$alumacc.cc:490:replace_alu$1754 [13] $auto$alumacc.cc:490:replace_alu$1754 [14] $auto$alumacc.cc:490:replace_alu$1754 [15] $auto$alumacc.cc:490:replace_alu$1754 [16] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1738: { $auto$alumacc.cc:490:replace_alu$1736 [0] $auto$alumacc.cc:490:replace_alu$1736 [1] $auto$alumacc.cc:490:replace_alu$1736 [2] $auto$alumacc.cc:490:replace_alu$1736 [3] $auto$alumacc.cc:490:replace_alu$1736 [4] $auto$alumacc.cc:490:replace_alu$1736 [5] $auto$alumacc.cc:490:replace_alu$1736 [6] $auto$alumacc.cc:490:replace_alu$1736 [7] $auto$alumacc.cc:490:replace_alu$1736 [8] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1782: { $auto$alumacc.cc:490:replace_alu$1780 [0] $auto$alumacc.cc:490:replace_alu$1780 [1] $auto$alumacc.cc:490:replace_alu$1780 [2] $auto$alumacc.cc:490:replace_alu$1780 [3] $auto$alumacc.cc:490:replace_alu$1780 [4] }
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1823: { $auto$rtlil.cc:1832:Not$1820 $auto$alumacc.cc:490:replace_alu$1817 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1836: { $auto$rtlil.cc:1832:Not$1835 $auto$rtlil.cc:1835:ReduceAnd$1829 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1849: { $auto$rtlil.cc:1832:Not$1848 $auto$rtlil.cc:1835:ReduceAnd$1842 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1862: { $auto$rtlil.cc:1832:Not$1861 $auto$rtlil.cc:1835:ReduceAnd$1855 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1920: { $auto$rtlil.cc:1832:Not$1919 $auto$rtlil.cc:1835:ReduceAnd$1913 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1935: { $auto$rtlil.cc:1832:Not$1934 $auto$rtlil.cc:1835:ReduceAnd$1926 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1912: { $auto$alumacc.cc:490:replace_alu$1910 [0] $auto$alumacc.cc:490:replace_alu$1910 [1] $auto$alumacc.cc:490:replace_alu$1910 [2] $auto$alumacc.cc:490:replace_alu$1910 [3] $auto$alumacc.cc:490:replace_alu$1910 [4] $auto$alumacc.cc:490:replace_alu$1910 [5] $auto$alumacc.cc:490:replace_alu$1910 [6] $auto$alumacc.cc:490:replace_alu$1910 [7] $auto$alumacc.cc:490:replace_alu$1910 [8] $auto$alumacc.cc:490:replace_alu$1910 [9] $auto$alumacc.cc:490:replace_alu$1910 [10] $auto$alumacc.cc:490:replace_alu$1910 [11] $auto$alumacc.cc:490:replace_alu$1910 [12] $auto$alumacc.cc:490:replace_alu$1910 [13] $auto$alumacc.cc:490:replace_alu$1910 [14] $auto$alumacc.cc:490:replace_alu$1910 [15] $auto$alumacc.cc:490:replace_alu$1910 [16] $auto$alumacc.cc:490:replace_alu$1910 [17] $auto$alumacc.cc:490:replace_alu$1910 [18] $auto$alumacc.cc:490:replace_alu$1910 [19] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1940: { $auto$alumacc.cc:490:replace_alu$1938 [0] $auto$alumacc.cc:490:replace_alu$1938 [1] $auto$alumacc.cc:490:replace_alu$1938 [2] $auto$alumacc.cc:490:replace_alu$1938 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1925: { $auto$alumacc.cc:490:replace_alu$1923 [0] $auto$alumacc.cc:490:replace_alu$1923 [1] $auto$alumacc.cc:490:replace_alu$1923 [2] $auto$alumacc.cc:490:replace_alu$1923 [3] $auto$alumacc.cc:490:replace_alu$1923 [4] $auto$alumacc.cc:490:replace_alu$1923 [5] $auto$alumacc.cc:490:replace_alu$1923 [6] $auto$alumacc.cc:490:replace_alu$1923 [7] $auto$alumacc.cc:490:replace_alu$1923 [8] $auto$alumacc.cc:490:replace_alu$1923 [9] $auto$alumacc.cc:490:replace_alu$1923 [10] $auto$alumacc.cc:490:replace_alu$1923 [11] $auto$alumacc.cc:490:replace_alu$1923 [12] $auto$alumacc.cc:490:replace_alu$1923 [13] $auto$alumacc.cc:490:replace_alu$1923 [14] $auto$alumacc.cc:490:replace_alu$1923 [15] $auto$alumacc.cc:490:replace_alu$1923 [16] $auto$alumacc.cc:490:replace_alu$1923 [17] $auto$alumacc.cc:490:replace_alu$1923 [18] $auto$alumacc.cc:490:replace_alu$1923 [19] $auto$alumacc.cc:490:replace_alu$1923 [20] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1828: { $auto$alumacc.cc:490:replace_alu$1826 [0] $auto$alumacc.cc:490:replace_alu$1826 [1] $auto$alumacc.cc:490:replace_alu$1826 [2] $auto$alumacc.cc:490:replace_alu$1826 [3] $auto$alumacc.cc:490:replace_alu$1826 [4] $auto$alumacc.cc:490:replace_alu$1826 [5] $auto$alumacc.cc:490:replace_alu$1826 [6] $auto$alumacc.cc:490:replace_alu$1826 [7] $auto$alumacc.cc:490:replace_alu$1826 [8] $auto$alumacc.cc:490:replace_alu$1826 [9] $auto$alumacc.cc:490:replace_alu$1826 [10] $auto$alumacc.cc:490:replace_alu$1826 [11] $auto$alumacc.cc:490:replace_alu$1826 [12] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1841: { $auto$alumacc.cc:490:replace_alu$1839 [0] $auto$alumacc.cc:490:replace_alu$1839 [1] $auto$alumacc.cc:490:replace_alu$1839 [2] $auto$alumacc.cc:490:replace_alu$1839 [3] $auto$alumacc.cc:490:replace_alu$1839 [4] $auto$alumacc.cc:490:replace_alu$1839 [5] $auto$alumacc.cc:490:replace_alu$1839 [6] $auto$alumacc.cc:490:replace_alu$1839 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1854: { $auto$alumacc.cc:490:replace_alu$1852 [0] $auto$alumacc.cc:490:replace_alu$1852 [1] $auto$alumacc.cc:490:replace_alu$1852 [2] $auto$alumacc.cc:490:replace_alu$1852 [3] $auto$alumacc.cc:490:replace_alu$1852 [4] $auto$alumacc.cc:490:replace_alu$1852 [5] $auto$alumacc.cc:490:replace_alu$1852 [6] $auto$alumacc.cc:490:replace_alu$1852 [7] $auto$alumacc.cc:490:replace_alu$1852 [8] $auto$alumacc.cc:490:replace_alu$1852 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1872: { $auto$alumacc.cc:490:replace_alu$1870 [0] $auto$alumacc.cc:490:replace_alu$1870 [1] $auto$alumacc.cc:490:replace_alu$1870 [2] $auto$alumacc.cc:490:replace_alu$1870 [3] $auto$alumacc.cc:490:replace_alu$1870 [4] $auto$alumacc.cc:490:replace_alu$1870 [5] $auto$alumacc.cc:490:replace_alu$1870 [6] $auto$alumacc.cc:490:replace_alu$1870 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1892: { $auto$alumacc.cc:490:replace_alu$1886 [0] $auto$alumacc.cc:490:replace_alu$1886 [1] $auto$alumacc.cc:490:replace_alu$1886 [2] $auto$alumacc.cc:490:replace_alu$1886 [3] $auto$alumacc.cc:490:replace_alu$1886 [4] $auto$alumacc.cc:490:replace_alu$1886 [5] $auto$alumacc.cc:490:replace_alu$1886 [6] $auto$alumacc.cc:490:replace_alu$1886 [7] $auto$alumacc.cc:490:replace_alu$1886 [8] $auto$alumacc.cc:490:replace_alu$1886 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1899: { $auto$alumacc.cc:490:replace_alu$1897 [0] $auto$alumacc.cc:490:replace_alu$1897 [1] $auto$alumacc.cc:490:replace_alu$1897 [2] $auto$alumacc.cc:490:replace_alu$1897 [3] $auto$alumacc.cc:490:replace_alu$1897 [4] $auto$alumacc.cc:490:replace_alu$1897 [5] $auto$alumacc.cc:490:replace_alu$1897 [6] $auto$alumacc.cc:490:replace_alu$1897 [7] $auto$alumacc.cc:490:replace_alu$1897 [8] $auto$alumacc.cc:490:replace_alu$1897 [9] $auto$alumacc.cc:490:replace_alu$1897 [10] $auto$alumacc.cc:490:replace_alu$1897 [11] $auto$alumacc.cc:490:replace_alu$1897 [12] $auto$alumacc.cc:490:replace_alu$1897 [13] $auto$alumacc.cc:490:replace_alu$1897 [14] $auto$alumacc.cc:490:replace_alu$1897 [15] $auto$alumacc.cc:490:replace_alu$1897 [16] $auto$alumacc.cc:490:replace_alu$1897 [17] $auto$alumacc.cc:490:replace_alu$1897 [18] $auto$alumacc.cc:490:replace_alu$1897 [19] $auto$alumacc.cc:490:replace_alu$1897 [20] }
  Optimizing cells in module \top.
Performed a total of 26 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1338 ($dff) from module module46.
Removing $procdff$1389 ($dff) from module top.
Replaced 2 DFF cells.

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 11 unused cells and 83 unused wires.
<suppressed ~18 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
<suppressed ~1 debug messages>
Optimizing module module88.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~152 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
<suppressed ~1 debug messages>
Optimizing module module159.
<suppressed ~75 debug messages>
Optimizing module module40.
<suppressed ~44 debug messages>
Optimizing module module46.
<suppressed ~12 debug messages>
Optimizing module module88.
<suppressed ~19 debug messages>
Optimizing module top.
<suppressed ~167 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1412 ($dff) from module top.
Replaced 1 DFF cells.

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 6 unused cells and 87 unused wires.
<suppressed ~20 debug messages>

2.18.5. Rerunning OPT passes. (Removed registers in this run.)

2.18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.
<suppressed ~3 debug messages>

2.18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 6 unused wires.
<suppressed ~5 debug messages>

2.18.10. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:620$596.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1 multiplexer ports.
<suppressed ~148 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:749$776:
      Old ports: A=8'00000000, B=8'10100111, Y=$auto$wreduce.cc:455:run$1418 [7:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1418 [0]
      New connections: $auto$wreduce.cc:455:run$1418 [7:1] = { $auto$wreduce.cc:455:run$1418 [0] 1'0 $auto$wreduce.cc:455:run$1418 [0] 2'00 $auto$wreduce.cc:455:run$1418 [0] $auto$wreduce.cc:455:run$1418 [0] }
  Optimizing cells in module \module113.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:749$780:
      Old ports: A=$auto$wreduce.cc:455:run$1418 [7:0], B={ 7'0000000 \wire114 [1] }, Y=\wire126
      New ports: A={ $auto$wreduce.cc:455:run$1418 [0] $auto$wreduce.cc:455:run$1418 [0] }, B={ 1'0 \wire114 [1] }, Y=\wire126 [1:0]
      New connections: \wire126 [7:2] = { \wire126 [1] 1'0 \wire126 [1] 2'00 \wire126 [1] }
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
    Consolidated identical input bits for $mux cell $procmux$1105:
      Old ports: A={ 18'000000000000000000 \wire161 [5] }, B=19'0000000000000000000, Y=$procmux$1105_Y
      New ports: A=\wire161 [5], B=1'0, Y=$procmux$1105_Y [0]
      New connections: $procmux$1105_Y [18:1] = 18'000000000000000000
    Consolidated identical input bits for $mux cell $procmux$1122:
      Old ports: A={ 10'0000000000 $sshl$rtl.v:510$533_Y }, B={ 11'00000000000 $reduce_or$rtl.v:466$477_Y }, Y=$0\reg178[11:0]
      New ports: A=$sshl$rtl.v:510$533_Y, B={ 1'0 $reduce_or$rtl.v:466$477_Y }, Y=$0\reg178[11:0] [1:0]
      New connections: $0\reg178[11:0] [11:2] = 10'0000000000
    Consolidated identical input bits for $mux cell $procmux$1131:
      Old ports: A={ \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7:6] }, B={ 13'0000000000000 \wire164 [10:5] }, Y=$procmux$1131_Y
      New ports: A={ \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7] \wire163 [7:6] }, B={ 1'0 \wire164 [10:5] }, Y=$procmux$1131_Y [6:0]
      New connections: $procmux$1131_Y [18:7] = { $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] $procmux$1131_Y [6] }
    Consolidated identical input bits for $mux cell $procmux$1135:
      Old ports: A={ 18'000000000000000000 $auto$rtlil.cc:1832:Not$1598 }, B=19'1111111111101100001, Y=$procmux$1135_Y
      New ports: A={ 1'0 $auto$rtlil.cc:1832:Not$1598 }, B=2'11, Y={ $procmux$1135_Y [5] $procmux$1135_Y [0] }
      New connections: { $procmux$1135_Y [18:6] $procmux$1135_Y [4:1] } = { $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] $procmux$1135_Y [5] 1'0 $procmux$1135_Y [5] 4'0000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:417$382:
      Old ports: A={ 19'0000000000000000000 \wire160 [6] }, B={ 19'0000000000000000000 \wire167 [0] }, Y=$auto$wreduce.cc:455:run$1444 [19:0]
      New ports: A=\wire160 [6], B=\wire167 [0], Y=$auto$wreduce.cc:455:run$1444 [0]
      New connections: $auto$wreduce.cc:455:run$1444 [19:1] = 19'0000000000000000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:428$422:
      Old ports: A={ 7'0000000 \wire162 }, B={ 7'1111111 \wire166 [12:0] }, Y=$ternary$rtl.v:428$422_Y
      New ports: A={ 1'0 \wire162 }, B={ 1'1 \wire166 [12:0] }, Y=$ternary$rtl.v:428$422_Y [13:0]
      New connections: $ternary$rtl.v:428$422_Y [19:14] = { $ternary$rtl.v:428$422_Y [13] $ternary$rtl.v:428$422_Y [13] $ternary$rtl.v:428$422_Y [13] $ternary$rtl.v:428$422_Y [13] $ternary$rtl.v:428$422_Y [13] $ternary$rtl.v:428$422_Y [13] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:436$444:
      Old ports: A={ 19'0000000000000000000 \wire160 [6] }, B={ 19'0000000000000000000 \wire167 [0] }, Y=$auto$wreduce.cc:455:run$1446 [19:0]
      New ports: A=\wire160 [6], B=\wire167 [0], Y=$auto$wreduce.cc:455:run$1446 [0]
      New connections: $auto$wreduce.cc:455:run$1446 [19:1] = 19'0000000000000000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:445$448:
      Old ports: A=7'1011111, B={ 6'000000 \wire160 [6] }, Y=$auto$wreduce.cc:455:run$1447 [6:0]
      New ports: A=2'11, B={ 1'0 \wire160 [6] }, Y=$auto$wreduce.cc:455:run$1447 [1:0]
      New connections: $auto$wreduce.cc:455:run$1447 [6:2] = { $auto$wreduce.cc:455:run$1447 [1] 1'0 $auto$wreduce.cc:455:run$1447 [1] $auto$wreduce.cc:455:run$1447 [1] $auto$wreduce.cc:455:run$1447 [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:478$491:
      Old ports: A=20'00000000000010100001, B={ 19'0000000000000000000 \wire167 [0] }, Y=$auto$wreduce.cc:455:run$1450 [19:0]
      New ports: A=2'11, B={ 1'0 \wire167 [0] }, Y={ $auto$wreduce.cc:455:run$1450 [5] $auto$wreduce.cc:455:run$1450 [0] }
      New connections: { $auto$wreduce.cc:455:run$1450 [19:6] $auto$wreduce.cc:455:run$1450 [4:1] } = { 12'000000000000 $auto$wreduce.cc:455:run$1450 [5] 5'00000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:491$507:
      Old ports: A={ 2'00 \reg181 }, B=8'10110010, Y=$auto$wreduce.cc:455:run$1453
      New ports: A={ 1'0 \reg181 }, B=7'1110010, Y={ $auto$wreduce.cc:455:run$1453 [7] $auto$wreduce.cc:455:run$1453 [5:0] }
      New connections: $auto$wreduce.cc:455:run$1453 [6] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:493$513:
      Old ports: A={ 19'0000000000000000000 \wire160 [6] }, B={ 19'0000000000000000000 \wire167 [0] }, Y=$auto$wreduce.cc:455:run$1454 [19:0]
      New ports: A=\wire160 [6], B=\wire167 [0], Y=$auto$wreduce.cc:455:run$1454 [0]
      New connections: $auto$wreduce.cc:455:run$1454 [19:1] = 19'0000000000000000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:495$518:
      Old ports: A={ 13'0000000000000 \reg176 }, B={ 19'0000000000000000000 \wire167 [0] }, Y=$auto$wreduce.cc:455:run$1455 [19:0]
      New ports: A=\reg176, B={ 6'000000 \wire167 [0] }, Y=$auto$wreduce.cc:455:run$1455 [6:0]
      New connections: $auto$wreduce.cc:455:run$1455 [19:7] = 13'0000000000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:528$542:
      Old ports: A=8'10101010, B=8'00000000, Y=$auto$wreduce.cc:455:run$1458 [7:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$1458 [1]
      New connections: { $auto$wreduce.cc:455:run$1458 [7:2] $auto$wreduce.cc:455:run$1458 [0] } = { $auto$wreduce.cc:455:run$1458 [1] 1'0 $auto$wreduce.cc:455:run$1458 [1] 1'0 $auto$wreduce.cc:455:run$1458 [1] 2'00 }
  Optimizing cells in module \module159.
    New input vector for $reduce_or cell $reduce_or$rtl.v:493$514: $auto$wreduce.cc:455:run$1454 [0]
    Consolidated identical input bits for $mux cell $procmux$1107:
      Old ports: A={ $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 }, B=$procmux$1105_Y, Y=$0\reg174[18:0]
      New ports: A={ $auto$rtlil.cc:1832:Not$1603 $auto$rtlil.cc:1832:Not$1603 }, B={ 1'0 $procmux$1105_Y [0] }, Y=$0\reg174[18:0] [1:0]
      New connections: $0\reg174[18:0] [18:2] = { $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] $0\reg174[18:0] [1] }
    Consolidated identical input bits for $mux cell $procmux$1137:
      Old ports: A=$procmux$1131_Y, B=$procmux$1135_Y, Y=$0\reg180[18:0]
      New ports: A={ $procmux$1131_Y [6] $procmux$1131_Y [6:0] }, B={ 1'0 $procmux$1135_Y [5] $procmux$1135_Y [5] 4'0000 $procmux$1135_Y [0] }, Y=$0\reg180[18:0] [7:0]
      New connections: $0\reg180[18:0] [18:8] = { $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] $0\reg180[18:0] [6] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:478$493:
      Old ports: A=$auto$wreduce.cc:455:run$1450 [19:0], B=20'00000000000010101001, Y=$auto$wreduce.cc:455:run$1451 [19:0]
      New ports: A={ $auto$wreduce.cc:455:run$1450 [5] 1'0 $auto$wreduce.cc:455:run$1450 [0] }, B=3'111, Y={ $auto$wreduce.cc:455:run$1451 [5] $auto$wreduce.cc:455:run$1451 [3] $auto$wreduce.cc:455:run$1451 [0] }
      New connections: { $auto$wreduce.cc:455:run$1451 [19:6] $auto$wreduce.cc:455:run$1451 [4] $auto$wreduce.cc:455:run$1451 [2:1] } = { 12'000000000000 $auto$wreduce.cc:455:run$1451 [5] 4'0000 }
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
    Consolidated identical input bits for $mux cell $procmux$1062:
      Old ports: A={ 14'00000000000000 $auto$wreduce.cc:455:run$1486 [7:0] }, B={ $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y }, Y=$0\reg141[21:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1486 [7:0] }, B={ $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y $logic_not$rtl.v:653$667_Y }, Y=$0\reg141[21:0] [8:0]
      New connections: $0\reg141[21:0] [21:9] = { $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] $0\reg141[21:0] [8] }
    Consolidated identical input bits for $mux cell $procmux$1075:
      Old ports: A=6'000000, B={ 5'00000 $auto$wreduce.cc:455:run$1467 [0] }, Y=$procmux$1075_Y
      New ports: A=1'0, B=$auto$wreduce.cc:455:run$1467 [0], Y=$procmux$1075_Y [0]
      New connections: $procmux$1075_Y [5:1] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:624$610:
      Old ports: A={ 6'000000 \wire106 [3:2] }, B=8'10110101, Y=$ternary$rtl.v:624$610_Y
      New ports: A={ 1'0 \wire106 [3:2] }, B=3'101, Y=$ternary$rtl.v:624$610_Y [2:0]
      New connections: $ternary$rtl.v:624$610_Y [7:3] = { $ternary$rtl.v:624$610_Y [2] 1'0 $ternary$rtl.v:624$610_Y [2] $ternary$rtl.v:624$610_Y [2] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:644$647:
      Old ports: A=6'011111, B=6'111111, Y=$ternary$rtl.v:644$647_Y [5:0]
      New ports: A=1'0, B=1'1, Y=$ternary$rtl.v:644$647_Y [5]
      New connections: $ternary$rtl.v:644$647_Y [4:0] = 5'11111
    Consolidated identical input bits for $mux cell $ternary$rtl.v:658$672:
      Old ports: A={ 2'00 $auto$wreduce.cc:455:run$1473 [0] }, B=3'000, Y=$auto$wreduce.cc:455:run$1480 [2:0]
      New ports: A=$auto$wreduce.cc:455:run$1473 [0], B=1'0, Y=$auto$wreduce.cc:455:run$1480 [0]
      New connections: $auto$wreduce.cc:455:run$1480 [2:1] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:698$749:
      Old ports: A={ 4'1000 \wire135 [0] }, B={ 2'00 \reg143 }, Y=$ternary$rtl.v:698$749_Y
      New ports: A={ 3'100 \wire135 [0] }, B={ 1'0 \reg143 }, Y={ $ternary$rtl.v:698$749_Y [4] $ternary$rtl.v:698$749_Y [2:0] }
      New connections: $ternary$rtl.v:698$749_Y [3] = 1'0
  Optimizing cells in module \module40.
    New input vector for $reduce_or cell $reduce_or$rtl.v:624$611: { $ternary$rtl.v:624$610_Y [0] $ternary$rtl.v:624$610_Y [1] $ternary$rtl.v:624$610_Y [2] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:698$750: 1'0
    Consolidated identical input bits for $mux cell $procmux$1077:
      Old ports: A={ \reg147 [7] \reg147 [7:3] }, B=$procmux$1075_Y, Y=$0\reg144[5:0]
      New ports: A=\reg147 [7:3], B={ 4'0000 $procmux$1075_Y [0] }, Y=$0\reg144[5:0] [4:0]
      New connections: $0\reg144[5:0] [5] = $0\reg144[5:0] [4]
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
    Consolidated identical input bits for $mux cell $procmux$1027:
      Old ports: A={ 13'0000000000000 $ternary$rtl.v:972$955_Y [1:0] }, B={ 7'0000000 \wire50 }, Y=$0\reg67[14:0]
      New ports: A={ 6'000000 $ternary$rtl.v:972$955_Y [1:0] }, B=\wire50, Y=$0\reg67[14:0] [7:0]
      New connections: $0\reg67[14:0] [14:8] = 7'0000000
    Consolidated identical input bits for $mux cell $procmux$1033:
      Old ports: A={ 5'00000 $sshl$rtl.v:974$962_Y [11:0] }, B={ 6'000000 \wire62 }, Y=$0\reg68[16:0]
      New ports: A=$sshl$rtl.v:974$962_Y [11:0], B={ 1'0 \wire62 }, Y=$0\reg68[16:0] [11:0]
      New connections: $0\reg68[16:0] [16:12] = 5'00000
    Consolidated identical input bits for $mux cell $procmux$1036:
      Old ports: A=13'1111110111011, B={ 12'000000000000 $and$rtl.v:941$919_Y [0] }, Y=$0\reg69[12:0]
      New ports: A=2'11, B={ 1'0 $and$rtl.v:941$919_Y [0] }, Y=$0\reg69[12:0] [1:0]
      New connections: $0\reg69[12:0] [12:2] = { $0\reg69[12:0] [1] $0\reg69[12:0] [1] $0\reg69[12:0] [1] $0\reg69[12:0] [1] $0\reg69[12:0] [1] $0\reg69[12:0] [1] 1'0 $0\reg69[12:0] [1] $0\reg69[12:0] [1] $0\reg69[12:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:972$955:
      Old ports: A={ 1'0 $auto$alumacc.cc:491:replace_alu$1750 [12] }, B=2'00, Y=$ternary$rtl.v:972$955_Y [1:0]
      New ports: A=$auto$alumacc.cc:491:replace_alu$1750 [12], B=1'0, Y=$ternary$rtl.v:972$955_Y [0]
      New connections: $ternary$rtl.v:972$955_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:974$961:
      Old ports: A=12'000000000000, B={ 11'00000000000 \wire52 }, Y=$sshl$rtl.v:974$962_Y [11:0]
      New ports: A=1'0, B=\wire52, Y=$sshl$rtl.v:974$962_Y [0]
      New connections: $sshl$rtl.v:974$962_Y [11:1] = 11'00000000000
  Optimizing cells in module \module46.
    Consolidated identical input bits for $mux cell $procmux$1033:
      Old ports: A=$sshl$rtl.v:974$962_Y [11:0], B={ 1'0 \wire62 }, Y=$0\reg68[16:0] [11:0]
      New ports: A={ 10'0000000000 $sshl$rtl.v:974$962_Y [0] }, B=\wire62, Y=$0\reg68[16:0] [10:0]
      New connections: $0\reg68[16:0] [11] = 1'0
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:793$794:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$1512 [0] }, B=8'10110101, Y=$ternary$rtl.v:793$794_Y
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1512 [0] }, B=2'11, Y={ $ternary$rtl.v:793$794_Y [2] $ternary$rtl.v:793$794_Y [0] }
      New connections: { $ternary$rtl.v:793$794_Y [7:3] $ternary$rtl.v:793$794_Y [1] } = { $ternary$rtl.v:793$794_Y [2] 1'0 $ternary$rtl.v:793$794_Y [2] $ternary$rtl.v:793$794_Y [2] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:802$825:
      Old ports: A=8'00000000, B=8'10101100, Y=$ternary$rtl.v:802$825_Y
      New ports: A=1'0, B=1'1, Y=$ternary$rtl.v:802$825_Y [2]
      New connections: { $ternary$rtl.v:802$825_Y [7:3] $ternary$rtl.v:802$825_Y [1:0] } = { $ternary$rtl.v:802$825_Y [2] 1'0 $ternary$rtl.v:802$825_Y [2] 1'0 $ternary$rtl.v:802$825_Y [2] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:804$826:
      Old ports: A=8'01000000, B=8'10100011, Y=$auto$wreduce.cc:455:run$1516 [7:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$1516 [6] $auto$wreduce.cc:455:run$1516 [0] }
      New connections: { $auto$wreduce.cc:455:run$1516 [7] $auto$wreduce.cc:455:run$1516 [5:1] } = { $auto$wreduce.cc:455:run$1516 [0] $auto$wreduce.cc:455:run$1516 [0] 3'000 $auto$wreduce.cc:455:run$1516 [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:812$854:
      Old ports: A=15'000000010110000, B={ 2'00 $auto$wreduce.cc:455:run$1519 [12:0] }, Y=\wire102
      New ports: A=13'0000010110000, B=$auto$wreduce.cc:455:run$1519 [12:0], Y=\wire102 [12:0]
      New connections: \wire102 [14:13] = 2'00
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $reduce_and$rtl.v:121$5: { $shr$rtl.v:120$4_Y [0] $shr$rtl.v:120$4_Y [1] $shr$rtl.v:120$4_Y [2] $shr$rtl.v:120$4_Y [3] $auto$opt_expr.cc:189:group_cell_inputs$2045 $auto$opt_expr.cc:189:group_cell_inputs$2047 [0] $auto$opt_expr.cc:189:group_cell_inputs$2047 [1] $auto$opt_expr.cc:189:group_cell_inputs$2047 [2] $auto$opt_expr.cc:189:group_cell_inputs$2047 [3] $auto$opt_expr.cc:189:group_cell_inputs$2047 [4] $auto$opt_expr.cc:189:group_cell_inputs$2047 [5] $auto$opt_expr.cc:189:group_cell_inputs$2047 [6] $auto$opt_expr.cc:189:group_cell_inputs$2047 [7] $auto$opt_expr.cc:189:group_cell_inputs$2047 [8] $auto$opt_expr.cc:189:group_cell_inputs$2047 [9] $auto$opt_expr.cc:189:group_cell_inputs$2047 [10] }
    Consolidated identical input bits for $mux cell $procmux$1209:
      Old ports: A={ 16'0000000000000000 $ternary$rtl.v:274$216_Y [0] }, B={ 16'0000000000000000 \reg9 [2] }, Y=$auto$wreduce.cc:455:run$1553 [16:0]
      New ports: A=$ternary$rtl.v:274$216_Y [0], B=\reg9 [2], Y=$auto$wreduce.cc:455:run$1553 [0]
      New connections: $auto$wreduce.cc:455:run$1553 [16:1] = 16'0000000000000000
    Consolidated identical input bits for $mux cell $procmux$1257:
      Old ports: A={ 8'00000000 \wire1 [12:10] $auto$opt_expr.cc:189:group_cell_inputs$2083 }, B={ 20'00000000000000000000 $auto$wreduce.cc:455:run$1556 [0] }, Y=$0\reg24[20:0]
      New ports: A={ \wire1 [12:10] $auto$opt_expr.cc:189:group_cell_inputs$2083 }, B={ 12'000000000000 $auto$wreduce.cc:455:run$1556 [0] }, Y=$0\reg24[20:0] [12:0]
      New connections: $0\reg24[20:0] [20:13] = 8'00000000
    Consolidated identical input bits for $mux cell $procmux$1279:
      Old ports: A={ 3'000 $logic_and$rtl.v:186$89_Y }, B={ 3'111 $auto$opt_expr.cc:189:group_cell_inputs$2068 }, Y=$procmux$1279_Y
      New ports: A={ 1'0 $logic_and$rtl.v:186$89_Y }, B={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$2068 }, Y=$procmux$1279_Y [1:0]
      New connections: $procmux$1279_Y [3:2] = { $procmux$1279_Y [1] $procmux$1279_Y [1] }
    Consolidated identical input bits for $mux cell $procmux$1284:
      Old ports: A={ $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 }, B={ \reg27 [6] \reg27 [6] \reg27 [6] \reg27 }, Y=$procmux$1284_Y
      New ports: A={ $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 $auto$rtlil.cc:1836:ReduceOr$1936 }, B=\reg27, Y=$procmux$1284_Y [6:0]
      New connections: $procmux$1284_Y [9:7] = { $procmux$1284_Y [6] $procmux$1284_Y [6] $procmux$1284_Y [6] }
    Consolidated identical input bits for $mux cell $procmux$1299:
      Old ports: A=5'00000, B={ 4'0000 $auto$wreduce.cc:455:run$1558 [0] }, Y=$0\reg19[8:0]
      New ports: A=1'0, B=$auto$wreduce.cc:455:run$1558 [0], Y=$0\reg19[8:0] [0]
      New connections: $0\reg19[8:0] [4:1] = 4'0000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:161$32:
      Old ports: A={ 1'0 \wire3 }, B=13'0000000000000, Y=$ternary$rtl.v:161$32_Y [12:0]
      New ports: A=\wire3, B=12'000000000000, Y=$ternary$rtl.v:161$32_Y [11:0]
      New connections: $ternary$rtl.v:161$32_Y [12] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:162$38:
      Old ports: A={ 19'0000000000000000000 \reg13 [2] }, B={ 7'0000000 $ternary$rtl.v:161$32_Y [12:0] }, Y=$ternary$rtl.v:162$38_Y [19:0]
      New ports: A={ 12'000000000000 \reg13 [2] }, B=$ternary$rtl.v:161$32_Y [12:0], Y=$ternary$rtl.v:162$38_Y [12:0]
      New connections: $ternary$rtl.v:162$38_Y [19:13] = 7'0000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:166$41:
      Old ports: A={ 2'00 \wire5 [0] }, B=3'000, Y=$ternary$rtl.v:166$41_Y [2:0]
      New ports: A=\wire5 [0], B=1'0, Y=$ternary$rtl.v:166$41_Y [0]
      New connections: $ternary$rtl.v:166$41_Y [2:1] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:180$77:
      Old ports: A=2'00, B={ 1'0 \reg8 [0] }, Y=$auto$wreduce.cc:455:run$1564 [1:0]
      New ports: A=1'0, B=\reg8 [0], Y=$auto$wreduce.cc:455:run$1564 [0]
      New connections: $auto$wreduce.cc:455:run$1564 [1] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:257$194:
      Old ports: A={ $auto$opt_expr.cc:189:group_cell_inputs$2095 8'00001010 }, B=9'000000001, Y=$ternary$rtl.v:257$194_Y [8:0]
      New ports: A={ $auto$opt_expr.cc:189:group_cell_inputs$2095 2'10 }, B=3'001, Y={ $ternary$rtl.v:257$194_Y [8] $ternary$rtl.v:257$194_Y [1:0] }
      New connections: $ternary$rtl.v:257$194_Y [7:2] = { 4'0000 $ternary$rtl.v:257$194_Y [1] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:272$210:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$1541 [0] }, B=8'10101111, Y=$ternary$rtl.v:272$210_Y [7:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1541 [0] }, B=2'11, Y=$ternary$rtl.v:272$210_Y [1:0]
      New connections: $ternary$rtl.v:272$210_Y [7:2] = { $ternary$rtl.v:272$210_Y [1] 1'0 $ternary$rtl.v:272$210_Y [1] 1'0 $ternary$rtl.v:272$210_Y [1] $ternary$rtl.v:272$210_Y [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:313$273:
      Old ports: A={ 8'10111111 $auto$rtlil.cc:1836:ReduceOr$1895 \wire3 }, B={ 5'00000 $ternary$rtl.v:312$270_Y }, Y=\wire196
      New ports: A={ 4'1111 $auto$rtlil.cc:1836:ReduceOr$1895 \wire3 }, B={ 1'0 $ternary$rtl.v:312$270_Y }, Y=\wire196 [16:0]
      New connections: \wire196 [20:17] = { \wire196 [16] 1'0 \wire196 [16] \wire196 [16] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:316$280:
      Old ports: A=20'00000000000000000000, B={ 16'0000000000000000 \reg9 [3:1] $auto$opt_expr.cc:189:group_cell_inputs$2115 }, Y=$ternary$rtl.v:316$280_Y
      New ports: A=4'0000, B={ \reg9 [3:1] $auto$opt_expr.cc:189:group_cell_inputs$2115 }, Y=$ternary$rtl.v:316$280_Y [3:0]
      New connections: $ternary$rtl.v:316$280_Y [19:4] = 16'0000000000000000
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:316$281: { $ternary$rtl.v:316$280_Y [0] $ternary$rtl.v:316$280_Y [1] $ternary$rtl.v:316$280_Y [2] $ternary$rtl.v:316$280_Y [3] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:162$38:
      Old ports: A={ 12'000000000000 \reg13 [2] }, B=$ternary$rtl.v:161$32_Y [12:0], Y=$ternary$rtl.v:162$38_Y [12:0]
      New ports: A={ 11'00000000000 \reg13 [2] }, B=$ternary$rtl.v:161$32_Y [11:0], Y=$ternary$rtl.v:162$38_Y [11:0]
      New connections: $ternary$rtl.v:162$38_Y [12] = 1'0
  Optimizing cells in module \top.
Performed a total of 54 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
<suppressed ~1 debug messages>
Optimizing module module159.
<suppressed ~12 debug messages>
Optimizing module module40.
<suppressed ~4 debug messages>
Optimizing module module46.
<suppressed ~1 debug messages>
Optimizing module module88.
<suppressed ~2 debug messages>
Optimizing module top.
<suppressed ~9 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~144 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~6 debug messages>

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.20.16. Rerunning OPT passes. (Maybe there is more to do..)

2.20.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module113..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module159..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module40..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module88..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~144 debug messages>

2.20.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module113.
  Optimizing cells in module \module159.
  Optimizing cells in module \module40.
  Optimizing cells in module \module46.
  Optimizing cells in module \module88.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..

2.20.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.

2.20.23. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:2982685e60dc24f40b46d083956de054b74ff0b4$paramod$5a92efcd174aa616566b711ccb581f0e12beb366\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_xnor.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=4\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$constmap:91d45a566455888bea4819d31750cd4e22e85f20$paramod$e9c70241bf79b894b3874331e3b0dd7ff8f30c37\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=4\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$constmap:65fbb2f65e26e8683cf755a9e46c342ba91b13cb$paramod$61bd837d4e19008ebd86ba297da87f281a24c1ce\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:2584645d77c220470beee3f280e80899fe1624d0$paramod$7829572ca54b861fa95a699b9d544f8bcede6db7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=4\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$constmap:36930f3bcb566694ae708ceaff1fd95ab3d92a55$paramod$e31d3cdafdd03d5cc4fdd28530dc4b5414dad494\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=11\Y_WIDTH=12 for cells of type $alu.
Using template $paramod$constmap:399cfa39d2de2cc7e7d4720a2b2aca38b9dd0af7$paramod$b2340b2ea785adf890c7db5d60b366032d9eb7bb\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:855354ae2469d2a6608cefc002710f76f4d16663$paramod$1bc2c0cadf7adf084a1ebee301bca76ecfb22365\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:b8a14ddf8c991502740dc767a11a27df3c034237$paramod$67dab69b6515c560d3062d0569875937d0110f5a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:bb4d97f628a8664386f30d87bba26b6bed3280a8$paramod$9b0ecc5b9ca085aa835afdb71e168c344a29c69b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:0aefae4e7c1c2e7a70ba5492a70e63b71393f867$paramod$83aab70ec4445cb92c46aa983f71b5d47287e92f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=10 for cells of type $alu.
Using template $paramod$constmap:c8e3c8b4a6179bb8ded7b4ae22795fabdccc26ef$paramod$de8d7aa5a876a9f0afa46e0121e2da19bebf38b8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=1\Y_WIDTH=25 for cells of type $alu.
Using extmapper simplemap for cells of type $xnor.
Using extmapper maccmap for cells of type $macc.
  add \reg23 * \wire5 [0] (11x1 bits, unsigned)
  add 13'1111101000001 * 1'0 (13x1 bits, unsigned)
  add { 20'10100010000000000000 \reg8 [0] } * \reg4 [0] (21x1 bits, unsigned)
  add bits \reg8 [0] (1 bits)
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=3\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=10 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=25 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:f5598b838d5441b9585148b07271211dbe246f61$paramod$1f4a8e3012108c254cd899e302bb8f5d81de86d0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod$constmap:a125a83ed543935a6a48d383f70e61a1904ec6d6$paramod$2c7a11eadd85fbdccf7456afd65bdec0fb4d2cce\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:f38f98a0f4356a806fcbd7852091632748663578$paramod$ba28961a5aab24c3c4e6cec68e1ac23cf96cde6f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=10\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
  add { 7'1111111 \wire166 [12:0] } * \wire161 [6:4] (20x3 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:2976eb164ba571fda0a2acf50f5a0722abae84dd$paramod$ed6ba1fe852153f3e720fdbceb02e1e74ee47d2b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:344c11c609c4a47469e07110397cb35c0dbe074d$paramod$73eddd8e930b818f8329b554662e22167d132999\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:d5fa63db0c75b4dbf1e294e672d14a499978cb31$paramod$b36bbe076757bca52294bca21855b80aedd60af5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:1d9adff7eaef0eb088372395c49b22b3b3f3573f$paramod$0730f52fe89bffc0951a01d72374a0abcf7ffdf2\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:b40198ecb86f36e820cf8b11467d5b23ec2900a2$paramod$6aae23987a8b0404e86df5c5ecd997f25ed82044\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=15\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=3\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
  add { $auto$wreduce.cc:455:run$1453 [7] 1'0 $auto$wreduce.cc:455:run$1453 [5:0] } * \reg176 [6:5] (8x2 bits, unsigned)
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=20 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=10\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod$constmap:f513a2f83c05a53811eaa86aadc9872f0f693d11$paramod$914c05b6d96b66698788fcab7b85d4a152ab1a6a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:59100fef4d5bf78b6df8c77a833fbc65d15eeaf5$paramod$a7ad089c686786c7fbde0b7e802663ad263a232d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
  add $auto$wreduce.cc:455:run$1496 [7:0] * $ternary$rtl.v:923$904_Y [0] (8x1 bits, unsigned)
  add $neg$rtl.v:941$917_Y * $auto$rtlil.cc:1832:Not$1734 (16x1 bits, signed)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=7\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
  add $sshr$rtl.v:801$819_Y * \wire90 (13x5 bits, unsigned)
Using template $paramod$constmap:5c72f1d35974ba271c14513bc2951b8cdd160958$paramod$fb25f9ddb9d4b30fcc32063fb4c28c6a262b214b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$e0e3cdc6ae9cc8675a1dc418b62b1dfc8b99f93b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:717b74b57801c277fbcbfa53220daa6203aac859$paramod$c427aeb95cdf420781bec173329729443229b134\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:1eeb13819ee8d5c5cdcc3c2d6c955f5d670ee377$paramod$5898f7f099a15e867ab45a0cdf2dd2235902b5a0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_fa\WIDTH=13 for cells of type $fa.
No more expansions possible.
<suppressed ~12227 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
<suppressed ~1315 debug messages>
Optimizing module module40.
<suppressed ~542 debug messages>
Optimizing module module46.
<suppressed ~729 debug messages>
Optimizing module module88.
<suppressed ~370 debug messages>
Optimizing module top.
<suppressed ~2006 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
<suppressed ~843 debug messages>
Finding identical cells in module `\module40'.
<suppressed ~417 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~348 debug messages>
Finding identical cells in module `\module88'.
<suppressed ~228 debug messages>
Finding identical cells in module `\top'.
<suppressed ~999 debug messages>
Removed a total of 945 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$16095 ($_DFF_P_) from module module159.
Removing $auto$simplemap.cc:420:simplemap_dff$19843 ($_DFF_P_) from module module46.
Removing $auto$simplemap.cc:420:simplemap_dff$6436 ($_DFF_P_) from module top.
Replaced 3 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 1154 unused cells and 3765 unused wires.
<suppressed ~1160 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
<suppressed ~18 debug messages>
Optimizing module module40.
<suppressed ~13 debug messages>
Optimizing module module46.
<suppressed ~14 debug messages>
Optimizing module module88.
<suppressed ~2 debug messages>
Optimizing module top.
<suppressed ~332 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
<suppressed ~21 debug messages>
Finding identical cells in module `\module40'.
<suppressed ~24 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
<suppressed ~609 debug messages>
Removed a total of 219 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$6507 ($_DFF_P_) from module top.
Replaced 1 DFF cells.

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 212 unused cells and 112 unused wires.
<suppressed ~217 debug messages>

2.22.10. Rerunning OPT passes. (Removed registers in this run.)

2.22.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
<suppressed ~1 debug messages>
Optimizing module module40.
<suppressed ~2 debug messages>
Optimizing module module46.
Optimizing module module88.
Optimizing module top.
<suppressed ~84 debug messages>

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

2.22.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$6605 ($_DFF_P_) from module top.
Replaced 1 DFF cells.

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

2.22.15. Rerunning OPT passes. (Removed registers in this run.)

2.22.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
Optimizing module module40.
Optimizing module module46.
Optimizing module module88.
Optimizing module top.
<suppressed ~6 debug messages>

2.22.17. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.18. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.22.20. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module113' to `<abc-temp-dir>/input.blif'..
Extracted 23 gates and 36 wires to a netlist network with 12 inputs and 3 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:        1
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:        internal signals:       21
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        3
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module159' to `<abc-temp-dir>/input.blif'..
Extracted 2132 gates and 2367 wires to a netlist network with 233 inputs and 204 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       58
ABC RESULTS:            ANDNOT cells:      246
ABC RESULTS:              AOI3 cells:       85
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:      308
ABC RESULTS:              NAND cells:       76
ABC RESULTS:               NOR cells:       79
ABC RESULTS:               NOT cells:      108
ABC RESULTS:              OAI3 cells:       41
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:      411
ABC RESULTS:             ORNOT cells:       68
ABC RESULTS:              XNOR cells:       52
ABC RESULTS:               XOR cells:      204
ABC RESULTS:        internal signals:     1930
ABC RESULTS:           input signals:      233
ABC RESULTS:          output signals:      204
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module40' to `<abc-temp-dir>/input.blif'..
Extracted 1071 gates and 1234 wires to a netlist network with 161 inputs and 125 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       26
ABC RESULTS:            ANDNOT cells:      114
ABC RESULTS:              AOI3 cells:       32
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               MUX cells:      203
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       34
ABC RESULTS:               NOT cells:       50
ABC RESULTS:              OAI3 cells:       17
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:      276
ABC RESULTS:             ORNOT cells:       34
ABC RESULTS:              XNOR cells:       25
ABC RESULTS:               XOR cells:       56
ABC RESULTS:        internal signals:      948
ABC RESULTS:           input signals:      161
ABC RESULTS:          output signals:      125
Removing temp directory.

2.23.4. Extracting gate netlist of module `\module46' to `<abc-temp-dir>/input.blif'..
Extracted 582 gates and 728 wires to a netlist network with 144 inputs and 131 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       49
ABC RESULTS:            ANDNOT cells:       66
ABC RESULTS:              AOI3 cells:       20
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       84
ABC RESULTS:              NAND cells:       23
ABC RESULTS:               NOR cells:       17
ABC RESULTS:               NOT cells:       22
ABC RESULTS:              OAI3 cells:        7
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      118
ABC RESULTS:             ORNOT cells:       23
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       37
ABC RESULTS:        internal signals:      453
ABC RESULTS:           input signals:      144
ABC RESULTS:          output signals:      131
Removing temp directory.

2.23.5. Extracting gate netlist of module `\module88' to `<abc-temp-dir>/input.blif'..
Extracted 813 gates and 884 wires to a netlist network with 69 inputs and 54 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       22
ABC RESULTS:            ANDNOT cells:      172
ABC RESULTS:              AOI3 cells:       28
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       99
ABC RESULTS:              NAND cells:       20
ABC RESULTS:               NOR cells:       15
ABC RESULTS:               NOT cells:       50
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:      186
ABC RESULTS:             ORNOT cells:       14
ABC RESULTS:              XNOR cells:       43
ABC RESULTS:               XOR cells:      130
ABC RESULTS:        internal signals:      761
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       54
Removing temp directory.

2.23.6. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1683 gates and 1954 wires to a netlist network with 269 inputs and 267 outputs.

2.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       48
ABC RESULTS:            ANDNOT cells:      251
ABC RESULTS:              AOI3 cells:       86
ABC RESULTS:              AOI4 cells:        3
ABC RESULTS:               MUX cells:      177
ABC RESULTS:              NAND cells:       54
ABC RESULTS:               NOR cells:       39
ABC RESULTS:               NOT cells:      115
ABC RESULTS:              OAI3 cells:       47
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      288
ABC RESULTS:             ORNOT cells:       35
ABC RESULTS:              XNOR cells:       35
ABC RESULTS:               XOR cells:      142
ABC RESULTS:        internal signals:     1418
ABC RESULTS:           input signals:      269
ABC RESULTS:          output signals:      267
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module113.
Optimizing module module159.
<suppressed ~53 debug messages>
Optimizing module module40.
<suppressed ~21 debug messages>
Optimizing module module46.
<suppressed ~10 debug messages>
Optimizing module module88.
<suppressed ~9 debug messages>
Optimizing module top.
<suppressed ~30 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module113'.
Finding identical cells in module `\module159'.
<suppressed ~24 debug messages>
Finding identical cells in module `\module40'.
Finding identical cells in module `\module46'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module88'.
Finding identical cells in module `\top'.
<suppressed ~27 debug messages>
Removed a total of 19 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module113..
Finding unused cells or wires in module \module159..
Finding unused cells or wires in module \module40..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module88..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 3375 unused wires.
<suppressed ~11 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module113 ===

   Number of wires:                 36
   Number of wire bits:            298
   Number of public wires:          16
   Number of public wire bits:     278
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     $_ANDNOT_                       6
     $_AND_                          2
     $_MUX_                          1
     $_NAND_                         5
     $_NOR_                          2
     $_OR_                           7

=== module159 ===

   Number of wires:               1575
   Number of wire bits:           2508
   Number of public wires:          32
   Number of public wire bits:     748
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1920
     $_ANDNOT_                     245
     $_AND_                         58
     $_AOI3_                        83
     $_AOI4_                         1
     $_DFF_P_                      191
     $_MUX_                        306
     $_NAND_                        76
     $_NOR_                         79
     $_NOT_                        106
     $_OAI3_                        40
     $_OAI4_                         2
     $_ORNOT_                       68
     $_OR_                         410
     $_XNOR_                        52
     $_XOR_                        203

=== module40 ===

   Number of wires:                824
   Number of wire bits:           2248
   Number of public wires:          36
   Number of public wire bits:     720
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                971
     $_ANDNOT_                     114
     $_AND_                         26
     $_AOI3_                        32
     $_DFF_P_                       67
     $_MUX_                        203
     $_NAND_                        33
     $_NOR_                         34
     $_NOT_                         49
     $_OAI3_                        17
     $_OAI4_                         2
     $_ORNOT_                       34
     $_OR_                         276
     $_XNOR_                        25
     $_XOR_                         56
     module113                       1
     module46                        1
     module88                        1

=== module46 ===

   Number of wires:                403
   Number of wire bits:           1323
   Number of public wires:          40
   Number of public wire bits:     834
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                604
     $_ANDNOT_                      66
     $_AND_                         48
     $_AOI3_                        20
     $_AOI4_                         1
     $_DFF_P_                      123
     $_MUX_                         84
     $_NAND_                        23
     $_NOR_                         17
     $_NOT_                         22
     $_OAI3_                         7
     $_OAI4_                         1
     $_ORNOT_                       23
     $_OR_                         118
     $_XNOR_                        14
     $_XOR_                         37

=== module88 ===

   Number of wires:                753
   Number of wire bits:           1066
   Number of public wires:          19
   Number of public wire bits:     332
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                788
     $_ANDNOT_                     172
     $_AND_                         22
     $_AOI3_                        28
     $_AOI4_                         1
     $_MUX_                         99
     $_NAND_                        20
     $_NOR_                         15
     $_NOT_                         50
     $_OAI3_                         6
     $_OAI4_                         2
     $_ORNOT_                       14
     $_OR_                         186
     $_XNOR_                        43
     $_XOR_                        130

=== top ===

   Number of wires:               1131
   Number of wire bits:           4095
   Number of public wires:          58
   Number of public wire bits:    1430
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1570
     $_ANDNOT_                     251
     $_AND_                         48
     $_AOI3_                        84
     $_AOI4_                         3
     $_DFF_P_                      255
     $_MUX_                        177
     $_NAND_                        54
     $_NOR_                         38
     $_NOT_                        113
     $_OAI3_                        45
     $_OAI4_                         1
     $_ORNOT_                       35
     $_OR_                         284
     $_XNOR_                        35
     $_XOR_                        142
     module113                       1
     module159                       1
     module40                        1
     module46                        1
     module88                        1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module113..
checking module module159..
checking module module40..
checking module module46..
checking module module88..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module113'.
Dumping module `\module159'.
Dumping module `\module40'.
Dumping module `\module46'.
Dumping module `\module88'.
Dumping module `\top'.

Warnings: 27 unique messages, 27 total
End of script. Logfile hash: 38a0b0418a
CPU: user 6.91s system 0.03s, MEM: 73.80 MB total, 66.40 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 47x proc (1 sec), 16% 42x opt_clean (1 sec), ...
