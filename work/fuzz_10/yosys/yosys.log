
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module61'.
Generating RTLIL representation for module `\module16'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell top.modinst55 (module16).
Warning: Resizing cell port top.modinst72.wire66 from 18 bits to 17 bits.
Warning: Resizing cell port top.modinst72.y from 9 bits to 55 bits.
Warning: Resizing cell port top.modinst72.wire63 from 15 bits to 13 bits.
Warning: Resizing cell port top.modinst55.y from 18 bits to 372 bits.
Warning: Resizing cell port top.modinst55.wire21 from 17 bits to 7 bits.
Warning: Resizing cell port top.modinst55.wire20 from 15 bits to 7 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$rtl.v:254$220 in module module16.
Marked 2 switch rules as full_case in process $proc$rtl.v:64$23 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module16.$proc$rtl.v:184$281'.
  Set init value: \reg26 = 10'0000000000
Found init rule in `\module16.$proc$rtl.v:183$280'.
  Set init value: \reg27 = 7'0000000
Found init rule in `\module16.$proc$rtl.v:182$279'.
  Set init value: \reg28 = 17'00000000000000000
Found init rule in `\module16.$proc$rtl.v:181$278'.
  Set init value: \reg29 = 14'00000000000000
Found init rule in `\module16.$proc$rtl.v:169$277'.
  Set init value: \reg41 = 10'0000000000
Found init rule in `\module16.$proc$rtl.v:168$276'.
  Set init value: \reg42 = 11'00000000000
Found init rule in `\module16.$proc$rtl.v:167$275'.
  Set init value: \reg43 = 16'0000000000000000
Found init rule in `\module16.$proc$rtl.v:166$274'.
  Set init value: \reg44 = 13'0000000000000
Found init rule in `\module16.$proc$rtl.v:165$273'.
  Set init value: \reg45 = 7'0000000
Found init rule in `\module16.$proc$rtl.v:164$272'.
  Set init value: \reg46 = 12'000000000000
Found init rule in `\module16.$proc$rtl.v:163$271'.
  Set init value: \reg47 = 15'000000000000000
Found init rule in `\module16.$proc$rtl.v:160$270'.
  Set init value: \reg50 = 16'0000000000000000
Found init rule in `\top.$proc$rtl.v:21$146'.
  Set init value: \reg8 = 7'0000000
Found init rule in `\top.$proc$rtl.v:20$145'.
  Set init value: \reg9 = 11'00000000000
Found init rule in `\top.$proc$rtl.v:19$144'.
  Set init value: \reg10 = 12'000000000000
Found init rule in `\top.$proc$rtl.v:18$143'.
  Set init value: \reg11 = 4'0000
Found init rule in `\top.$proc$rtl.v:17$142'.
  Set init value: \reg12 = 18'000000000000000000
Found init rule in `\top.$proc$rtl.v:16$141'.
  Set init value: \reg13 = 14'00000000000000
Found init rule in `\top.$proc$rtl.v:15$140'.
  Set init value: \reg14 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:14$139'.
  Set init value: \reg15 = 9'000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module16.$proc$rtl.v:184$281'.
     1/1: $1\reg26[9:0]
Creating decoders for process `\module16.$proc$rtl.v:183$280'.
     1/1: $1\reg27[6:0]
Creating decoders for process `\module16.$proc$rtl.v:182$279'.
     1/1: $1\reg28[16:0]
Creating decoders for process `\module16.$proc$rtl.v:181$278'.
     1/1: $1\reg29[13:0]
Creating decoders for process `\module16.$proc$rtl.v:169$277'.
     1/1: $1\reg41[9:0]
Creating decoders for process `\module16.$proc$rtl.v:168$276'.
     1/1: $1\reg42[10:0]
Creating decoders for process `\module16.$proc$rtl.v:167$275'.
     1/1: $1\reg43[15:0]
Creating decoders for process `\module16.$proc$rtl.v:166$274'.
     1/1: $1\reg44[12:0]
Creating decoders for process `\module16.$proc$rtl.v:165$273'.
     1/1: $1\reg45[6:0]
Creating decoders for process `\module16.$proc$rtl.v:164$272'.
     1/1: $1\reg46[11:0]
Creating decoders for process `\module16.$proc$rtl.v:163$271'.
     1/1: $1\reg47[14:0]
Creating decoders for process `\module16.$proc$rtl.v:160$270'.
     1/1: $1\reg50[15:0]
Creating decoders for process `\module16.$proc$rtl.v:286$264'.
     1/1: $0\reg50[15:0]
Creating decoders for process `\module16.$proc$rtl.v:254$220'.
     1/7: $0\reg47[14:0]
     2/7: $0\reg41[9:0]
     3/7: $0\reg42[10:0]
     4/7: $0\reg43[15:0]
     5/7: $0\reg44[12:0]
     6/7: $0\reg45[6:0]
     7/7: $0\reg46[11:0]
Creating decoders for process `\module16.$proc$rtl.v:226$171'.
     1/4: $0\reg29[13:0]
     2/4: $0\reg28[16:0]
     3/4: $0\reg27[6:0]
     4/4: $0\reg26[9:0]
Creating decoders for process `\top.$proc$rtl.v:21$146'.
     1/1: $1\reg8[6:0]
Creating decoders for process `\top.$proc$rtl.v:20$145'.
     1/1: $1\reg9[10:0]
Creating decoders for process `\top.$proc$rtl.v:19$144'.
     1/1: $1\reg10[11:0]
Creating decoders for process `\top.$proc$rtl.v:18$143'.
     1/1: $1\reg11[3:0]
Creating decoders for process `\top.$proc$rtl.v:17$142'.
     1/1: $1\reg12[17:0]
Creating decoders for process `\top.$proc$rtl.v:16$141'.
     1/1: $1\reg13[13:0]
Creating decoders for process `\top.$proc$rtl.v:15$140'.
     1/1: $1\reg14[14:0]
Creating decoders for process `\top.$proc$rtl.v:14$139'.
     1/1: $1\reg15[8:0]
Creating decoders for process `\top.$proc$rtl.v:64$23'.
     1/8: $0\reg15[8:0]
     2/8: $0\reg14[14:0]
     3/8: $0\reg13[13:0]
     4/8: $0\reg12[17:0]
     5/8: $0\reg8[6:0]
     6/8: $0\reg9[10:0]
     7/8: $0\reg10[11:0]
     8/8: $0\reg11[3:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module16.\reg50' using process `\module16.$proc$rtl.v:286$264'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\module16.\reg47' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$321' with positive edge clock.
Creating register for signal `\module16.\reg46' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$322' with positive edge clock.
Creating register for signal `\module16.\reg45' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$323' with positive edge clock.
Creating register for signal `\module16.\reg44' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$324' with positive edge clock.
Creating register for signal `\module16.\reg43' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$325' with positive edge clock.
Creating register for signal `\module16.\reg42' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$326' with positive edge clock.
Creating register for signal `\module16.\reg41' using process `\module16.$proc$rtl.v:254$220'.
  created $dff cell `$procdff$327' with positive edge clock.
Creating register for signal `\module16.\reg29' using process `\module16.$proc$rtl.v:226$171'.
  created $dff cell `$procdff$328' with positive edge clock.
Creating register for signal `\module16.\reg28' using process `\module16.$proc$rtl.v:226$171'.
  created $dff cell `$procdff$329' with positive edge clock.
Creating register for signal `\module16.\reg27' using process `\module16.$proc$rtl.v:226$171'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\module16.\reg26' using process `\module16.$proc$rtl.v:226$171'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\top.\reg15' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\top.\reg14' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$333' with positive edge clock.
Creating register for signal `\top.\reg13' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$334' with positive edge clock.
Creating register for signal `\top.\reg12' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$335' with positive edge clock.
Creating register for signal `\top.\reg11' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$336' with positive edge clock.
Creating register for signal `\top.\reg10' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\top.\reg9' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$338' with positive edge clock.
Creating register for signal `\top.\reg8' using process `\top.$proc$rtl.v:64$23'.
  created $dff cell `$procdff$339' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module16.$proc$rtl.v:184$281'.
Removing empty process `module16.$proc$rtl.v:183$280'.
Removing empty process `module16.$proc$rtl.v:182$279'.
Removing empty process `module16.$proc$rtl.v:181$278'.
Removing empty process `module16.$proc$rtl.v:169$277'.
Removing empty process `module16.$proc$rtl.v:168$276'.
Removing empty process `module16.$proc$rtl.v:167$275'.
Removing empty process `module16.$proc$rtl.v:166$274'.
Removing empty process `module16.$proc$rtl.v:165$273'.
Removing empty process `module16.$proc$rtl.v:164$272'.
Removing empty process `module16.$proc$rtl.v:163$271'.
Removing empty process `module16.$proc$rtl.v:160$270'.
Removing empty process `module16.$proc$rtl.v:286$264'.
Found and cleaned up 1 empty switch in `\module16.$proc$rtl.v:254$220'.
Removing empty process `module16.$proc$rtl.v:254$220'.
Removing empty process `module16.$proc$rtl.v:226$171'.
Removing empty process `top.$proc$rtl.v:21$146'.
Removing empty process `top.$proc$rtl.v:20$145'.
Removing empty process `top.$proc$rtl.v:19$144'.
Removing empty process `top.$proc$rtl.v:18$143'.
Removing empty process `top.$proc$rtl.v:17$142'.
Removing empty process `top.$proc$rtl.v:16$141'.
Removing empty process `top.$proc$rtl.v:15$140'.
Removing empty process `top.$proc$rtl.v:14$139'.
Found and cleaned up 2 empty switches in `\top.$proc$rtl.v:64$23'.
Removing empty process `top.$proc$rtl.v:64$23'.
Cleaned up 3 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
<suppressed ~10 debug messages>
Optimizing module module61.
<suppressed ~4 debug messages>
Optimizing module top.
<suppressed ~15 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 21 unused cells and 134 unused wires.
<suppressed ~53 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module16..
checking module module61..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
    New input vector for $reduce_or cell $reduce_or$rtl.v:243$199: { \wire20 [0] \wire20 [1] \wire20 [2] \wire20 [3] \wire20 [4] \wire20 [5] \wire20 [6] \wire23 [0] \wire23 [1] \wire23 [2] \wire23 [3] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:240$190: { \wire18 [0] \wire18 [1] \wire18 [2] \wire18 [3] \wire18 [4] \wire18 [5] \wire18 [6] \wire18 [7] \wire18 [8] \wire18 [9] \wire18 [10] \wire18 [11] \wire18 [12] \wire18 [13] \wire18 [14] \wire18 [15] \wire18 [16] \wire18 [17] \wire18 [18] \wire18 [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:233$179: { $ternary$rtl.v:233$178_Y [0] $ternary$rtl.v:233$178_Y [1] $ternary$rtl.v:233$178_Y [2] $ternary$rtl.v:233$178_Y [3] $ternary$rtl.v:233$178_Y [4] $ternary$rtl.v:233$178_Y [5] $ternary$rtl.v:233$178_Y [6] $ternary$rtl.v:233$178_Y [7] $ternary$rtl.v:233$178_Y [8] $ternary$rtl.v:233$178_Y [9] $ternary$rtl.v:233$178_Y [10] $ternary$rtl.v:233$178_Y [11] $ternary$rtl.v:233$178_Y [12] $ternary$rtl.v:233$178_Y [13] $ternary$rtl.v:233$178_Y [14] $ternary$rtl.v:233$178_Y [15] $ternary$rtl.v:233$178_Y [16] $ternary$rtl.v:233$178_Y [17] $ternary$rtl.v:233$178_Y [18] $ternary$rtl.v:233$178_Y [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:274$253: { \reg42 [1] \reg42 [2] \reg42 [3] \reg42 [4] \reg42 [5] \reg42 [6] \reg42 [7] \reg42 [8] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:265$232: { \reg26 [0] \reg26 [1] \reg26 [2] \reg26 [3] \reg26 [4] \reg26 [5] \reg26 [6] \reg26 [7] \reg26 [8] \reg26 [9] }
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:82$61: { \wire3 [5] \wire3 [6] \wire3 [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$59: { $mul$rtl.v:81$58_Y [0] $mul$rtl.v:81$58_Y [1] $mul$rtl.v:81$58_Y [2] $mul$rtl.v:81$58_Y [3] $mul$rtl.v:81$58_Y [4] $mul$rtl.v:81$58_Y [5] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:67$24: { \wire4 [0] \wire4 [1] \wire4 [2] \wire4 [3] \wire4 [4] \wire4 [5] \wire4 [6] \wire4 [7] \wire4 [8] \wire4 [9] \wire4 [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:97$89: { \wire3 [0] \wire3 [1] \wire3 [2] \wire3 [3] \wire3 [4] \wire3 [5] \wire3 [6] \wire3 [7] \wire3 [8] \wire3 [9] \wire3 [10] \wire3 [11] \wire3 [12] \wire3 [13] \wire3 [14] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:75$48: { \wire4 [0] \wire4 [1] \wire4 [2] \wire4 [3] \wire4 [4] \wire4 [5] \wire4 [6] \wire4 [7] \wire4 [8] \wire4 [9] \wire4 [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:63$20: { \wire0 [0] \wire0 [1] \wire0 [2] \wire0 [3] \wire0 [4] \wire0 [5] \wire0 [6] \wire0 [7] \wire0 [8] \wire0 [9] \wire0 [10] \wire0 [11] \wire0 [12] \wire0 [13] \wire0 [14] \wire0 [15] \wire0 [16] \wire0 [17] \wire0 [18] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:105$106: { \reg9 [0] \reg9 [1] \reg9 [2] \reg9 [3] \reg9 [4] \reg9 [5] \reg9 [6] \reg9 [7] \reg9 [8] \reg9 [9] \reg9 [10] }
  Optimizing cells in module \top.
Performed a total of 12 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$328 ($dff) from module module16.
Replaced 1 DFF cells.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
<suppressed ~3 debug messages>
Optimizing module module61.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:270$249.
    dead port 2/2 on $mux $ternary$rtl.v:270$249.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~39 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 8 unused wires.
<suppressed ~6 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~38 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 10 bits (of 11) from mux cell module16.$procmux$285 ($mux).
Removed top 16 bits (of 27) from mux cell module16.$ternary$rtl.v:232$175 ($mux).
Removed top 11 bits (of 15) from port Y of cell module16.$xor$rtl.v:223$170 ($xor).
Removed top 11 bits (of 15) from port B of cell module16.$xor$rtl.v:223$170 ($xor).
Removed top 19 bits (of 27) from mux cell module16.$ternary$rtl.v:234$183 ($mux).
Removed top 20 bits (of 27) from mux cell module16.$ternary$rtl.v:234$184 ($mux).
Removed top 2 bits (of 17) from mux cell module16.$ternary$rtl.v:236$187 ($mux).
Removed top 2 bits (of 17) from port B of cell module16.$add$rtl.v:236$188 ($add).
Removed top 1 bits (of 17) from port Y of cell module16.$add$rtl.v:236$188 ($add).
Removed top 4 bits (of 8) from mux cell module16.$ternary$rtl.v:241$193 ($mux).
Removed top 16 bits (of 17) from mux cell module16.$ternary$rtl.v:242$196 ($mux).
Removed top 8 bits (of 9) from port A of cell module16.$sub$rtl.v:242$198 ($sub).
Removed top 8 bits (of 9) from port B of cell module16.$sub$rtl.v:242$198 ($sub).
Removed top 1 bits (of 9) from port Y of cell module16.$sub$rtl.v:242$198 ($sub).
Removed top 21 bits (of 22) from port A of cell module16.$xor$rtl.v:247$204 ($xor).
Removed top 21 bits (of 22) from port Y of cell module16.$xor$rtl.v:247$204 ($xor).
Removed top 3 bits (of 4) from port A of cell module16.$mul$rtl.v:247$208 ($mul).
Removed top 5 bits (of 23) from port Y of cell module16.$shr$rtl.v:247$209 ($shr).
Removed top 3 bits (of 10) from port Y of cell module16.$and$rtl.v:249$210 ($and).
Removed top 3 bits (of 10) from port A of cell module16.$and$rtl.v:249$210 ($and).
Removed top 2 bits (of 9) from port B of cell module16.$and$rtl.v:249$210 ($and).
Removed top 14 bits (of 16) from port A of cell module16.$ge$rtl.v:250$211 ($ge).
Removed top 9 bits (of 16) from port B of cell module16.$ge$rtl.v:250$211 ($ge).
Removed top 2 bits (of 17) from port A of cell module16.$not$rtl.v:251$215 ($not).
Removed top 17 bits (of 18) from port A of cell module16.$add$rtl.v:251$217 ($add).
Removed top 5 bits (of 18) from port Y of cell module16.$add$rtl.v:251$217 ($add).
Removed top 5 bits (of 18) from port B of cell module16.$add$rtl.v:251$217 ($add).
Removed top 15 bits (of 16) from port A of cell module16.$xnor$rtl.v:252$218 ($xnor).
Removed top 5 bits (of 16) from port Y of cell module16.$xnor$rtl.v:252$218 ($xnor).
Removed top 13 bits (of 16) from mux cell module16.$ternary$rtl.v:261$225 ($mux).
Removed top 16 bits (of 17) from port B of cell module16.$shr$rtl.v:257$221 ($shr).
Removed top 3 bits (of 10) from port B of cell module16.$or$rtl.v:263$227 ($or).
Removed top 4 bits (of 11) from port Y of cell module16.$or$rtl.v:263$227 ($or).
Removed top 8 bits (of 9) from port A of cell module16.$gt$rtl.v:266$234 ($gt).
Removed top 28 bits (of 29) from port A of cell module16.$and$rtl.v:267$240 ($and).
Removed top 28 bits (of 29) from port B of cell module16.$and$rtl.v:267$240 ($and).
Removed top 28 bits (of 29) from port Y of cell module16.$and$rtl.v:267$240 ($and).
Removed top 11 bits (of 13) from port A of cell module16.$neg$rtl.v:270$250 ($neg).
Removed top 6 bits (of 13) from port Y of cell module16.$neg$rtl.v:270$250 ($neg).
Removed top 1 bits (of 13) from port Y of cell module16.$not$rtl.v:278$255 ($not).
Removed top 1 bits (of 13) from port A of cell module16.$not$rtl.v:278$255 ($not).
Removed top 2 bits (of 17) from mux cell module16.$ternary$rtl.v:284$261 ($mux).
Removed top 7 bits (of 22) from mux cell module16.$ternary$rtl.v:281$258 ($mux).
Removed top 2 bits (of 17) from port A of cell module16.$ge$rtl.v:284$262 ($ge).
Removed top 16 bits (of 17) from port A of cell module16.$sub$rtl.v:284$263 ($sub).
Removed top 2 bits (of 17) from port B of cell module16.$sub$rtl.v:284$263 ($sub).
Removed top 13 bits (of 17) from port Y of cell module16.$sub$rtl.v:284$263 ($sub).
Removed top 11 bits (of 15) from port B of cell module16.$sub$rtl.v:284$263 ($sub).
Removed top 12 bits (of 13) from mux cell module16.$procmux$291 ($mux).
Removed top 1 bits (of 16) from FF cell module16.$procdff$320 ($dff).
Removed top 12 bits (of 13) from FF cell module16.$procdff$324 ($dff).
Removed top 10 bits (of 11) from FF cell module16.$procdff$326 ($dff).
Removed top 2 bits (of 10) from FF cell module16.$procdff$327 ($dff).
Removed top 6 bits (of 10) from FF cell module16.$procdff$331 ($dff).
Removed top 7 bits (of 11) from mux cell module16.$ternary$rtl.v:232$175 ($mux).
Removed top 2 bits (of 8) from mux cell module16.$ternary$rtl.v:234$183 ($mux).
Removed top 1 bits (of 3) from port A of cell module16.$add$rtl.v:236$188 ($add).
Removed top 3 bits (of 7) from port A of cell module16.$and$rtl.v:249$210 ($and).
Removed top 4 bits (of 17) from port Y of cell module16.$not$rtl.v:251$215 ($not).
Removed top 2 bits (of 15) from port A of cell module16.$not$rtl.v:251$215 ($not).
Removed top 6 bits (of 10) from port B of cell module16.$xnor$rtl.v:252$218 ($xnor).
Removed top 10 bits (of 11) from port A of cell module16.$xnor$rtl.v:262$226 ($xnor).
Removed top 10 bits (of 12) from port A of cell module16.$not$rtl.v:278$255 ($not).
Converting cell module16.$not$rtl.v:278$255 ($not) from signed to unsigned.
Removed top 1 bits (of 2) from port A of cell module16.$not$rtl.v:278$255 ($not).
Removed top 3 bits (of 4) from FF cell module16.$procdff$331 ($dff).
Removed top 10 bits (of 11) from wire module16.$0\reg42[10:0].
Removed top 12 bits (of 13) from wire module16.$0\reg44[12:0].
Removed top 1 bits (of 17) from wire module16.$add$rtl.v:236$188_Y.
Removed top 28 bits (of 29) from wire module16.$and$rtl.v:267$240_Y.
Removed top 16 bits (of 17) from wire module16.$ge$rtl.v:284$262_Y.
Removed top 28 bits (of 29) from wire module16.$gt$rtl.v:266$234_Y.
Removed top 8 bits (of 9) from wire module16.$logic_and$rtl.v:242$197_Y.
Removed top 8 bits (of 9) from wire module16.$logic_not$rtl.v:265$231_Y.
Removed top 10 bits (of 11) from wire module16.$logic_not$rtl.v:274$254_Y.
Removed top 26 bits (of 27) from wire module16.$logic_or$rtl.v:232$173_Y.
Removed top 6 bits (of 13) from wire module16.$neg$rtl.v:270$250_Y.
Removed top 4 bits (of 17) from wire module16.$not$rtl.v:251$215_Y.
Removed top 1 bits (of 13) from wire module16.$not$rtl.v:278$255_Y.
Removed top 4 bits (of 11) from wire module16.$or$rtl.v:263$227_Y.
Removed top 3 bits (of 4) from wire module16.$reduce_xnor$rtl.v:247$207_Y.
Removed top 28 bits (of 29) from wire module16.$reduce_xor$rtl.v:263$230_Y.
Removed top 23 bits (of 27) from wire module16.$ternary$rtl.v:232$175_Y.
Removed top 21 bits (of 27) from wire module16.$ternary$rtl.v:234$183_Y.
Removed top 2 bits (of 17) from wire module16.$ternary$rtl.v:236$187_Y.
Removed top 4 bits (of 8) from wire module16.$ternary$rtl.v:241$193_Y.
Removed top 16 bits (of 17) from wire module16.$ternary$rtl.v:242$196_Y.
Removed top 13 bits (of 16) from wire module16.$ternary$rtl.v:261$225_Y.
Removed top 2 bits (of 17) from wire module16.$ternary$rtl.v:284$261_Y.
Removed top 21 bits (of 22) from wire module16.$xor$rtl.v:247$204_Y.
Removed top 16 bits (of 17) from wire module16.wire22.
Removed top 14 bits (of 15) from wire module16.wire30.
Removed top 8 bits (of 9) from wire module16.wire31.
Removed top 15 bits (of 16) from wire module16.wire33.
Removed top 9 bits (of 12) from wire module16.wire36.
Removed top 6 bits (of 9) from wire module16.wire40.
Removed top 3 bits (of 4) from port A of cell module61.$gt$rtl.v:140$151 ($gt).
Removed top 16 bits (of 17) from mux cell module61.$ternary$rtl.v:146$168 ($mux).
Removed top 8 bits (of 22) from port A of cell module61.$eq$rtl.v:146$167 ($eq).
Removed top 16 bits (of 17) from port A of cell module61.$add$rtl.v:146$169 ($add).
Removed top 3 bits (of 17) from port Y of cell module61.$add$rtl.v:146$169 ($add).
Removed top 3 bits (of 17) from port B of cell module61.$add$rtl.v:146$169 ($add).
Removed top 16 bits (of 17) from wire module61.$eq$rtl.v:146$167_Y.
Removed top 16 bits (of 17) from wire module61.$reduce_xnor$rtl.v:144$160_Y.
Removed top 16 bits (of 17) from wire module61.$ternary$rtl.v:146$168_Y.
Removed top 11 bits (of 14) from wire module61.wire67.
Removed top 21 bits (of 22) from wire module61.wire68.
Removed top 3 bits (of 4) from wire module61.wire69.
Removed top 3 bits (of 17) from wire module61.wire70.
Removed top 2 bits (of 21) from port A of cell top.$and$rtl.v:54$3 ($and).
Removed top 10 bits (of 21) from port Y of cell top.$and$rtl.v:54$3 ($and).
Removed top 8 bits (of 19) from port A of cell top.$and$rtl.v:54$3 ($and).
Removed top 10 bits (of 21) from port B of cell top.$and$rtl.v:54$3 ($and).
Removed top 1 bits (of 21) from mux cell top.$ternary$rtl.v:60$12 ($mux).
Removed top 13 bits (of 17) from port A of cell top.$or$rtl.v:63$22 ($or).
Removed top 10 bits (of 17) from port B of cell top.$or$rtl.v:63$22 ($or).
Removed top 10 bits (of 17) from port Y of cell top.$or$rtl.v:63$22 ($or).
Removed top 2 bits (of 3) from port B of cell top.$ne$rtl.v:67$27 ($ne).
Removed top 10 bits (of 17) from port A of cell top.$le$rtl.v:75$40 ($le).
Removed top 45 bits (of 56) from mux cell top.$ternary$rtl.v:75$43 ($mux).
Removed top 35 bits (of 56) from mux cell top.$ternary$rtl.v:75$46 ($mux).
Removed top 35 bits (of 56) from port B of cell top.$mul$rtl.v:75$47 ($mul).
Removed top 49 bits (of 56) from mux cell top.$ternary$rtl.v:77$57 ($mux).
Removed top 55 bits (of 56) from port A of cell top.$sshr$rtl.v:77$55 ($sshr).
Removed top 49 bits (of 56) from port Y of cell top.$sshr$rtl.v:77$55 ($sshr).
Removed top 5 bits (of 6) from port B of cell top.$mul$rtl.v:81$58 ($mul).
Removed top 6 bits (of 11) from port A of cell top.$sshl$rtl.v:84$63 ($sshl).
Removed top 13 bits (of 17) from mux cell top.$ternary$rtl.v:89$74 ($mux).
Removed top 10 bits (of 17) from port A of cell top.$not$rtl.v:95$78 ($not).
Removed top 5 bits (of 12) from port A of cell top.$eq$rtl.v:95$79 ($eq).
Removed top 16 bits (of 17) from port B of cell top.$lt$rtl.v:95$80 ($lt).
Removed top 8 bits (of 15) from port A of cell top.$le$rtl.v:96$81 ($le).
Removed top 19 bits (of 20) from port A of cell top.$mul$rtl.v:97$86 ($mul).
Removed top 9 bits (of 20) from mux cell top.$ternary$rtl.v:98$93 ($mux).
Removed top 9 bits (of 18) from port B of cell top.$le$rtl.v:103$96 ($le).
Removed top 19 bits (of 20) from port A of cell top.$sub$rtl.v:104$101 ($sub).
Removed top 8 bits (of 15) from port B of cell top.$mul$rtl.v:104$102 ($mul).
Removed top 19 bits (of 20) from port A of cell top.$or$rtl.v:104$104 ($or).
Removed top 17 bits (of 20) from port Y of cell top.$or$rtl.v:104$104 ($or).
Removed top 17 bits (of 20) from port B of cell top.$or$rtl.v:104$105 ($or).
Removed top 6 bits (of 20) from port Y of cell top.$or$rtl.v:104$105 ($or).
Removed top 6 bits (of 20) from port A of cell top.$or$rtl.v:104$105 ($or).
Removed top 4 bits (of 15) from mux cell top.$ternary$rtl.v:107$113 ($mux).
Removed top 10 bits (of 21) from mux cell top.$ternary$rtl.v:107$116 ($mux).
Removed top 10 bits (of 21) from port A of cell top.$ge$rtl.v:109$122 ($ge).
Removed top 15 bits (of 20) from mux cell top.$ternary$rtl.v:114$128 ($mux).
Removed top 6 bits (of 17) from port A of cell top.$ne$rtl.v:116$129 ($ne).
Removed top 10 bits (of 17) from port B of cell top.$ne$rtl.v:116$129 ($ne).
Removed top 10 bits (of 11) from port A of cell top.$not$rtl.v:117$131 ($not).
Removed top 14 bits (of 15) from FF cell top.$procdff$333 ($dff).
Removed top 8 bits (of 19) from port Y of cell top.$add$rtl.v:54$2 ($add).
Removed top 8 bits (of 19) from port B of cell top.$add$rtl.v:54$2 ($add).
Removed top 49 bits (of 56) from port Y of cell top.$mul$rtl.v:75$47 ($mul).
Removed top 9 bits (of 20) from mux cell top.$ternary$rtl.v:97$88 ($mux).
Removed top 6 bits (of 20) from port Y of cell top.$sub$rtl.v:104$101 ($sub).
Removed top 6 bits (of 20) from port B of cell top.$sub$rtl.v:104$101 ($sub).
Removed top 8 bits (of 19) from port Y of cell top.$mul$rtl.v:54$1 ($mul).
Removed top 9 bits (of 20) from port Y of cell top.$mul$rtl.v:97$86 ($mul).
Removed top 6 bits (of 20) from mux cell top.$ternary$rtl.v:104$100 ($mux).
Removed top 6 bits (of 20) from port Y of cell top.$shr$rtl.v:104$98 ($shr).
Removed top 14 bits (of 15) from wire top.$0\reg14[14:0].
Removed top 8 bits (of 19) from wire top.$add$rtl.v:54$2_Y.
Removed top 16 bits (of 17) from wire top.$eq$rtl.v:95$79_Y.
Removed top 19 bits (of 20) from wire top.$le$rtl.v:103$96_Y.
Removed top 55 bits (of 56) from wire top.$le$rtl.v:75$40_Y.
Removed top 2 bits (of 3) from wire top.$logic_and$rtl.v:67$26_Y.
Removed top 55 bits (of 56) from wire top.$logic_and$rtl.v:76$52_Y.
Removed top 6 bits (of 7) from wire top.$logic_not$rtl.v:81$60_Y.
Removed top 16 bits (of 17) from wire top.$logic_or$rtl.v:89$72_Y.
Removed top 8 bits (of 19) from wire top.$mul$rtl.v:54$1_Y.
Removed top 49 bits (of 56) from wire top.$mul$rtl.v:75$47_Y.
Removed top 9 bits (of 20) from wire top.$mul$rtl.v:97$86_Y.
Removed top 17 bits (of 20) from wire top.$or$rtl.v:104$104_Y.
Removed top 19 bits (of 20) from wire top.$reduce_xnor$rtl.v:104$103_Y.
Removed top 19 bits (of 20) from wire top.$reduce_xor$rtl.v:96$82_Y.
Removed top 49 bits (of 56) from wire top.$sshr$rtl.v:77$55_Y.
Removed top 6 bits (of 20) from wire top.$sub$rtl.v:104$101_Y.
Removed top 6 bits (of 20) from wire top.$ternary$rtl.v:104$100_Y.
Removed top 4 bits (of 15) from wire top.$ternary$rtl.v:107$113_Y.
Removed top 10 bits (of 21) from wire top.$ternary$rtl.v:107$116_Y.
Removed top 45 bits (of 56) from wire top.$ternary$rtl.v:75$43_Y.
Removed top 35 bits (of 56) from wire top.$ternary$rtl.v:75$46_Y.
Removed top 13 bits (of 17) from wire top.$ternary$rtl.v:89$74_Y.
Removed top 8 bits (of 15) from wire top.wire6.
Removed top 10 bits (of 17) from wire top.wire7.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 76 unused wires.
<suppressed ~4 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~252 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module16:
  creating $macc model for $add$rtl.v:236$188 ($add).
  creating $macc model for $add$rtl.v:251$217 ($add).
  creating $macc model for $mul$rtl.v:247$208 ($mul).
  creating $macc model for $neg$rtl.v:236$189 ($neg).
  creating $macc model for $neg$rtl.v:270$250 ($neg).
  creating $macc model for $sub$rtl.v:242$198 ($sub).
  creating $macc model for $sub$rtl.v:284$263 ($sub).
  creating $alu model for $macc $sub$rtl.v:284$263.
  creating $alu model for $macc $sub$rtl.v:242$198.
  creating $alu model for $macc $neg$rtl.v:270$250.
  creating $alu model for $macc $neg$rtl.v:236$189.
  creating $alu model for $macc $add$rtl.v:251$217.
  creating $alu model for $macc $add$rtl.v:236$188.
  creating $macc cell for $mul$rtl.v:247$208: $auto$alumacc.cc:354:replace_macc$402
  creating $alu model for $ge$rtl.v:250$211 ($ge): new $alu
  creating $alu model for $ge$rtl.v:284$262 ($ge): new $alu
  creating $alu model for $gt$rtl.v:245$205 ($gt): new $alu
  creating $alu model for $gt$rtl.v:266$234 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:266$234: $auto$alumacc.cc:474:replace_alu$407
  creating $alu cell for $gt$rtl.v:245$205: $auto$alumacc.cc:474:replace_alu$418
  creating $alu cell for $ge$rtl.v:284$262: $auto$alumacc.cc:474:replace_alu$429
  creating $alu cell for $ge$rtl.v:250$211: $auto$alumacc.cc:474:replace_alu$438
  creating $alu cell for $add$rtl.v:236$188: $auto$alumacc.cc:474:replace_alu$453
  creating $alu cell for $add$rtl.v:251$217: $auto$alumacc.cc:474:replace_alu$456
  creating $alu cell for $neg$rtl.v:236$189: $auto$alumacc.cc:474:replace_alu$459
  creating $alu cell for $neg$rtl.v:270$250: $auto$alumacc.cc:474:replace_alu$462
  creating $alu cell for $sub$rtl.v:242$198: $auto$alumacc.cc:474:replace_alu$465
  creating $alu cell for $sub$rtl.v:284$263: $auto$alumacc.cc:474:replace_alu$468
  created 10 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module61:
  creating $macc model for $add$rtl.v:146$169 ($add).
  creating $macc model for $neg$rtl.v:138$147 ($neg).
  creating $alu model for $macc $neg$rtl.v:138$147.
  creating $alu model for $macc $add$rtl.v:146$169.
  creating $alu model for $gt$rtl.v:140$151 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:140$151: $auto$alumacc.cc:474:replace_alu$472
  creating $alu cell for $add$rtl.v:146$169: $auto$alumacc.cc:474:replace_alu$483
  creating $alu cell for $neg$rtl.v:138$147: $auto$alumacc.cc:474:replace_alu$486
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:54$2 ($add).
  creating $macc model for $mul$rtl.v:104$102 ($mul).
  creating $macc model for $mul$rtl.v:54$1 ($mul).
  creating $macc model for $mul$rtl.v:71$35 ($mul).
  creating $macc model for $mul$rtl.v:75$47 ($mul).
  creating $macc model for $mul$rtl.v:81$58 ($mul).
  creating $macc model for $mul$rtl.v:97$86 ($mul).
  creating $macc model for $sub$rtl.v:104$101 ($sub).
  merging $macc model for $mul$rtl.v:54$1 into $add$rtl.v:54$2.
  creating $alu model for $macc $sub$rtl.v:104$101.
  creating $macc cell for $mul$rtl.v:81$58: $auto$alumacc.cc:354:replace_macc$489
  creating $macc cell for $mul$rtl.v:75$47: $auto$alumacc.cc:354:replace_macc$490
  creating $macc cell for $mul$rtl.v:71$35: $auto$alumacc.cc:354:replace_macc$491
  creating $macc cell for $mul$rtl.v:97$86: $auto$alumacc.cc:354:replace_macc$492
  creating $macc cell for $mul$rtl.v:104$102: $auto$alumacc.cc:354:replace_macc$493
  creating $macc cell for $add$rtl.v:54$2: $auto$alumacc.cc:354:replace_macc$494
  creating $alu model for $ge$rtl.v:109$122 ($ge): new $alu
  creating $alu model for $le$rtl.v:103$96 ($le): new $alu
  creating $alu model for $le$rtl.v:75$40 ($le): new $alu
  creating $alu model for $le$rtl.v:96$81 ($le): new $alu
  creating $alu model for $lt$rtl.v:95$80 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:95$80: $auto$alumacc.cc:474:replace_alu$500
  creating $alu cell for $le$rtl.v:96$81: $auto$alumacc.cc:474:replace_alu$511
  creating $alu cell for $le$rtl.v:75$40: $auto$alumacc.cc:474:replace_alu$520
  creating $alu cell for $le$rtl.v:103$96: $auto$alumacc.cc:474:replace_alu$529
  creating $alu cell for $ge$rtl.v:109$122: $auto$alumacc.cc:474:replace_alu$542
  creating $alu cell for $sub$rtl.v:104$101: $auto$alumacc.cc:474:replace_alu$555
  created 6 $alu and 6 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshl$rtl.v:84$63 ($sshl):
    Found 1 activation_patterns using ctrl signal { $procmux$301_CMP $reduce_or$rtl.v:82$61_Y }.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:104$98 ($shr):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:104$99_Y.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:73$37 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$301_CMP $reduce_bool$rtl.v:77$56_Y }.
    No candidates found.
  Analyzing resource sharing options for $mul$rtl.v:54$1 ($mul):
    Found cell that is never activated: $mul$rtl.v:54$1
    Cell is never active. Sharing is pointless, we simply remove it.
Removing 1 cells in module top:
  Removing cell $mul$rtl.v:54$1 ($mul).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
<suppressed ~7 debug messages>
Optimizing module module61.
<suppressed ~1 debug messages>
Optimizing module top.
<suppressed ~2 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:241$193.
    dead port 2/2 on $mux $ternary$rtl.v:241$193.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~36 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$436: { $auto$rtlil.cc:1832:Not$433 $auto$rtlil.cc:1835:ReduceAnd$435 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$451: { $auto$rtlil.cc:1832:Not$450 $auto$rtlil.cc:1835:ReduceAnd$442 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$434: { $auto$alumacc.cc:490:replace_alu$430 [0] $auto$alumacc.cc:490:replace_alu$430 [1] $auto$alumacc.cc:490:replace_alu$430 [2] $auto$alumacc.cc:490:replace_alu$430 [3] $auto$alumacc.cc:490:replace_alu$430 [4] $auto$alumacc.cc:490:replace_alu$430 [5] $auto$alumacc.cc:490:replace_alu$430 [6] $auto$alumacc.cc:490:replace_alu$430 [7] $auto$alumacc.cc:490:replace_alu$430 [8] $auto$alumacc.cc:490:replace_alu$430 [9] $auto$alumacc.cc:490:replace_alu$430 [10] $auto$alumacc.cc:490:replace_alu$430 [11] $auto$alumacc.cc:490:replace_alu$430 [12] $auto$alumacc.cc:490:replace_alu$430 [13] $auto$alumacc.cc:490:replace_alu$430 [14] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$441: { $auto$alumacc.cc:490:replace_alu$439 [0] $auto$alumacc.cc:490:replace_alu$439 [1] $auto$alumacc.cc:490:replace_alu$439 [2] $auto$alumacc.cc:490:replace_alu$439 [3] $auto$alumacc.cc:490:replace_alu$439 [4] $auto$alumacc.cc:490:replace_alu$439 [5] $auto$alumacc.cc:490:replace_alu$439 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$410: { $auto$alumacc.cc:490:replace_alu$408 [0] $auto$alumacc.cc:490:replace_alu$408 [1] $auto$alumacc.cc:490:replace_alu$408 [2] $auto$alumacc.cc:490:replace_alu$408 [3] $auto$alumacc.cc:490:replace_alu$408 [4] $auto$alumacc.cc:490:replace_alu$408 [5] $auto$alumacc.cc:490:replace_alu$408 [6] $auto$alumacc.cc:490:replace_alu$408 [7] $auto$alumacc.cc:490:replace_alu$408 [8] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$421: { $auto$alumacc.cc:490:replace_alu$419 [0] $auto$alumacc.cc:490:replace_alu$419 [1] $auto$alumacc.cc:490:replace_alu$419 [2] $auto$alumacc.cc:490:replace_alu$419 [3] $auto$alumacc.cc:490:replace_alu$419 [4] $auto$alumacc.cc:490:replace_alu$419 [5] $auto$alumacc.cc:490:replace_alu$419 [6] $auto$alumacc.cc:490:replace_alu$419 [7] $auto$alumacc.cc:490:replace_alu$419 [8] $auto$alumacc.cc:490:replace_alu$419 [9] $auto$alumacc.cc:490:replace_alu$419 [10] $auto$alumacc.cc:490:replace_alu$419 [11] $auto$alumacc.cc:490:replace_alu$419 [12] $auto$alumacc.cc:490:replace_alu$419 [13] }
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$475: { $auto$alumacc.cc:490:replace_alu$473 [0] $auto$alumacc.cc:490:replace_alu$473 [1] $auto$alumacc.cc:490:replace_alu$473 [2] $auto$alumacc.cc:490:replace_alu$473 [3] $auto$alumacc.cc:490:replace_alu$473 [4] $auto$alumacc.cc:490:replace_alu$473 [5] $auto$alumacc.cc:490:replace_alu$473 [6] $auto$alumacc.cc:490:replace_alu$473 [7] $auto$alumacc.cc:490:replace_alu$473 [8] $auto$alumacc.cc:490:replace_alu$473 [9] $auto$alumacc.cc:490:replace_alu$473 [10] $auto$alumacc.cc:490:replace_alu$473 [11] $auto$alumacc.cc:490:replace_alu$473 [12] $auto$alumacc.cc:490:replace_alu$473 [13] }
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$553: { $auto$rtlil.cc:1832:Not$552 $auto$rtlil.cc:1835:ReduceAnd$546 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$503: { $auto$alumacc.cc:490:replace_alu$501 [0] $auto$alumacc.cc:490:replace_alu$501 [1] $auto$alumacc.cc:490:replace_alu$501 [2] $auto$alumacc.cc:490:replace_alu$501 [3] $auto$alumacc.cc:490:replace_alu$501 [4] $auto$alumacc.cc:490:replace_alu$501 [5] $auto$alumacc.cc:490:replace_alu$501 [6] $auto$alumacc.cc:490:replace_alu$501 [7] $auto$alumacc.cc:490:replace_alu$501 [8] $auto$alumacc.cc:490:replace_alu$501 [9] $auto$alumacc.cc:490:replace_alu$501 [10] $auto$alumacc.cc:490:replace_alu$501 [11] $auto$alumacc.cc:490:replace_alu$501 [12] $auto$alumacc.cc:490:replace_alu$501 [13] $auto$alumacc.cc:490:replace_alu$501 [14] $auto$alumacc.cc:490:replace_alu$501 [15] $auto$alumacc.cc:490:replace_alu$501 [16] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$516: { $auto$alumacc.cc:490:replace_alu$512 [0] $auto$alumacc.cc:490:replace_alu$512 [1] $auto$alumacc.cc:490:replace_alu$512 [2] $auto$alumacc.cc:490:replace_alu$512 [3] $auto$alumacc.cc:490:replace_alu$512 [4] $auto$alumacc.cc:490:replace_alu$512 [5] $auto$alumacc.cc:490:replace_alu$512 [6] $auto$alumacc.cc:490:replace_alu$512 [7] $auto$alumacc.cc:490:replace_alu$512 [8] $auto$alumacc.cc:490:replace_alu$512 [9] $auto$alumacc.cc:490:replace_alu$512 [10] $auto$alumacc.cc:490:replace_alu$512 [11] $auto$alumacc.cc:490:replace_alu$512 [12] $auto$alumacc.cc:490:replace_alu$512 [13] $auto$alumacc.cc:490:replace_alu$512 [14] $auto$alumacc.cc:490:replace_alu$512 [15] $auto$alumacc.cc:490:replace_alu$512 [16] $auto$alumacc.cc:490:replace_alu$512 [17] $auto$alumacc.cc:490:replace_alu$512 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$525: { $auto$alumacc.cc:490:replace_alu$521 [0] $auto$alumacc.cc:490:replace_alu$521 [1] $auto$alumacc.cc:490:replace_alu$521 [2] $auto$alumacc.cc:490:replace_alu$521 [3] $auto$alumacc.cc:490:replace_alu$521 [4] $auto$alumacc.cc:490:replace_alu$521 [5] $auto$alumacc.cc:490:replace_alu$521 [6] $auto$alumacc.cc:490:replace_alu$521 [7] $auto$alumacc.cc:490:replace_alu$521 [8] $auto$alumacc.cc:490:replace_alu$521 [9] $auto$alumacc.cc:490:replace_alu$521 [10] $auto$alumacc.cc:490:replace_alu$521 [11] $auto$alumacc.cc:490:replace_alu$521 [12] $auto$alumacc.cc:490:replace_alu$521 [13] $auto$alumacc.cc:490:replace_alu$521 [14] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$532: { $auto$alumacc.cc:490:replace_alu$530 [0] $auto$alumacc.cc:490:replace_alu$530 [1] $auto$alumacc.cc:490:replace_alu$530 [2] $auto$alumacc.cc:490:replace_alu$530 [3] $auto$alumacc.cc:490:replace_alu$530 [4] $auto$alumacc.cc:490:replace_alu$530 [5] $auto$alumacc.cc:490:replace_alu$530 [6] $auto$alumacc.cc:490:replace_alu$530 [7] $auto$alumacc.cc:490:replace_alu$530 [8] $auto$alumacc.cc:490:replace_alu$530 [9] $auto$alumacc.cc:490:replace_alu$530 [10] $auto$alumacc.cc:490:replace_alu$530 [11] $auto$alumacc.cc:490:replace_alu$530 [12] $auto$alumacc.cc:490:replace_alu$530 [13] $auto$alumacc.cc:490:replace_alu$530 [14] $auto$alumacc.cc:490:replace_alu$530 [15] $auto$alumacc.cc:490:replace_alu$530 [16] $auto$alumacc.cc:490:replace_alu$530 [17] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$545: { $auto$alumacc.cc:490:replace_alu$543 [0] $auto$alumacc.cc:490:replace_alu$543 [1] $auto$alumacc.cc:490:replace_alu$543 [2] $auto$alumacc.cc:490:replace_alu$543 [3] $auto$alumacc.cc:490:replace_alu$543 [4] $auto$alumacc.cc:490:replace_alu$543 [5] $auto$alumacc.cc:490:replace_alu$543 [6] $auto$alumacc.cc:490:replace_alu$543 [7] $auto$alumacc.cc:490:replace_alu$543 [8] $auto$alumacc.cc:490:replace_alu$543 [9] $auto$alumacc.cc:490:replace_alu$543 [10] $auto$alumacc.cc:490:replace_alu$543 [11] $auto$alumacc.cc:490:replace_alu$543 [12] $auto$alumacc.cc:490:replace_alu$543 [13] $auto$alumacc.cc:490:replace_alu$543 [14] $auto$alumacc.cc:490:replace_alu$543 [15] $auto$alumacc.cc:490:replace_alu$543 [16] $auto$alumacc.cc:490:replace_alu$543 [17] $auto$alumacc.cc:490:replace_alu$543 [18] $auto$alumacc.cc:490:replace_alu$543 [19] $auto$alumacc.cc:490:replace_alu$543 [20] }
  Optimizing cells in module \top.
Performed a total of 13 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 21 unused wires.
<suppressed ~5 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
<suppressed ~39 debug messages>
Optimizing module module61.
<suppressed ~1 debug messages>
Optimizing module top.
<suppressed ~48 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$333 ($dff) from module top.
Replaced 1 DFF cells.

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 27 unused wires.
<suppressed ~4 debug messages>

2.18.5. Rerunning OPT passes. (Removed registers in this run.)

2.18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.18.10. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
    Consolidated identical input bits for $mux cell $procmux$288:
      Old ports: A=16'1111111110101001, B={ 13'0000000000000 $auto$wreduce.cc:455:run$361 [2:0] }, Y=$0\reg43[15:0]
      New ports: A=4'1001, B={ 1'0 $auto$wreduce.cc:455:run$361 [2:0] }, Y=$0\reg43[15:0] [3:0]
      New connections: $0\reg43[15:0] [15:4] = { $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] $0\reg43[15:0] [3] 1'0 $0\reg43[15:0] [3] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:232$175:
      Old ports: A={ 3'000 $auto$wreduce.cc:455:run$349 [0] }, B={ \reg26 [0] \reg26 [0] \reg26 [0] \reg26 [0] }, Y=$auto$wreduce.cc:455:run$356 [3:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$349 [0] }, B={ \reg26 [0] \reg26 [0] }, Y=$auto$wreduce.cc:455:run$356 [1:0]
      New connections: $auto$wreduce.cc:455:run$356 [3:2] = { $auto$wreduce.cc:455:run$356 [1] $auto$wreduce.cc:455:run$356 [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:234$183:
      Old ports: A=6'100100, B={ 3'000 \wire20 [6:4] }, Y=$auto$wreduce.cc:455:run$357 [5:0]
      New ports: A=4'1100, B={ 1'0 \wire20 [6:4] }, Y={ $auto$wreduce.cc:455:run$357 [5] $auto$wreduce.cc:455:run$357 [2:0] }
      New connections: $auto$wreduce.cc:455:run$357 [4:3] = 2'00
    Consolidated identical input bits for $mux cell $ternary$rtl.v:234$184:
      Old ports: A={ 1'0 $auto$wreduce.cc:455:run$357 [5:0] }, B={ 3'000 $auto$wreduce.cc:455:run$356 [3:0] }, Y=$0\reg27[6:0]
      New ports: A=$auto$wreduce.cc:455:run$357 [5:0], B={ 2'00 $auto$wreduce.cc:455:run$356 [3:0] }, Y=$0\reg27[6:0] [5:0]
      New connections: $0\reg27[6:0] [6] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:263$229:
      Old ports: A={ 4'0000 $auto$wreduce.cc:455:run$353 [6:0] }, B={ 7'1111111 \wire39 [3] \wire39 [3] \wire39 [3] \wire39 [0] }, Y=$ternary$rtl.v:263$229_Y
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$353 [6:0] }, B={ 4'1111 \wire39 [3] \wire39 [3] \wire39 [3] \wire39 [0] }, Y=$ternary$rtl.v:263$229_Y [7:0]
      New connections: $ternary$rtl.v:263$229_Y [10:8] = { $ternary$rtl.v:263$229_Y [7] $ternary$rtl.v:263$229_Y [7] $ternary$rtl.v:263$229_Y [7] }
  Optimizing cells in module \module16.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:234$184:
      Old ports: A=$auto$wreduce.cc:455:run$357 [5:0], B={ 2'00 $auto$wreduce.cc:455:run$356 [3:0] }, Y=$0\reg27[6:0] [5:0]
      New ports: A={ $auto$wreduce.cc:455:run$357 [5] 1'0 $auto$wreduce.cc:455:run$357 [2:0] }, B={ 1'0 $auto$wreduce.cc:455:run$356 [1] $auto$wreduce.cc:455:run$356 [1] $auto$wreduce.cc:455:run$356 [1:0] }, Y={ $0\reg27[6:0] [5] $0\reg27[6:0] [3:0] }
      New connections: $0\reg27[6:0] [4] = 1'0
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
Performed a total of 6 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module61..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module16.
  Optimizing cells in module \module61.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper maccmap for cells of type $macc.
  add \wire0 * \wire2 (19x9 bits, unsigned)
  add bits \wire3 [1] (1 bits)
  packed 1 (1) bits / 1 words into adder tree
Using template $paramod$constmap:6106dc0ecd1e3c685e4a2e380e6d4cd6fd348713$paramod$4ff1bec1c319e9b6712f1ee8446c6041b1438da3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
  add 8'10110001 * \wire1 [9:3] (8x7 bits, unsigned)
  add $ternary$rtl.v:97$85_Y * $auto$rtlil.cc:1836:ReduceOr$519 (20x1 bits, unsigned)
  add \wire3 * \wire2 (15x9 bits, unsigned)
Using template $paramod$constmap:8f771ecb19176548fd1b3b34191acc2244ea0866$paramod$05990c24eb337f5b1592f650ee138081da92aec6\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:d7faedf20f067f749ddcce03375bd459283457a8$paramod$aa056261bd985b74fa37ec56dad606f01b45d1c3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
  add { $mul$rtl.v:71$35_Y \wire1 \wire5 } * $auto$wreduce.cc:455:run$398 [20:0] (56x21 bits, unsigned)
Using template $paramod$constmap:b634d2a021a633a893ce7d822f2511c8697e0c85$paramod$719c1971f576b1e20b3157cb1f80ff0ca34b3b01\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
  add \reg8 [6:1] * \wire5 [1] (6x1 bits, unsigned)
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:aaa2bcd6cd05f66bf915ab495ff33eec52d33b3d$paramod$29a2585afa15c028947069fd758f298bfc03a4d8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:f0306d7acf219aed088ac350cd8d36002346dac7$paramod$97d6ab01d2425cecaa11c63551513451c49a5718\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=11 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=15 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=7 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using extmapper simplemap for cells of type $xnor.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=2\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=15\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
  add \wire23 * $auto$wreduce.cc:455:run$354 [0] (4x1 bits, unsigned)
Using template $paramod$constmap:7cb2230b636b673149a63d23699094f28fd3248d$paramod$8b6253f99290f1df5429eb73eed0f863df55c51e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:e296833d91c5cb76112935130ca2e13a0a2bbba1$paramod$128ba6749ee4b93d19a5abc2292f1bc511f48c49\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:200a77933a3dda4c48b10a67ebc068111043546e$paramod$997bf48f5c6edfd3e34ac20a0181082b2e65219f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=35\Y_WIDTH=35 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=35 for cells of type $lcu.
No more expansions possible.
<suppressed ~5474 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
<suppressed ~745 debug messages>
Optimizing module module61.
<suppressed ~343 debug messages>
Optimizing module top.
<suppressed ~1656 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
<suppressed ~357 debug messages>
Finding identical cells in module `\module61'.
<suppressed ~21 debug messages>
Finding identical cells in module `\top'.
<suppressed ~120 debug messages>
Removed a total of 166 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$7836 ($_DFF_P_) from module module16.
Replaced 1 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 1139 unused cells and 1781 unused wires.
<suppressed ~1142 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
<suppressed ~9 debug messages>
Optimizing module module61.
Optimizing module top.

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.22.10. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module16' to `<abc-temp-dir>/input.blif'..
Extracted 409 gates and 490 wires to a netlist network with 79 inputs and 80 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       45
ABC RESULTS:              AOI3 cells:        4
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       21
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:       21
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:      147
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:              XNOR cells:       13
ABC RESULTS:               XOR cells:       48
ABC RESULTS:        internal signals:      331
ABC RESULTS:           input signals:       79
ABC RESULTS:          output signals:       80
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module61' to `<abc-temp-dir>/input.blif'..
Extracted 434 gates and 510 wires to a netlist network with 74 inputs and 18 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:            ANDNOT cells:       98
ABC RESULTS:               MUX cells:        5
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:       28
ABC RESULTS:                OR cells:      143
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:               XOR cells:       87
ABC RESULTS:        internal signals:      418
ABC RESULTS:           input signals:       74
ABC RESULTS:          output signals:       18
Removing temp directory.

2.23.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1716 gates and 1849 wires to a netlist network with 131 inputs and 99 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       82
ABC RESULTS:            ANDNOT cells:      287
ABC RESULTS:              AOI3 cells:       61
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:      227
ABC RESULTS:              NAND cells:       83
ABC RESULTS:               NOR cells:       55
ABC RESULTS:               NOT cells:      103
ABC RESULTS:              OAI3 cells:       40
ABC RESULTS:              OAI4 cells:        4
ABC RESULTS:                OR cells:      320
ABC RESULTS:             ORNOT cells:       50
ABC RESULTS:              XNOR cells:       67
ABC RESULTS:               XOR cells:      222
ABC RESULTS:        internal signals:     1619
ABC RESULTS:           input signals:      131
ABC RESULTS:          output signals:       99
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module16.
Optimizing module module61.
Optimizing module top.
<suppressed ~65 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module16'.
Finding identical cells in module `\module61'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 2 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module16..
Finding unused cells or wires in module \module61..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 1136 unused wires.
<suppressed ~7 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module16 ===

   Number of wires:                303
   Number of wire bits:           1086
   Number of public wires:          39
   Number of public wire bits:     768
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                383
     $_ANDNOT_                      45
     $_AND_                          5
     $_AOI3_                         4
     $_AOI4_                         1
     $_DFF_P_                       46
     $_MUX_                         21
     $_NAND_                         4
     $_NOR_                         13
     $_NOT_                         21
     $_OAI3_                         6
     $_ORNOT_                        9
     $_OR_                         147
     $_XNOR_                        13
     $_XOR_                         48

=== module61 ===

   Number of wires:                389
   Number of wire bits:            530
   Number of public wires:          11
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                396
     $_ANDNOT_                      98
     $_AND_                         10
     $_MUX_                          5
     $_NAND_                        10
     $_NOR_                          7
     $_NOT_                         28
     $_ORNOT_                        1
     $_OR_                         142
     $_XNOR_                         8
     $_XOR_                         87

=== top ===

   Number of wires:               1532
   Number of wire bits:           2486
   Number of public wires:          25
   Number of public wire bits:     530
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1675
     $_ANDNOT_                     287
     $_AND_                         82
     $_AOI3_                        61
     $_AOI4_                         2
     $_DFF_P_                       75
     $_MUX_                        227
     $_NAND_                        83
     $_NOR_                         55
     $_NOT_                         99
     $_OAI3_                        40
     $_OAI4_                         4
     $_ORNOT_                       50
     $_OR_                         319
     $_XNOR_                        67
     $_XOR_                        222
     module16                        1
     module61                        1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module16..
checking module module61..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module16'.
Dumping module `\module61'.
Dumping module `\top'.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 6d5d4f82c3
CPU: user 1.98s system 0.01s, MEM: 43.13 MB total, 36.18 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 33x opt_clean (0 sec), 17% 24x proc (0 sec), ...
