
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module59'.
Generating RTLIL representation for module `\module5'.
Generating RTLIL representation for module `\module31'.
Generating RTLIL representation for module `\module112'.
Generating RTLIL representation for module `\module66'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Warning: Resizing cell port module5.modinst46.wire33 from 22 bits to 12 bits.
Warning: Resizing cell port module5.modinst46.y from 21 bits to 103 bits.
Warning: Resizing cell port module5.modinst46.wire35 from 20 bits to 18 bits.
Warning: Resizing cell port module59.modinst136.y from 20 bits to 186 bits.
Warning: Resizing cell port module59.modinst136.wire113 from 10 bits to 7 bits.
Warning: Resizing cell port module59.modinst136.wire115 from 19 bits to 12 bits.
Warning: Resizing cell port module59.modinst89.wire67 from 21 bits to 14 bits.
Warning: Resizing cell port module59.modinst89.y from 14 bits to 138 bits.
Warning: Resizing cell port module59.modinst89.wire68 from 13 bits to 10 bits.
Warning: Resizing cell port top.modinst141.y from 10 bits to 366 bits.
Warning: Resizing cell port top.modinst50.wire8 from 21 bits to 5 bits.
Warning: Resizing cell port top.modinst50.wire9 from 20 bits to 16 bits.
Warning: Resizing cell port top.modinst50.y from 19 bits to 272 bits.
Warning: Resizing cell port top.modinst50.wire7 from 17 bits to 13 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\module59.$proc$rtl.v:156$93'.
Cleaned up 1 empty switch.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$rtl.v:528$405 in module module66.
Marked 3 switch rules as full_case in process $proc$rtl.v:416$293 in module module112.
Marked 2 switch rules as full_case in process $proc$rtl.v:269$161 in module module5.
Marked 1 switch rules as full_case in process $proc$rtl.v:156$93 in module module59.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module66.$proc$rtl.v:510$507'.
  Set init value: \reg73 = 5'00000
Found init rule in `\module66.$proc$rtl.v:509$506'.
  Set init value: \reg74 = 5'00000
Found init rule in `\module66.$proc$rtl.v:508$505'.
  Set init value: \reg75 = 13'0000000000000
Found init rule in `\module66.$proc$rtl.v:507$504'.
  Set init value: \reg76 = 15'000000000000000
Found init rule in `\module66.$proc$rtl.v:506$503'.
  Set init value: \reg77 = 9'000000000
Found init rule in `\module66.$proc$rtl.v:505$502'.
  Set init value: \reg78 = 7'0000000
Found init rule in `\module66.$proc$rtl.v:504$501'.
  Set init value: \reg79 = 16'0000000000000000
Found init rule in `\module66.$proc$rtl.v:503$500'.
  Set init value: \reg80 = 8'00000000
Found init rule in `\module66.$proc$rtl.v:502$499'.
  Set init value: \reg81 = 8'00000000
Found init rule in `\module66.$proc$rtl.v:501$498'.
  Set init value: \reg82 = 8'00000000
Found init rule in `\module66.$proc$rtl.v:500$497'.
  Set init value: \reg83 = 18'000000000000000000
Found init rule in `\module112.$proc$rtl.v:398$404'.
  Set init value: \reg117 = 5'00000
Found init rule in `\module112.$proc$rtl.v:397$403'.
  Set init value: \reg118 = 3'000
Found init rule in `\module112.$proc$rtl.v:396$402'.
  Set init value: \reg119 = 20'00000000000000000000
Found init rule in `\module112.$proc$rtl.v:395$401'.
  Set init value: \reg120 = 21'000000000000000000000
Found init rule in `\module112.$proc$rtl.v:394$400'.
  Set init value: \reg121 = 5'00000
Found init rule in `\module112.$proc$rtl.v:393$399'.
  Set init value: \reg122 = 16'0000000000000000
Found init rule in `\module112.$proc$rtl.v:392$398'.
  Set init value: \reg123 = 5'00000
Found init rule in `\module112.$proc$rtl.v:391$397'.
  Set init value: \reg124 = 19'0000000000000000000
Found init rule in `\module112.$proc$rtl.v:390$396'.
  Set init value: \reg125 = 22'0000000000000000000000
Found init rule in `\module5.$proc$rtl.v:219$273'.
  Set init value: \reg18 = 20'00000000000000000000
Found init rule in `\module5.$proc$rtl.v:218$272'.
  Set init value: \reg19 = 7'0000000
Found init rule in `\module5.$proc$rtl.v:217$271'.
  Set init value: \reg20 = 3'000
Found init rule in `\module5.$proc$rtl.v:216$270'.
  Set init value: \reg21 = 3'000
Found init rule in `\module5.$proc$rtl.v:215$269'.
  Set init value: \reg22 = 17'00000000000000000
Found init rule in `\module5.$proc$rtl.v:214$268'.
  Set init value: \reg23 = 17'00000000000000000
Found init rule in `\module5.$proc$rtl.v:213$267'.
  Set init value: \reg24 = 4'0000
Found init rule in `\module5.$proc$rtl.v:212$266'.
  Set init value: \reg25 = 4'0000
Found init rule in `\module5.$proc$rtl.v:211$265'.
  Set init value: \reg26 = 10'0000000000
Found init rule in `\module5.$proc$rtl.v:210$264'.
  Set init value: \reg27 = 15'000000000000000
Found init rule in `\module5.$proc$rtl.v:209$263'.
  Set init value: \reg28 = 15'000000000000000
Found init rule in `\module5.$proc$rtl.v:208$262'.
  Set init value: \reg29 = 12'000000000000
Found init rule in `\module5.$proc$rtl.v:207$261'.
  Set init value: \reg30 = 11'00000000000
Found init rule in `\module59.$proc$rtl.v:80$121'.
  Set init value: \reg105 = 5'00000
Found init rule in `\module59.$proc$rtl.v:79$120'.
  Set init value: \reg106 = 16'0000000000000000
Found init rule in `\module59.$proc$rtl.v:78$119'.
  Set init value: \reg107 = 8'00000000
Found init rule in `\module59.$proc$rtl.v:77$118'.
  Set init value: \reg108 = 12'000000000000
Found init rule in `\module59.$proc$rtl.v:76$117'.
  Set init value: \reg109 = 17'00000000000000000
Found init rule in `\module59.$proc$rtl.v:75$116'.
  Set init value: \reg110 = 21'000000000000000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module66.$proc$rtl.v:510$507'.
     1/1: $1\reg73[4:0]
Creating decoders for process `\module66.$proc$rtl.v:509$506'.
     1/1: $1\reg74[4:0]
Creating decoders for process `\module66.$proc$rtl.v:508$505'.
     1/1: $1\reg75[12:0]
Creating decoders for process `\module66.$proc$rtl.v:507$504'.
     1/1: $1\reg76[14:0]
Creating decoders for process `\module66.$proc$rtl.v:506$503'.
     1/1: $1\reg77[8:0]
Creating decoders for process `\module66.$proc$rtl.v:505$502'.
     1/1: $1\reg78[6:0]
Creating decoders for process `\module66.$proc$rtl.v:504$501'.
     1/1: $1\reg79[15:0]
Creating decoders for process `\module66.$proc$rtl.v:503$500'.
     1/1: $1\reg80[7:0]
Creating decoders for process `\module66.$proc$rtl.v:502$499'.
     1/1: $1\reg81[7:0]
Creating decoders for process `\module66.$proc$rtl.v:501$498'.
     1/1: $1\reg82[7:0]
Creating decoders for process `\module66.$proc$rtl.v:500$497'.
     1/1: $1\reg83[17:0]
Creating decoders for process `\module66.$proc$rtl.v:528$405'.
     1/11: $0\reg83[17:0]
     2/11: $0\reg82[7:0]
     3/11: $0\reg73[4:0]
     4/11: $0\reg74[4:0]
     5/11: $0\reg75[12:0]
     6/11: $0\reg76[14:0]
     7/11: $0\reg77[8:0]
     8/11: $0\reg79[15:0]
     9/11: $0\reg80[7:0]
    10/11: $0\reg81[7:0]
    11/11: $0\reg78[6:0]
Creating decoders for process `\module112.$proc$rtl.v:398$404'.
     1/1: $1\reg117[4:0]
Creating decoders for process `\module112.$proc$rtl.v:397$403'.
     1/1: $1\reg118[2:0]
Creating decoders for process `\module112.$proc$rtl.v:396$402'.
     1/1: $1\reg119[19:0]
Creating decoders for process `\module112.$proc$rtl.v:395$401'.
     1/1: $1\reg120[20:0]
Creating decoders for process `\module112.$proc$rtl.v:394$400'.
     1/1: $1\reg121[4:0]
Creating decoders for process `\module112.$proc$rtl.v:393$399'.
     1/1: $1\reg122[15:0]
Creating decoders for process `\module112.$proc$rtl.v:392$398'.
     1/1: $1\reg123[4:0]
Creating decoders for process `\module112.$proc$rtl.v:391$397'.
     1/1: $1\reg124[18:0]
Creating decoders for process `\module112.$proc$rtl.v:390$396'.
     1/1: $1\reg125[21:0]
Creating decoders for process `\module112.$proc$rtl.v:416$293'.
     1/9: $0\reg125[21:0]
     2/9: $0\reg117[4:0]
     3/9: $0\reg118[2:0]
     4/9: $0\reg119[19:0]
     5/9: $0\reg120[20:0]
     6/9: $0\reg121[4:0]
     7/9: $0\reg122[15:0]
     8/9: $0\reg123[4:0]
     9/9: $0\reg124[18:0]
Creating decoders for process `\module5.$proc$rtl.v:219$273'.
     1/1: $1\reg18[19:0]
Creating decoders for process `\module5.$proc$rtl.v:218$272'.
     1/1: $1\reg19[6:0]
Creating decoders for process `\module5.$proc$rtl.v:217$271'.
     1/1: $1\reg20[2:0]
Creating decoders for process `\module5.$proc$rtl.v:216$270'.
     1/1: $1\reg21[2:0]
Creating decoders for process `\module5.$proc$rtl.v:215$269'.
     1/1: $1\reg22[16:0]
Creating decoders for process `\module5.$proc$rtl.v:214$268'.
     1/1: $1\reg23[16:0]
Creating decoders for process `\module5.$proc$rtl.v:213$267'.
     1/1: $1\reg24[3:0]
Creating decoders for process `\module5.$proc$rtl.v:212$266'.
     1/1: $1\reg25[3:0]
Creating decoders for process `\module5.$proc$rtl.v:211$265'.
     1/1: $1\reg26[9:0]
Creating decoders for process `\module5.$proc$rtl.v:210$264'.
     1/1: $1\reg27[14:0]
Creating decoders for process `\module5.$proc$rtl.v:209$263'.
     1/1: $1\reg28[14:0]
Creating decoders for process `\module5.$proc$rtl.v:208$262'.
     1/1: $1\reg29[11:0]
Creating decoders for process `\module5.$proc$rtl.v:207$261'.
     1/1: $1\reg30[10:0]
Creating decoders for process `\module5.$proc$rtl.v:317$246'.
     1/5: $0\reg30[10:0]
     2/5: $0\reg29[11:0]
     3/5: $0\reg28[14:0]
     4/5: $0\reg27[14:0]
     5/5: $0\reg26[9:0]
Creating decoders for process `\module5.$proc$rtl.v:269$161'.
     1/8: $0\reg18[19:0]
     2/8: $0\reg19[6:0]
     3/8: $0\reg20[2:0]
     4/8: $0\reg21[2:0]
     5/8: $0\reg22[16:0]
     6/8: $0\reg23[16:0]
     7/8: $0\reg24[3:0]
     8/8: $0\reg25[3:0]
Creating decoders for process `\module59.$proc$rtl.v:80$121'.
     1/1: $1\reg105[4:0]
Creating decoders for process `\module59.$proc$rtl.v:79$120'.
     1/1: $1\reg106[15:0]
Creating decoders for process `\module59.$proc$rtl.v:78$119'.
     1/1: $1\reg107[7:0]
Creating decoders for process `\module59.$proc$rtl.v:77$118'.
     1/1: $1\reg108[11:0]
Creating decoders for process `\module59.$proc$rtl.v:76$117'.
     1/1: $1\reg109[16:0]
Creating decoders for process `\module59.$proc$rtl.v:75$116'.
     1/1: $1\reg110[20:0]
Creating decoders for process `\module59.$proc$rtl.v:156$93'.
     1/6: $0\reg105[4:0]
     2/6: $0\reg106[15:0]
     3/6: $0\reg107[7:0]
     4/6: $0\reg108[11:0]
     5/6: $0\reg109[16:0]
     6/6: $0\reg110[20:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module66.\reg78' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$645' with positive edge clock.
Creating register for signal `\module66.\reg82' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$646' with positive edge clock.
Creating register for signal `\module66.\reg81' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$647' with positive edge clock.
Creating register for signal `\module66.\reg80' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$648' with positive edge clock.
Creating register for signal `\module66.\reg79' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$649' with positive edge clock.
Creating register for signal `\module66.\reg77' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$650' with positive edge clock.
Creating register for signal `\module66.\reg83' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$651' with positive edge clock.
Creating register for signal `\module66.\reg76' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$652' with positive edge clock.
Creating register for signal `\module66.\reg75' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$653' with positive edge clock.
Creating register for signal `\module66.\reg74' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$654' with positive edge clock.
Creating register for signal `\module66.\reg73' using process `\module66.$proc$rtl.v:528$405'.
  created $dff cell `$procdff$655' with positive edge clock.
Creating register for signal `\module112.\reg125' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$656' with positive edge clock.
Creating register for signal `\module112.\reg124' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$657' with positive edge clock.
Creating register for signal `\module112.\reg123' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$658' with positive edge clock.
Creating register for signal `\module112.\reg122' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$659' with positive edge clock.
Creating register for signal `\module112.\reg121' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$660' with positive edge clock.
Creating register for signal `\module112.\reg120' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$661' with positive edge clock.
Creating register for signal `\module112.\reg119' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$662' with positive edge clock.
Creating register for signal `\module112.\reg118' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$663' with positive edge clock.
Creating register for signal `\module112.\reg117' using process `\module112.$proc$rtl.v:416$293'.
  created $dff cell `$procdff$664' with positive edge clock.
Creating register for signal `\module5.\reg28' using process `\module5.$proc$rtl.v:317$246'.
  created $dff cell `$procdff$665' with positive edge clock.
Creating register for signal `\module5.\reg27' using process `\module5.$proc$rtl.v:317$246'.
  created $dff cell `$procdff$666' with positive edge clock.
Creating register for signal `\module5.\reg26' using process `\module5.$proc$rtl.v:317$246'.
  created $dff cell `$procdff$667' with positive edge clock.
Creating register for signal `\module5.\reg30' using process `\module5.$proc$rtl.v:317$246'.
  created $dff cell `$procdff$668' with positive edge clock.
Creating register for signal `\module5.\reg29' using process `\module5.$proc$rtl.v:317$246'.
  created $dff cell `$procdff$669' with positive edge clock.
Creating register for signal `\module5.\reg25' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$670' with positive edge clock.
Creating register for signal `\module5.\reg24' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$671' with positive edge clock.
Creating register for signal `\module5.\reg23' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$672' with positive edge clock.
Creating register for signal `\module5.\reg22' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$673' with positive edge clock.
Creating register for signal `\module5.\reg21' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$674' with positive edge clock.
Creating register for signal `\module5.\reg20' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$675' with positive edge clock.
Creating register for signal `\module5.\reg19' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$676' with positive edge clock.
Creating register for signal `\module5.\reg18' using process `\module5.$proc$rtl.v:269$161'.
  created $dff cell `$procdff$677' with positive edge clock.
Creating register for signal `\module59.\reg110' using process `\module59.$proc$rtl.v:156$93'.
  created $dff cell `$procdff$678' with positive edge clock.
Creating register for signal `\module59.\reg109' using process `\module59.$proc$rtl.v:156$93'.
  created $dff cell `$procdff$679' with positive edge clock.
Creating register for signal `\module59.\reg108' using process `\module59.$proc$rtl.v:156$93'.
  created $dff cell `$procdff$680' with positive edge clock.
Creating register for signal `\module59.\reg107' using process `\module59.$proc$rtl.v:156$93'.
  created $dff cell `$procdff$681' with positive edge clock.
Creating register for signal `\module59.\reg106' using process `\module59.$proc$rtl.v:156$93'.
  created $dff cell `$procdff$682' with positive edge clock.
Creating register for signal `\module59.\reg105' using process `\module59.$proc$rtl.v:156$93'.
  created $dff cell `$procdff$683' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module66.$proc$rtl.v:510$507'.
Removing empty process `module66.$proc$rtl.v:509$506'.
Removing empty process `module66.$proc$rtl.v:508$505'.
Removing empty process `module66.$proc$rtl.v:507$504'.
Removing empty process `module66.$proc$rtl.v:506$503'.
Removing empty process `module66.$proc$rtl.v:505$502'.
Removing empty process `module66.$proc$rtl.v:504$501'.
Removing empty process `module66.$proc$rtl.v:503$500'.
Removing empty process `module66.$proc$rtl.v:502$499'.
Removing empty process `module66.$proc$rtl.v:501$498'.
Removing empty process `module66.$proc$rtl.v:500$497'.
Found and cleaned up 3 empty switches in `\module66.$proc$rtl.v:528$405'.
Removing empty process `module66.$proc$rtl.v:528$405'.
Removing empty process `module112.$proc$rtl.v:398$404'.
Removing empty process `module112.$proc$rtl.v:397$403'.
Removing empty process `module112.$proc$rtl.v:396$402'.
Removing empty process `module112.$proc$rtl.v:395$401'.
Removing empty process `module112.$proc$rtl.v:394$400'.
Removing empty process `module112.$proc$rtl.v:393$399'.
Removing empty process `module112.$proc$rtl.v:392$398'.
Removing empty process `module112.$proc$rtl.v:391$397'.
Removing empty process `module112.$proc$rtl.v:390$396'.
Found and cleaned up 3 empty switches in `\module112.$proc$rtl.v:416$293'.
Removing empty process `module112.$proc$rtl.v:416$293'.
Removing empty process `module5.$proc$rtl.v:219$273'.
Removing empty process `module5.$proc$rtl.v:218$272'.
Removing empty process `module5.$proc$rtl.v:217$271'.
Removing empty process `module5.$proc$rtl.v:216$270'.
Removing empty process `module5.$proc$rtl.v:215$269'.
Removing empty process `module5.$proc$rtl.v:214$268'.
Removing empty process `module5.$proc$rtl.v:213$267'.
Removing empty process `module5.$proc$rtl.v:212$266'.
Removing empty process `module5.$proc$rtl.v:211$265'.
Removing empty process `module5.$proc$rtl.v:210$264'.
Removing empty process `module5.$proc$rtl.v:209$263'.
Removing empty process `module5.$proc$rtl.v:208$262'.
Removing empty process `module5.$proc$rtl.v:207$261'.
Removing empty process `module5.$proc$rtl.v:317$246'.
Found and cleaned up 2 empty switches in `\module5.$proc$rtl.v:269$161'.
Removing empty process `module5.$proc$rtl.v:269$161'.
Removing empty process `module59.$proc$rtl.v:80$121'.
Removing empty process `module59.$proc$rtl.v:79$120'.
Removing empty process `module59.$proc$rtl.v:78$119'.
Removing empty process `module59.$proc$rtl.v:77$118'.
Removing empty process `module59.$proc$rtl.v:76$117'.
Removing empty process `module59.$proc$rtl.v:75$116'.
Found and cleaned up 1 empty switch in `\module59.$proc$rtl.v:156$93'.
Removing empty process `module59.$proc$rtl.v:156$93'.
Cleaned up 9 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module66.
<suppressed ~13 debug messages>
Optimizing module module112.
<suppressed ~7 debug messages>
Optimizing module module31.
<suppressed ~1 debug messages>
Optimizing module module5.
<suppressed ~27 debug messages>
Optimizing module module59.
<suppressed ~8 debug messages>
Optimizing module top.
<suppressed ~9 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \top..
Removed 18 unused cells and 273 unused wires.
<suppressed ~80 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module112..
checking module module31..
checking module module5..
checking module module59..
checking module module66..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
<suppressed ~1 debug messages>
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
<suppressed ~9 debug messages>
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 8 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$rtl.v:258$138: \wire6 -> { \wire6 [21:1] 1'0 }
      Replacing known input bits on port A of cell $ternary$rtl.v:302$213: { 4'0000 \wire14 } -> { 4'0000 \wire14 [3:1] 1'0 }
  Analyzing evaluation results.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$rtl.v:154$82: { 21'000000000000000000000 \wire102 [0] } -> 22'0000000000000000000000
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~77 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
    New input vector for $reduce_or cell $reduce_or$rtl.v:470$360: { \wire115 [0] \wire115 [1] \wire115 [2] \wire115 [3] \wire115 [4] \wire115 [5] \wire115 [6] \wire115 [7] \wire115 [8] \wire115 [9] \wire115 [10] \wire115 [11] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:443$327: { \reg122 [0] \reg122 [1] \reg122 [2] \reg122 [3] \reg122 [4] \reg122 [5] \reg122 [6] \reg122 [7] \reg122 [8] \reg122 [9] \reg122 [10] \reg122 [11] \reg122 [12] \reg122 [13] \reg122 [14] \reg122 [15] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:471$363: { \reg123 [0] \reg123 [1] \reg123 [2] \reg123 [3] \reg123 [4] }
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
    New input vector for $reduce_or cell $reduce_or$rtl.v:321$252: { \reg25 [0] \reg25 [1] \reg25 [2] \reg25 [3] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:312$238: { $ternary$rtl.v:312$237_Y [0] $ternary$rtl.v:312$237_Y [1] $ternary$rtl.v:312$237_Y [2] $ternary$rtl.v:312$237_Y [3] $ternary$rtl.v:312$237_Y [4] $ternary$rtl.v:312$237_Y [5] $ternary$rtl.v:312$237_Y [6] $ternary$rtl.v:312$237_Y [7] $ternary$rtl.v:312$237_Y [8] $ternary$rtl.v:312$237_Y [9] $ternary$rtl.v:312$237_Y [10] $ternary$rtl.v:312$237_Y [11] $ternary$rtl.v:312$237_Y [12] $ternary$rtl.v:312$237_Y [13] $ternary$rtl.v:312$237_Y [14] $ternary$rtl.v:312$237_Y [15] $ternary$rtl.v:312$237_Y [16] $ternary$rtl.v:312$237_Y [17] $ternary$rtl.v:312$237_Y [18] $ternary$rtl.v:312$237_Y [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:311$233: { \wire8 [0] \wire8 [1] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:322$253: { \reg26 [0] \reg26 [1] \reg26 [2] \reg26 [3] \reg26 [4] \reg26 [5] \reg26 [6] \reg26 [7] \reg26 [8] \reg26 [9] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:314$244: { \wire7 [0] \wire7 [1] \wire7 [2] \wire7 [3] \wire7 [4] \wire7 [5] \wire7 [6] \wire7 [7] \wire7 [8] \wire7 [9] \wire7 [10] \wire7 [11] \wire7 [12] \reg23 [0] \reg23 [1] \reg23 [2] \reg23 [3] \reg23 [4] \reg23 [5] \reg23 [6] \reg23 [7] \reg23 [8] \reg23 [9] \reg23 [10] \reg23 [11] \reg23 [12] \reg23 [13] \reg23 [14] \reg23 [15] \reg23 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:310$230: { \wire15 [0] \wire15 [1] \wire15 [2] \wire15 [3] \wire15 [4] \wire15 [5] \wire15 [6] \wire15 [7] \wire15 [8] \wire15 [9] \wire15 [10] \wire15 [11] \wire15 [12] \wire15 [13] \wire15 [14] \wire15 [15] \wire15 [16] \wire15 [17] \wire15 [18] \wire15 [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:289$176: { \wire6 [0] \wire6 [1] \wire6 [2] \wire6 [3] \wire6 [4] \wire6 [5] \wire6 [6] \wire6 [7] \wire6 [8] \wire6 [9] \wire6 [10] \wire6 [11] \wire6 [12] \wire6 [13] \wire6 [14] \wire6 [15] \wire6 [16] \wire6 [17] \wire6 [18] \wire6 [19] \wire6 [20] \wire6 [21] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:259$142: { \wire11 [8] \wire11 [9] }
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
    New input vector for $reduce_or cell $reduce_or$rtl.v:151$70: { \wire62 [0] \wire62 [1] \wire62 [2] \wire62 [3] \wire62 [4] \wire62 [5] \wire62 [6] \wire62 [7] \wire62 [8] \wire62 [9] \wire62 [10] \wire62 [11] \wire62 [12] \wire62 [13] \wire62 [14] }
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
    New input vector for $reduce_or cell $reduce_or$rtl.v:591$489: { \reg73 [0] \reg73 [1] \reg73 [2] \reg73 [3] \reg73 [4] }
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:47$19: { \wire52 [4] \wire52 [5] \wire52 [6] \wire52 [7] \wire52 [8] \wire52 [9] \wire52 [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:59$47: { $ternary$rtl.v:59$46_Y [0] $ternary$rtl.v:59$46_Y [1] $ternary$rtl.v:59$46_Y [2] $ternary$rtl.v:59$46_Y [3] $ternary$rtl.v:59$46_Y [4] $ternary$rtl.v:59$46_Y [5] $ternary$rtl.v:59$46_Y [6] $ternary$rtl.v:59$46_Y [7] $ternary$rtl.v:59$46_Y [8] $ternary$rtl.v:59$46_Y [9] $ternary$rtl.v:59$46_Y [10] $ternary$rtl.v:59$46_Y [11] $ternary$rtl.v:59$46_Y [12] $ternary$rtl.v:59$46_Y [13] $ternary$rtl.v:59$46_Y [14] $ternary$rtl.v:59$46_Y [15] $ternary$rtl.v:59$46_Y [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:56$32: { \wire54 [0] \wire54 [1] \wire54 [2] \wire54 [3] \wire54 [4] \wire54 [5] \wire54 [6] \wire54 [7] \wire54 [8] \wire54 [9] \wire54 [10] \wire54 [11] \wire54 [12] \wire54 [13] \wire54 [14] \wire54 [15] \wire54 [16] }
  Optimizing cells in module \top.
Performed a total of 16 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~5 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~77 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 5) from mux cell module112.$ternary$rtl.v:421$302 ($mux).
Removed top 20 bits (of 27) from port A of cell module112.$and$rtl.v:431$316 ($and).
Removed top 6 bits (of 27) from port B of cell module112.$and$rtl.v:431$316 ($and).
Removed top 6 bits (of 27) from port Y of cell module112.$and$rtl.v:431$316 ($and).
Removed top 15 bits (of 27) from port B of cell module112.$xnor$rtl.v:432$317 ($xnor).
Removed top 17 bits (of 22) from port Y of cell module112.$and$rtl.v:445$332 ($and).
Removed top 17 bits (of 22) from port A of cell module112.$and$rtl.v:445$332 ($and).
Removed top 17 bits (of 22) from port B of cell module112.$and$rtl.v:445$332 ($and).
Removed top 16 bits (of 21) from mux cell module112.$ternary$rtl.v:437$326 ($mux).
Removed top 17 bits (of 22) from port Y of cell module112.$mul$rtl.v:444$328 ($mul).
Removed top 17 bits (of 22) from mux cell module112.$ternary$rtl.v:445$331 ($mux).
Removed top 2 bits (of 5) from port Y of cell module112.$neg$rtl.v:460$345 ($neg).
Removed top 2 bits (of 5) from port A of cell module112.$neg$rtl.v:460$345 ($neg).
Removed top 18 bits (of 22) from port Y of cell module112.$not$rtl.v:476$377 ($not).
Removed top 18 bits (of 22) from port A of cell module112.$not$rtl.v:476$377 ($not).
Removed top 1 bits (of 2) from mux cell module112.$ternary$rtl.v:480$383 ($mux).
Removed top 1 bits (of 2) from port A of cell module112.$lt$rtl.v:480$386 ($lt).
Removed top 4 bits (of 9) from port A of cell module112.$not$rtl.v:481$388 ($not).
Removed top 1 bits (of 9) from mux cell module112.$ternary$rtl.v:482$393 ($mux).
Removed top 1 bits (of 9) from port B of cell module112.$sub$rtl.v:482$394 ($sub).
Removed top 3 bits (of 9) from port Y of cell module112.$or$rtl.v:482$395 ($or).
Removed top 3 bits (of 9) from port A of cell module112.$or$rtl.v:482$395 ($or).
Removed top 3 bits (of 9) from port B of cell module112.$or$rtl.v:482$395 ($or).
Removed top 21 bits (of 22) from FF cell module112.$procdff$656 ($dff).
Removed top 1 bits (of 5) from FF cell module112.$procdff$664 ($dff).
Removed top 1 bits (of 27) from mux cell module112.$ternary$rtl.v:425$305 ($mux).
Removed top 1 bits (of 27) from port A of cell module112.$xnor$rtl.v:432$317 ($xnor).
Removed top 16 bits (of 21) from mux cell module112.$ternary$rtl.v:437$325 ($mux).
Removed top 1 bits (of 5) from port A of cell module112.$not$rtl.v:447$333 ($not).
Removed top 18 bits (of 22) from mux cell module112.$ternary$rtl.v:476$376 ($mux).
Removed top 3 bits (of 9) from port Y of cell module112.$not$rtl.v:481$388 ($not).
Removed top 3 bits (of 9) from port Y of cell module112.$sub$rtl.v:482$394 ($sub).
Removed top 3 bits (of 9) from port A of cell module112.$sub$rtl.v:482$394 ($sub).
Removed top 2 bits (of 8) from port B of cell module112.$sub$rtl.v:482$394 ($sub).
Removed top 1 bits (of 27) from mux cell module112.$ternary$rtl.v:425$308 ($mux).
Removed top 2 bits (of 8) from mux cell module112.$ternary$rtl.v:482$393 ($mux).
Removed top 1 bits (of 5) from wire module112.$0\reg117[4:0].
Removed top 6 bits (of 27) from wire module112.$and$rtl.v:431$316_Y.
Removed top 17 bits (of 22) from wire module112.$and$rtl.v:445$332_Y.
Removed top 17 bits (of 22) from wire module112.$mul$rtl.v:444$328_Y.
Removed top 18 bits (of 22) from wire module112.$mul$rtl.v:476$378_Y.
Removed top 1 bits (of 27) from wire module112.$ternary$rtl.v:425$305_Y.
Removed top 1 bits (of 27) from wire module112.$ternary$rtl.v:425$308_Y.
Removed top 17 bits (of 22) from wire module112.$ternary$rtl.v:445$331_Y.
Removed top 10 bits (of 27) from wire module112.$xnor$rtl.v:432$319_Y.
Removed top 4 bits (of 5) from wire module112.wire129.
Removed cell module31.$ternary$rtl.v:362$280 ($mux).
Removed top 13 bits (of 18) from port A of cell module31.$sub$rtl.v:368$292 ($sub).
Removed top 6 bits (of 18) from port A of cell module31.$sub$rtl.v:368$291 ($sub).
Removed top 17 bits (of 18) from port B of cell module31.$sub$rtl.v:368$291 ($sub).
Removed top 17 bits (of 18) from wire module31.$logic_or$rtl.v:368$290_Y.
Removed top 11 bits (of 12) from port A of cell module5.$gt$rtl.v:266$151 ($gt).
Removed top 11 bits (of 12) from port B of cell module5.$gt$rtl.v:266$151 ($gt).
Removed top 21 bits (of 22) from port B of cell module5.$xnor$rtl.v:264$156 ($xnor).
Removed top 7 bits (of 22) from port Y of cell module5.$xnor$rtl.v:264$156 ($xnor).
Removed top 10 bits (of 12) from port A of cell module5.$eq$rtl.v:267$157 ($eq).
Removed top 18 bits (of 20) from port B of cell module5.$eq$rtl.v:267$157 ($eq).
Converting cell module5.$eq$rtl.v:267$157 ($eq) from signed to unsigned.
Removed top 1 bits (of 2) from port A of cell module5.$eq$rtl.v:267$157 ($eq).
Removed top 1 bits (of 2) from port B of cell module5.$eq$rtl.v:267$157 ($eq).
Removed top 2 bits (of 5) from mux cell module5.$ternary$rtl.v:275$163 ($mux).
Removed top 15 bits (of 22) from mux cell module5.$ternary$rtl.v:278$167 ($mux).
Removed top 14 bits (of 22) from port A of cell module5.$lt$rtl.v:278$171 ($lt).
Removed top 11 bits (of 12) from port A of cell module5.$xor$rtl.v:281$173 ($xor).
Removed top 11 bits (of 12) from port B of cell module5.$xor$rtl.v:281$173 ($xor).
Removed top 11 bits (of 12) from port Y of cell module5.$xor$rtl.v:281$173 ($xor).
Removed top 11 bits (of 12) from port A of cell module5.$eq$rtl.v:281$174 ($eq).
Removed top 3 bits (of 4) from port A of cell module5.$gt$rtl.v:289$180 ($gt).
Removed top 3 bits (of 4) from port B of cell module5.$gt$rtl.v:289$180 ($gt).
Removed top 3 bits (of 4) from port B of cell module5.$sub$rtl.v:291$185 ($sub).
Removed top 5 bits (of 22) from mux cell module5.$ternary$rtl.v:291$187 ($mux).
Removed top 3 bits (of 4) from port A of cell module5.$neg$rtl.v:292$188 ($neg).
Removed top 7 bits (of 20) from mux cell module5.$ternary$rtl.v:294$195 ($mux).
Removed top 3 bits (of 20) from port A of cell module5.$sub$rtl.v:298$199 ($sub).
Removed top 32 bits (of 33) from mux cell module5.$ternary$rtl.v:300$207 ($mux).
Removed top 7 bits (of 33) from mux cell module5.$ternary$rtl.v:300$209 ($mux).
Removed top 32 bits (of 33) from port A of cell module5.$or$rtl.v:302$216 ($or).
Removed top 32 bits (of 33) from port B of cell module5.$or$rtl.v:302$216 ($or).
Removed top 32 bits (of 33) from port Y of cell module5.$or$rtl.v:302$216 ($or).
Removed top 29 bits (of 33) from mux cell module5.$ternary$rtl.v:302$218 ($mux).
Removed top 3 bits (of 4) from port A of cell module5.$xor$rtl.v:304$219 ($xor).
Removed top 3 bits (of 4) from port Y of cell module5.$xor$rtl.v:304$219 ($xor).
Removed top 3 bits (of 4) from port A of cell module5.$gt$rtl.v:304$220 ($gt).
Removed top 3 bits (of 4) from port B of cell module5.$gt$rtl.v:304$220 ($gt).
Removed top 9 bits (of 22) from mux cell module5.$ternary$rtl.v:310$228 ($mux).
Removed top 21 bits (of 22) from port A of cell module5.$xnor$rtl.v:310$229 ($xnor).
Removed top 9 bits (of 22) from port B of cell module5.$xnor$rtl.v:310$229 ($xnor).
Removed top 21 bits (of 22) from port A of cell module5.$not$rtl.v:310$231 ($not).
Removed top 12 bits (of 20) from mux cell module5.$ternary$rtl.v:312$237 ($mux).
Removed top 3 bits (of 4) from port B of cell module5.$gt$rtl.v:312$240 ($gt).
Removed top 6 bits (of 7) from mux cell module5.$ternary$rtl.v:312$242 ($mux).
Removed top 5 bits (of 20) from mux cell module5.$ternary$rtl.v:323$255 ($mux).
Removed top 16 bits (of 22) from port A of cell module5.$shl$rtl.v:326$257 ($shl).
Removed top 4 bits (of 7) from mux cell module5.$procmux$607 ($mux).
Removed top 14 bits (of 15) from FF cell module5.$procdff$666 ($dff).
Removed top 9 bits (of 10) from FF cell module5.$procdff$667 ($dff).
Removed top 10 bits (of 11) from FF cell module5.$procdff$668 ($dff).
Removed top 4 bits (of 7) from FF cell module5.$procdff$676 ($dff).
Removed top 4 bits (of 20) from FF cell module5.$procdff$677 ($dff).
Removed top 2 bits (of 7) from mux cell module5.$ternary$rtl.v:278$167 ($mux).
Removed top 5 bits (of 22) from port Y of cell module5.$sub$rtl.v:291$185 ($sub).
Removed top 5 bits (of 22) from port A of cell module5.$sub$rtl.v:291$185 ($sub).
Removed top 22 bits (of 26) from mux cell module5.$ternary$rtl.v:300$209 ($mux).
Removed top 9 bits (of 13) from mux cell module5.$ternary$rtl.v:297$193 ($mux).
Removed top 5 bits (of 22) from mux cell module5.$ternary$rtl.v:291$184 ($mux).
Removed cell module5.$ternary$rtl.v:294$195 ($mux).
Removed top 9 bits (of 22) from mux cell module5.$ternary$rtl.v:278$169 ($mux).
Removed top 5 bits (of 22) from port Y of cell module5.$and$rtl.v:291$181 ($and).
Removed top 3 bits (of 20) from port A of cell module5.$and$rtl.v:291$181 ($and).
Removed top 5 bits (of 22) from port B of cell module5.$and$rtl.v:291$181 ($and).
Removed top 4 bits (of 8) from mux cell module5.$ternary$rtl.v:297$191 ($mux).
Removed top 4 bits (of 7) from wire module5.$0\reg19[6:0].
Removed top 9 bits (of 10) from wire module5.$0\reg26[9:0].
Removed top 14 bits (of 15) from wire module5.$0\reg27[14:0].
Removed top 5 bits (of 22) from wire module5.$and$rtl.v:291$181_Y.
Removed top 16 bits (of 17) from wire module5.$eq$rtl.v:281$174_Y.
Removed top 3 bits (of 4) from wire module5.$gt$rtl.v:304$220_Y.
Removed top 6 bits (of 7) from wire module5.$gt$rtl.v:312$240_Y.
Removed top 3 bits (of 4) from wire module5.$logic_not$rtl.v:289$179_Y.
Removed top 32 bits (of 33) from wire module5.$logic_not$rtl.v:299$201_Y.
Removed top 21 bits (of 22) from wire module5.$logic_not$rtl.v:308$222_Y.
Removed top 6 bits (of 7) from wire module5.$logic_not$rtl.v:311$234_Y.
Removed top 2 bits (of 3) from wire module5.$logic_not$rtl.v:314$245_Y.
Removed top 32 bits (of 33) from wire module5.$or$rtl.v:302$216_Y.
Removed top 21 bits (of 22) from wire module5.$reduce_xnor$rtl.v:291$186_Y.
Removed top 3 bits (of 4) from wire module5.$reduce_xnor$rtl.v:312$239_Y.
Removed top 11 bits (of 12) from wire module5.$reduce_xor$rtl.v:266$150_Y.
Removed top 32 bits (of 33) from wire module5.$reduce_xor$rtl.v:300$205_Y.
Removed top 5 bits (of 22) from wire module5.$sub$rtl.v:291$185_Y.
Removed top 2 bits (of 5) from wire module5.$ternary$rtl.v:275$163_Y.
Removed top 17 bits (of 22) from wire module5.$ternary$rtl.v:278$167_Y.
Removed top 9 bits (of 22) from wire module5.$ternary$rtl.v:278$169_Y.
Removed top 5 bits (of 22) from wire module5.$ternary$rtl.v:291$187_Y.
Removed top 4 bits (of 8) from wire module5.$ternary$rtl.v:297$191_Y.
Removed top 9 bits (of 13) from wire module5.$ternary$rtl.v:297$193_Y.
Removed top 32 bits (of 33) from wire module5.$ternary$rtl.v:300$207_Y.
Removed top 29 bits (of 33) from wire module5.$ternary$rtl.v:300$209_Y.
Removed top 29 bits (of 33) from wire module5.$ternary$rtl.v:302$218_Y.
Removed top 9 bits (of 22) from wire module5.$ternary$rtl.v:310$228_Y.
Removed top 12 bits (of 20) from wire module5.$ternary$rtl.v:312$237_Y.
Removed top 7 bits (of 22) from wire module5.$xnor$rtl.v:264$156_Y.
Removed top 11 bits (of 12) from wire module5.$xor$rtl.v:281$173_Y.
Removed top 11 bits (of 12) from wire module5.wire10.
Removed top 11 bits (of 12) from wire module5.wire11.
Removed top 3 bits (of 4) from wire module5.wire14.
Removed top 17 bits (of 18) from wire module5.wire16.
Removed top 9 bits (of 22) from wire module5.wire47.
Removed top 14 bits (of 16) from port A of cell module59.$xor$rtl.v:132$49 ($xor).
Removed top 6 bits (of 16) from port Y of cell module59.$xor$rtl.v:132$49 ($xor).
Removed top 9 bits (of 19) from port A of cell module59.$neg$rtl.v:133$57 ($neg).
Removed top 9 bits (of 10) from port B of cell module59.$eq$rtl.v:152$72 ($eq).
Removed top 8 bits (of 22) from mux cell module59.$ternary$rtl.v:151$75 ($mux).
Removed top 21 bits (of 22) from port A of cell module59.$neg$rtl.v:155$87 ($neg).
Removed top 14 bits (of 22) from mux cell module59.$ternary$rtl.v:155$92 ($mux).
Removed top 11 bits (of 12) from port A of cell module59.$or$rtl.v:177$104 ($or).
Removed top 11 bits (of 12) from port B of cell module59.$or$rtl.v:177$104 ($or).
Removed top 11 bits (of 12) from port Y of cell module59.$or$rtl.v:177$104 ($or).
Removed top 11 bits (of 12) from FF cell module59.$procdff$680 ($dff).
Removed top 15 bits (of 16) from FF cell module59.$procdff$682 ($dff).
Removed top 14 bits (of 22) from mux cell module59.$ternary$rtl.v:155$90 ($mux).
Removed top 14 bits (of 22) from mux cell module59.$ternary$rtl.v:154$82 ($mux).
Removed top 14 bits (of 22) from port Y of cell module59.$sub$rtl.v:155$88 ($sub).
Removed top 14 bits (of 22) from port A of cell module59.$sub$rtl.v:155$88 ($sub).
Removed top 14 bits (of 22) from port B of cell module59.$sub$rtl.v:155$88 ($sub).
Removed top 14 bits (of 22) from port Y of cell module59.$neg$rtl.v:155$87 ($neg).
Removed top 14 bits (of 22) from mux cell module59.$ternary$rtl.v:155$85 ($mux).
Removed top 11 bits (of 12) from wire module59.$0\reg108[11:0].
Removed top 16 bits (of 17) from wire module59.$eq$rtl.v:180$106_Y.
Removed top 7 bits (of 8) from wire module59.$gt$rtl.v:175$96_Y.
Removed top 11 bits (of 12) from wire module59.$logic_and$rtl.v:177$103_Y.
Removed top 14 bits (of 22) from wire module59.$neg$rtl.v:155$87_Y.
Removed top 11 bits (of 12) from wire module59.$reduce_xnor$rtl.v:177$102_Y.
Removed top 8 bits (of 22) from wire module59.$ternary$rtl.v:151$75_Y.
Removed top 14 bits (of 22) from wire module59.$ternary$rtl.v:154$82_Y.
Removed top 14 bits (of 22) from wire module59.$ternary$rtl.v:155$85_Y.
Removed top 13 bits (of 14) from wire module59.wire100.
Removed top 10 bits (of 11) from wire module59.wire101.
Removed top 1 bits (of 7) from wire module59.wire103.
Removed top 15 bits (of 16) from wire module59.wire64.
Removed top 4 bits (of 6) from wire module59.wire93.
Removed top 8 bits (of 9) from wire module59.wire97.
Removed top 9 bits (of 10) from wire module59.wire98.
Removed top 6 bits (of 17) from mux cell module66.$ternary$rtl.v:548$416 ($mux).
Removed top 6 bits (of 17) from mux cell module66.$ternary$rtl.v:548$418 ($mux).
Removed top 15 bits (of 20) from port B of cell module66.$sub$rtl.v:553$428 ($sub).
Removed top 14 bits (of 15) from port B of cell module66.$sub$rtl.v:558$433 ($sub).
Removed top 14 bits (of 15) from mux cell module66.$ternary$rtl.v:559$438 ($mux).
Removed top 11 bits (of 15) from mux cell module66.$ternary$rtl.v:559$441 ($mux).
Removed top 11 bits (of 15) from port A of cell module66.$shl$rtl.v:559$442 ($shl).
Removed top 3 bits (of 17) from mux cell module66.$ternary$rtl.v:566$457 ($mux).
Removed top 25 bits (of 34) from mux cell module66.$ternary$rtl.v:566$459 ($mux).
Removed top 8 bits (of 15) from mux cell module66.$ternary$rtl.v:568$461 ($mux).
Removed top 9 bits (of 15) from port A of cell module66.$or$rtl.v:571$463 ($or).
Removed top 2 bits (of 15) from port B of cell module66.$or$rtl.v:571$463 ($or).
Removed top 2 bits (of 15) from port Y of cell module66.$or$rtl.v:571$463 ($or).
Removed top 4 bits (of 15) from port A of cell module66.$neg$rtl.v:577$467 ($neg).
Removed top 15 bits (of 23) from mux cell module66.$ternary$rtl.v:579$480 ($mux).
Removed top 7 bits (of 9) from port A of cell module66.$xnor$rtl.v:588$481 ($xnor).
Removed top 2 bits (of 7) from port A of cell module66.$and$rtl.v:593$491 ($and).
Removed top 1 bits (of 8) from FF cell module66.$procdff$646 ($dff).
Removed top 9 bits (of 18) from FF cell module66.$procdff$651 ($dff).
Removed cell module66.$ternary$rtl.v:561$446 ($mux).
Removed top 5 bits (of 14) from mux cell module66.$ternary$rtl.v:566$457 ($mux).
Removed cell module66.$ternary$rtl.v:577$470 ($mux).
Removed top 9 bits (of 18) from wire module66.$0\reg83[17:0].
Removed top 14 bits (of 15) from wire module66.$logic_and$rtl.v:559$436_Y.
Removed top 2 bits (of 15) from wire module66.$or$rtl.v:571$463_Y.
Removed top 15 bits (of 16) from wire module66.$reduce_xnor$rtl.v:571$466_Y.
Removed top 22 bits (of 23) from wire module66.$reduce_xnor$rtl.v:579$478_Y.
Removed top 14 bits (of 15) from wire module66.$reduce_xor$rtl.v:558$432_Y.
Removed top 14 bits (of 15) from wire module66.$reduce_xor$rtl.v:564$450_Y.
Removed top 6 bits (of 17) from wire module66.$ternary$rtl.v:548$416_Y.
Removed top 6 bits (of 17) from wire module66.$ternary$rtl.v:548$418_Y.
Removed top 14 bits (of 15) from wire module66.$ternary$rtl.v:559$438_Y.
Removed top 11 bits (of 15) from wire module66.$ternary$rtl.v:559$441_Y.
Removed top 8 bits (of 17) from wire module66.$ternary$rtl.v:566$457_Y.
Removed top 25 bits (of 34) from wire module66.$ternary$rtl.v:566$459_Y.
Removed top 8 bits (of 15) from wire module66.$ternary$rtl.v:568$461_Y.
Removed top 15 bits (of 23) from wire module66.$ternary$rtl.v:579$480_Y.
Removed top 3 bits (of 20) from wire module66.$xnor$rtl.v:579$477_Y.
Removed top 4 bits (of 15) from wire module66.wire72.
Removed top 15 bits (of 16) from wire module66.wire84.
Removed top 3 bits (of 11) from mux cell top.$ternary$rtl.v:41$5 ($mux).
Removed top 9 bits (of 11) from port A of cell top.$mul$rtl.v:41$6 ($mul).
Removed top 3 bits (of 11) from port B of cell top.$mul$rtl.v:41$6 ($mul).
Removed top 1 bits (of 11) from port Y of cell top.$mul$rtl.v:41$6 ($mul).
Removed top 3 bits (of 4) from port A of cell top.$lt$rtl.v:42$9 ($lt).
Removed top 17 bits (of 21) from port A of cell top.$and$rtl.v:44$10 ($and).
Removed top 20 bits (of 21) from port B of cell top.$and$rtl.v:44$10 ($and).
Removed top 17 bits (of 21) from port Y of cell top.$and$rtl.v:44$10 ($and).
Removed top 7 bits (of 11) from mux cell top.$ternary$rtl.v:47$18 ($mux).
Removed top 16 bits (of 17) from port A of cell top.$not$rtl.v:47$20 ($not).
Removed top 16 bits (of 17) from port B of cell top.$le$rtl.v:51$23 ($le).
Removed top 20 bits (of 21) from port B of cell top.$or$rtl.v:56$33 ($or).
Removed top 20 bits (of 21) from port B of cell top.$gt$rtl.v:56$34 ($gt).
Removed top 7 bits (of 8) from port B of cell top.$sub$rtl.v:56$35 ($sub).
Removed top 3 bits (of 8) from port Y of cell top.$sub$rtl.v:56$35 ($sub).
Removed top 3 bits (of 8) from port A of cell top.$sub$rtl.v:56$35 ($sub).
Removed top 9 bits (of 10) from port A of cell top.$sub$rtl.v:57$36 ($sub).
Removed top 20 bits (of 21) from port B of cell top.$sub$rtl.v:57$36 ($sub).
Removed top 17 bits (of 21) from mux cell top.$ternary$rtl.v:58$42 ($mux).
Removed top 17 bits (of 21) from port B of cell top.$or$rtl.v:58$43 ($or).
Removed top 17 bits (of 21) from wire top.$and$rtl.v:44$10_Y.
Removed top 1 bits (of 11) from wire top.$mul$rtl.v:41$6_Y.
Removed top 20 bits (of 21) from wire top.$reduce_and$rtl.v:56$32_Y.
Removed top 16 bits (of 17) from wire top.$reduce_or$rtl.v:47$19_Y.
Removed top 3 bits (of 4) from wire top.$reduce_xor$rtl.v:41$7_Y.
Removed top 3 bits (of 11) from wire top.$ternary$rtl.v:41$5_Y.
Removed top 7 bits (of 11) from wire top.$ternary$rtl.v:47$18_Y.
Removed top 17 bits (of 21) from wire top.$ternary$rtl.v:58$42_Y.
Removed top 21 bits (of 22) from wire top.wire143.
Removed top 18 bits (of 20) from wire top.wire4.
Removed top 20 bits (of 21) from wire top.wire52.
Removed top 9 bits (of 10) from wire top.wire53.
Removed top 4 bits (of 17) from wire top.wire55.
Removed top 12 bits (of 13) from wire top.wire58.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 6 unused cells and 111 unused wires.
<suppressed ~12 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~388 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module112:
  creating $macc model for $add$rtl.v:418$294 ($add).
  creating $macc model for $add$rtl.v:432$318 ($add).
  creating $macc model for $mul$rtl.v:444$328 ($mul).
  creating $macc model for $neg$rtl.v:460$345 ($neg).
  creating $macc model for $sub$rtl.v:482$394 ($sub).
  creating $alu model for $macc $sub$rtl.v:482$394.
  creating $alu model for $macc $neg$rtl.v:460$345.
  creating $alu model for $macc $add$rtl.v:432$318.
  creating $alu model for $macc $add$rtl.v:418$294.
  creating $macc cell for $mul$rtl.v:444$328: $auto$alumacc.cc:354:replace_macc$779
  creating $alu model for $gt$rtl.v:468$356 ($gt): new $alu
  creating $alu model for $le$rtl.v:435$322 ($le): new $alu
  creating $alu model for $lt$rtl.v:461$346 ($lt): new $alu
  creating $alu model for $lt$rtl.v:470$362 ($lt): new $alu
  creating $alu model for $lt$rtl.v:480$386 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:480$386: $auto$alumacc.cc:474:replace_alu$785
  creating $alu cell for $lt$rtl.v:470$362: $auto$alumacc.cc:474:replace_alu$790
  creating $alu cell for $lt$rtl.v:461$346: $auto$alumacc.cc:474:replace_alu$795
  creating $alu cell for $le$rtl.v:435$322: $auto$alumacc.cc:474:replace_alu$800
  creating $alu cell for $gt$rtl.v:468$356: $auto$alumacc.cc:474:replace_alu$809
  creating $alu cell for $add$rtl.v:418$294: $auto$alumacc.cc:474:replace_alu$814
  creating $alu cell for $add$rtl.v:432$318: $auto$alumacc.cc:474:replace_alu$817
  creating $alu cell for $neg$rtl.v:460$345: $auto$alumacc.cc:474:replace_alu$820
  creating $alu cell for $sub$rtl.v:482$394: $auto$alumacc.cc:474:replace_alu$823
  created 9 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module31:
  creating $macc model for $sub$rtl.v:368$291 ($sub).
  creating $macc model for $sub$rtl.v:368$292 ($sub).
  merging $macc model for $sub$rtl.v:368$291 into $sub$rtl.v:368$292.
  creating $macc cell for $sub$rtl.v:368$292: $auto$alumacc.cc:354:replace_macc$826
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module5:
  creating $macc model for $mul$rtl.v:256$132 ($mul).
  creating $macc model for $mul$rtl.v:310$232 ($mul).
  creating $macc model for $mul$rtl.v:326$260 ($mul).
  creating $macc model for $neg$rtl.v:262$147 ($neg).
  creating $macc model for $neg$rtl.v:292$188 ($neg).
  creating $macc model for $sub$rtl.v:291$185 ($sub).
  creating $macc model for $sub$rtl.v:298$199 ($sub).
  creating $alu model for $macc $sub$rtl.v:298$199.
  creating $alu model for $macc $sub$rtl.v:291$185.
  creating $alu model for $macc $neg$rtl.v:292$188.
  creating $alu model for $macc $neg$rtl.v:262$147.
  creating $macc cell for $mul$rtl.v:326$260: $auto$alumacc.cc:354:replace_macc$827
  creating $macc cell for $mul$rtl.v:310$232: $auto$alumacc.cc:354:replace_macc$828
  creating $macc cell for $mul$rtl.v:256$132: $auto$alumacc.cc:354:replace_macc$829
  creating $alu model for $gt$rtl.v:258$141 ($gt): new $alu
  creating $alu model for $gt$rtl.v:266$151 ($gt): new $alu
  creating $alu model for $gt$rtl.v:289$180 ($gt): new $alu
  creating $alu model for $gt$rtl.v:299$200 ($gt): new $alu
  creating $alu model for $gt$rtl.v:304$220 ($gt): new $alu
  creating $alu model for $gt$rtl.v:312$240 ($gt): new $alu
  creating $alu model for $lt$rtl.v:278$171 ($lt): new $alu
  creating $alu model for $lt$rtl.v:323$254 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:323$254: $auto$alumacc.cc:474:replace_alu$838
  creating $alu cell for $lt$rtl.v:278$171: $auto$alumacc.cc:474:replace_alu$849
  creating $alu cell for $gt$rtl.v:312$240: $auto$alumacc.cc:474:replace_alu$854
  creating $alu cell for $gt$rtl.v:304$220: $auto$alumacc.cc:474:replace_alu$859
  creating $alu cell for $gt$rtl.v:299$200: $auto$alumacc.cc:474:replace_alu$864
  creating $alu cell for $gt$rtl.v:289$180: $auto$alumacc.cc:474:replace_alu$869
  creating $alu cell for $gt$rtl.v:266$151: $auto$alumacc.cc:474:replace_alu$874
  creating $alu cell for $gt$rtl.v:258$141: $auto$alumacc.cc:474:replace_alu$885
  creating $alu cell for $neg$rtl.v:262$147: $auto$alumacc.cc:474:replace_alu$896
  creating $alu cell for $neg$rtl.v:292$188: $auto$alumacc.cc:474:replace_alu$899
  creating $alu cell for $sub$rtl.v:291$185: $auto$alumacc.cc:474:replace_alu$902
  creating $alu cell for $sub$rtl.v:298$199: $auto$alumacc.cc:474:replace_alu$905
  created 12 $alu and 3 $macc cells.
Extracting $alu and $macc cells in module module59:
  creating $macc model for $neg$rtl.v:133$57 ($neg).
  creating $macc model for $neg$rtl.v:155$87 ($neg).
  creating $macc model for $sub$rtl.v:155$88 ($sub).
  merging $macc model for $neg$rtl.v:155$87 into $sub$rtl.v:155$88.
  creating $alu model for $macc $sub$rtl.v:155$88.
  creating $macc cell for $neg$rtl.v:133$57: $auto$alumacc.cc:354:replace_macc$908
  creating $alu model for $gt$rtl.v:175$96 ($gt): new $alu
  creating $alu model for $le$rtl.v:128$48 ($le): new $alu
  creating $alu cell for $le$rtl.v:128$48: $auto$alumacc.cc:474:replace_alu$911
  creating $alu cell for $gt$rtl.v:175$96: $auto$alumacc.cc:474:replace_alu$924
  creating $alu cell for $sub$rtl.v:155$88: $auto$alumacc.cc:474:replace_alu$929
  created 3 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module66:
  creating $macc model for $add$rtl.v:533$410 ($add).
  creating $macc model for $neg$rtl.v:558$431 ($neg).
  creating $macc model for $neg$rtl.v:569$462 ($neg).
  creating $macc model for $sub$rtl.v:553$428 ($sub).
  creating $macc model for $sub$rtl.v:558$433 ($sub).
  creating $alu model for $macc $sub$rtl.v:558$433.
  creating $alu model for $macc $sub$rtl.v:553$428.
  creating $alu model for $macc $neg$rtl.v:569$462.
  creating $alu model for $macc $neg$rtl.v:558$431.
  creating $alu model for $macc $add$rtl.v:533$410.
  creating $alu model for $gt$rtl.v:546$414 ($gt): new $alu
  creating $alu model for $gt$rtl.v:553$429 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:553$429: $auto$alumacc.cc:474:replace_alu$934
  creating $alu cell for $gt$rtl.v:546$414: $auto$alumacc.cc:474:replace_alu$939
  creating $alu cell for $add$rtl.v:533$410: $auto$alumacc.cc:474:replace_alu$950
  creating $alu cell for $neg$rtl.v:558$431: $auto$alumacc.cc:474:replace_alu$953
  creating $alu cell for $neg$rtl.v:569$462: $auto$alumacc.cc:474:replace_alu$956
  creating $alu cell for $sub$rtl.v:553$428: $auto$alumacc.cc:474:replace_alu$959
  creating $alu cell for $sub$rtl.v:558$433: $auto$alumacc.cc:474:replace_alu$962
  created 7 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $mul$rtl.v:41$6 ($mul).
  creating $macc model for $mul$rtl.v:57$37 ($mul).
  creating $macc model for $sub$rtl.v:56$35 ($sub).
  creating $macc model for $sub$rtl.v:57$36 ($sub).
  creating $alu model for $macc $sub$rtl.v:57$36.
  creating $alu model for $macc $sub$rtl.v:56$35.
  creating $macc cell for $mul$rtl.v:57$37: $auto$alumacc.cc:354:replace_macc$965
  creating $macc cell for $mul$rtl.v:41$6: $auto$alumacc.cc:354:replace_macc$966
  creating $alu model for $gt$rtl.v:56$34 ($gt): new $alu
  creating $alu model for $le$rtl.v:51$23 ($le): new $alu
  creating $alu model for $lt$rtl.v:42$9 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:42$9: $auto$alumacc.cc:474:replace_alu$970
  creating $alu cell for $le$rtl.v:51$23: $auto$alumacc.cc:474:replace_alu$975
  creating $alu cell for $gt$rtl.v:56$34: $auto$alumacc.cc:474:replace_alu$988
  creating $alu cell for $sub$rtl.v:56$35: $auto$alumacc.cc:474:replace_alu$993
  creating $alu cell for $sub$rtl.v:57$36: $auto$alumacc.cc:474:replace_alu$996
  created 5 $alu and 2 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
<suppressed ~2 debug messages>
Optimizing module module31.
Optimizing module module5.
<suppressed ~29 debug messages>
Optimizing module module59.
<suppressed ~1 debug messages>
Optimizing module module66.
<suppressed ~1 debug messages>
Optimizing module top.
<suppressed ~2 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$614.
    dead port 2/2 on $mux $procmux$614.
    dead port 1/2 on $mux $procmux$620.
    dead port 2/2 on $mux $procmux$620.
    dead port 1/2 on $mux $procmux$626.
    dead port 2/2 on $mux $procmux$626.
    dead port 1/2 on $mux $procmux$632.
    dead port 2/2 on $mux $procmux$632.
    dead port 1/2 on $mux $ternary$rtl.v:275$163.
    dead port 2/2 on $mux $ternary$rtl.v:275$163.
    dead port 1/2 on $mux $ternary$rtl.v:291$187.
    dead port 2/2 on $mux $ternary$rtl.v:291$187.
    dead port 1/2 on $mux $ternary$rtl.v:297$191.
    dead port 2/2 on $mux $ternary$rtl.v:297$191.
    dead port 1/2 on $mux $ternary$rtl.v:297$193.
    dead port 2/2 on $mux $ternary$rtl.v:297$193.
    dead port 1/2 on $mux $ternary$rtl.v:300$207.
    dead port 2/2 on $mux $ternary$rtl.v:300$207.
    dead port 1/2 on $mux $ternary$rtl.v:302$218.
    dead port 2/2 on $mux $ternary$rtl.v:302$218.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 20 multiplexer ports.
<suppressed ~69 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$807: { $auto$rtlil.cc:1832:Not$804 $auto$rtlil.cc:1835:ReduceAnd$806 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$805: { $auto$alumacc.cc:490:replace_alu$801 [0] $auto$alumacc.cc:490:replace_alu$801 [1] $auto$alumacc.cc:490:replace_alu$801 [2] $auto$alumacc.cc:490:replace_alu$801 [3] $auto$alumacc.cc:490:replace_alu$801 [4] $auto$alumacc.cc:490:replace_alu$801 [5] $auto$alumacc.cc:490:replace_alu$801 [6] $auto$alumacc.cc:490:replace_alu$801 [7] $auto$alumacc.cc:490:replace_alu$801 [8] $auto$alumacc.cc:490:replace_alu$801 [9] $auto$alumacc.cc:490:replace_alu$801 [10] $auto$alumacc.cc:490:replace_alu$801 [11] }
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
    New input vector for $reduce_or cell $reduce_or$rtl.v:312$238: { $auto$wreduce.cc:455:run$723 [0] $auto$wreduce.cc:455:run$723 [1] $auto$wreduce.cc:455:run$723 [2] $auto$wreduce.cc:455:run$723 [3] $auto$wreduce.cc:455:run$723 [4] $auto$wreduce.cc:455:run$723 [5] $auto$wreduce.cc:455:run$723 [6] $auto$wreduce.cc:455:run$723 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$841: { $auto$alumacc.cc:490:replace_alu$839 [0] $auto$alumacc.cc:490:replace_alu$839 [1] $auto$alumacc.cc:490:replace_alu$839 [2] $auto$alumacc.cc:490:replace_alu$839 [3] $auto$alumacc.cc:490:replace_alu$839 [4] $auto$alumacc.cc:490:replace_alu$839 [5] $auto$alumacc.cc:490:replace_alu$839 [6] $auto$alumacc.cc:490:replace_alu$839 [7] $auto$alumacc.cc:490:replace_alu$839 [8] $auto$alumacc.cc:490:replace_alu$839 [9] $auto$alumacc.cc:490:replace_alu$839 [10] $auto$alumacc.cc:490:replace_alu$839 [11] $auto$alumacc.cc:490:replace_alu$839 [12] $auto$alumacc.cc:490:replace_alu$839 [13] $auto$alumacc.cc:490:replace_alu$839 [14] $auto$alumacc.cc:490:replace_alu$839 [15] $auto$alumacc.cc:490:replace_alu$839 [16] }
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$922: { $auto$rtlil.cc:1832:Not$921 $auto$rtlil.cc:1835:ReduceAnd$915 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$914: { $auto$alumacc.cc:490:replace_alu$912 [0] $auto$alumacc.cc:490:replace_alu$912 [1] }
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$942: { $auto$alumacc.cc:490:replace_alu$940 [0] $auto$alumacc.cc:490:replace_alu$940 [1] $auto$alumacc.cc:490:replace_alu$940 [2] $auto$alumacc.cc:490:replace_alu$940 [3] $auto$alumacc.cc:490:replace_alu$940 [4] $auto$alumacc.cc:490:replace_alu$940 [5] $auto$alumacc.cc:490:replace_alu$940 [6] $auto$alumacc.cc:490:replace_alu$940 [7] $auto$alumacc.cc:490:replace_alu$940 [8] $auto$alumacc.cc:490:replace_alu$940 [9] }
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$986: { $auto$rtlil.cc:1832:Not$985 $auto$rtlil.cc:1835:ReduceAnd$979 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$978: { $auto$alumacc.cc:490:replace_alu$976 [0] $auto$alumacc.cc:490:replace_alu$976 [1] $auto$alumacc.cc:490:replace_alu$976 [2] $auto$alumacc.cc:490:replace_alu$976 [3] $auto$alumacc.cc:490:replace_alu$976 [4] $auto$alumacc.cc:490:replace_alu$976 [5] $auto$alumacc.cc:490:replace_alu$976 [6] $auto$alumacc.cc:490:replace_alu$976 [7] $auto$alumacc.cc:490:replace_alu$976 [8] $auto$alumacc.cc:490:replace_alu$976 [9] $auto$alumacc.cc:490:replace_alu$976 [10] $auto$alumacc.cc:490:replace_alu$976 [11] $auto$alumacc.cc:490:replace_alu$976 [12] $auto$alumacc.cc:490:replace_alu$976 [13] $auto$alumacc.cc:490:replace_alu$976 [14] $auto$alumacc.cc:490:replace_alu$976 [15] $auto$alumacc.cc:490:replace_alu$976 [16] }
  Optimizing cells in module \top.
Performed a total of 9 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$670 ($dff) from module module5.
Removing $procdff$671 ($dff) from module module5.
Removing $procdff$672 ($dff) from module module5.
Removing $procdff$673 ($dff) from module module5.
Removing $procdff$678 ($dff) from module module59.
Replaced 5 DFF cells.

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 38 unused cells and 105 unused wires.
<suppressed ~45 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
<suppressed ~4 debug messages>
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$666 ($dff) from module module5.
Removing $procdff$669 ($dff) from module module5.
Replaced 2 DFF cells.

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 6 unused wires.
<suppressed ~3 debug messages>

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.13.16. Rerunning OPT passes. (Maybe there is more to do..)

2.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

2.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.13.23. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking module5.reg20 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking module5.reg21 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking module59.reg107 as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
<suppressed ~50 debug messages>
Optimizing module module31.
Optimizing module module5.
<suppressed ~40 debug messages>
Optimizing module module59.
<suppressed ~22 debug messages>
Optimizing module module66.
<suppressed ~37 debug messages>
Optimizing module top.
<suppressed ~21 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 42 unused wires.
<suppressed ~8 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
    Consolidated identical input bits for $mux cell $procmux$581:
      Old ports: A={ \wire114 [14:0] 1'0 \reg117 [3:0] $reduce_or$rtl.v:443$327_Y }, B={ 18'000000000000000000 $shl$rtl.v:434$321_Y }, Y=$procmux$581_Y
      New ports: A={ \wire114 [14:0] \reg117 [3:0] $reduce_or$rtl.v:443$327_Y }, B={ 17'00000000000000000 $shl$rtl.v:434$321_Y }, Y={ $procmux$581_Y [20:6] $procmux$581_Y [4:0] }
      New connections: $procmux$581_Y [5] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:430$314:
      Old ports: A={ 24'000000000000000000000000 \wire115 [2:1] }, B={ $ternary$rtl.v:429$313_Y 1'0 \reg117 [3:0] }, Y=$ternary$rtl.v:430$314_Y
      New ports: A={ 23'00000000000000000000000 \wire115 [2:1] }, B={ $ternary$rtl.v:429$313_Y \reg117 [3:0] }, Y={ $ternary$rtl.v:430$314_Y [25:5] $ternary$rtl.v:430$314_Y [3:0] }
      New connections: $ternary$rtl.v:430$314_Y [4] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:466$352:
      Old ports: A=8'10100000, B={ 3'000 \reg121 }, Y=$ternary$rtl.v:466$352_Y
      New ports: A=6'100000, B={ 1'0 \reg121 }, Y=$ternary$rtl.v:466$352_Y [5:0]
      New connections: $ternary$rtl.v:466$352_Y [7:6] = { $ternary$rtl.v:466$352_Y [5] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:482$393:
      Old ports: A=6'100111, B={ 5'00000 $logic_not$rtl.v:482$390_Y [0] }, Y=$ternary$rtl.v:482$393_Y [5:0]
      New ports: A=2'11, B={ 1'0 $logic_not$rtl.v:482$390_Y [0] }, Y=$ternary$rtl.v:482$393_Y [1:0]
      New connections: $ternary$rtl.v:482$393_Y [5:2] = { $ternary$rtl.v:482$393_Y [1] 2'00 $ternary$rtl.v:482$393_Y [1] }
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:312$237:
      Old ports: A=8'00000001, B=8'10100111, Y=$auto$wreduce.cc:455:run$723 [7:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$723 [1]
      New connections: { $auto$wreduce.cc:455:run$723 [7:2] $auto$wreduce.cc:455:run$723 [0] } = { $auto$wreduce.cc:455:run$723 [1] 1'0 $auto$wreduce.cc:455:run$723 [1] 2'00 $auto$wreduce.cc:455:run$723 [1] 1'1 }
  Optimizing cells in module \module5.
    New input vector for $reduce_or cell $reduce_or$rtl.v:312$238: 1'1
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
    Consolidated identical input bits for $mux cell $procmux$640:
      Old ports: A={ $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] }, B={ 16'0000000000000000 $auto$wreduce.cc:455:run$732 [0] }, Y=$0\reg109[16:0]
      New ports: A={ $pos$rtl.v:186$112_Y [16] $pos$rtl.v:186$112_Y [16] }, B={ 1'0 $auto$wreduce.cc:455:run$732 [0] }, Y=$0\reg109[16:0] [1:0]
      New connections: $0\reg109[16:0] [16:2] = { $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] $0\reg109[16:0] [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:154$82:
      Old ports: A=8'00000000, B=8'10011111, Y=$auto$wreduce.cc:455:run$738 [7:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$738 [0]
      New connections: $auto$wreduce.cc:455:run$738 [7:1] = { $auto$wreduce.cc:455:run$738 [0] 2'00 $auto$wreduce.cc:455:run$738 [0] $auto$wreduce.cc:455:run$738 [0] $auto$wreduce.cc:455:run$738 [0] $auto$wreduce.cc:455:run$738 [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:176$101:
      Old ports: A=8'00000000, B=8'10101101, Y=$0\reg107[7:0]
      New ports: A=1'0, B=1'1, Y=$0\reg107[7:0] [0]
      New connections: $0\reg107[7:0] [7:1] = { $0\reg107[7:0] [0] 1'0 $0\reg107[7:0] [0] 1'0 $0\reg107[7:0] [0] $0\reg107[7:0] [0] 1'0 }
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:579$480:
      Old ports: A={ 7'0000000 $auto$wreduce.cc:455:run$751 [0] }, B=8'10101010, Y=$auto$wreduce.cc:455:run$761 [7:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$751 [0] }, B=2'10, Y=$auto$wreduce.cc:455:run$761 [1:0]
      New connections: $auto$wreduce.cc:455:run$761 [7:2] = { $auto$wreduce.cc:455:run$761 [1] 1'0 $auto$wreduce.cc:455:run$761 [1] 1'0 $auto$wreduce.cc:455:run$761 [1] 1'0 }
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:41$5:
      Old ports: A=8'10100001, B=8'00000000, Y=$auto$wreduce.cc:455:run$770 [7:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$770 [0]
      New connections: $auto$wreduce.cc:455:run$770 [7:1] = { $auto$wreduce.cc:455:run$770 [0] 1'0 $auto$wreduce.cc:455:run$770 [0] 4'0000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:47$21:
      Old ports: A={ 13'0000000000000 $auto$wreduce.cc:455:run$771 [3:0] }, B=17'11111111111111111, Y=\wire54
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$771 [3:0] }, B=5'11111, Y=\wire54 [4:0]
      New connections: \wire54 [16:5] = { \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] \wire54 [4] }
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $reduce_and$rtl.v:56$32: { \wire54 [0] \wire54 [1] \wire54 [2] \wire54 [3] \wire54 [4] }
  Optimizing cells in module \top.
Performed a total of 13 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
<suppressed ~2 debug messages>
Optimizing module module59.
<suppressed ~2 debug messages>
Optimizing module module66.
Optimizing module top.
<suppressed ~1 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module112..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module31..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module59..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module66..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~60 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module112.
  Optimizing cells in module \module31.
  Optimizing cells in module \module5.
  Optimizing cells in module \module59.
  Optimizing cells in module \module66.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
Optimizing module module59.
Optimizing module module66.
Optimizing module top.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$constmap:178aab15d582a01c73c7675558f35b42835f3e83$paramod$c11a52ff08e1e65565f4cb227ff17c8f492c4920\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add { $auto$wreduce.cc:455:run$770 [7] 1'0 $auto$wreduce.cc:455:run$770 [7] 4'0000 $auto$wreduce.cc:455:run$770 [7] } * \wire49 [2:1] (8x2 bits, unsigned)
  add \wire3 * 8'10011100 (22x8 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=21 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=22 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=22\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=10 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $reduce_xnor.
  add { 9'111111111 $auto$opt_expr.cc:189:group_cell_inputs$1031 $auto$opt_expr.cc:189:group_cell_inputs$1029 } * { 21'111111111111111111111 $auto$opt_expr.cc:189:group_cell_inputs$1039 } (22x22 bits, unsigned)
  add 1'1 * $reduce_xor$rtl.v:326$259_Y (1x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
  add \wire9 * \wire7 (16x13 bits, signed)
Using template $paramod$constmap:3b3b61772f60380c041ae8fd80d07b22f2a3e26c$paramod$53c17e419aa468d382aeac6bb44ea2d15609344d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:dbc43acb91fe909136bbc53aee419135d691f351$paramod$54dcca4c079e3e50bef64a87dffd1343a1cd4a5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod$constmap:f5598b838d5441b9585148b07271211dbe246f61$paramod$1f4a8e3012108c254cd899e302bb8f5d81de86d0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:bac79c255af04bddf6e7cb432218468297c57cd9$paramod$f01b1fffba32ca43ce4fbff79e0cb96db5c0f571\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=19\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
  sub $ternary$rtl.v:133$56_Y (10 bits, signed)
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=5\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod$constmap:56271c393ea05084205b52259d1704b984b2b5fd$paramod$0cb4bd67c5e13026bcf1ebe67fe41473956c0a26\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:fad9afcf3897db5747a3f9572c41d26ae82f79f9$paramod$5d8b55948821d64421cb5f5f5c27b0b6ba12b111\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=27\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=6\Y_WIDTH=6 for cells of type $alu.
Using template $paramod$constmap:c42fb733028a8a2e5469b08619901211480d1481$paramod$f8daa8477bef12d82f83ae371c3b744a6f2a8880\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:08da804f58673ed18ce82dfbd7da26701d3712f7$paramod$b65c65c5c125526a3a00e331a275b708462a7eb1\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:7e8299883b5742dfd6c26de62e05651c4b363299$paramod$64cc367e085f4c371694f1e698d2be116b7e9b5b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$f0522119d6196f7fd952d36a5ce77afd586e1b45\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:c4d98413dd8df13ffd57ff56b43477df5cf16e7e$paramod$857a96df42512fb818daa856850964c65012c66b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
  add \wire114 * 8'10100001 (21x8 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=5 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
  add { \wire32 [15] \wire32 [15] \wire32 [15:13] } (5 bits, unsigned)
  sub $ternary$rtl.v:367$284_Y (12 bits, unsigned)
  add bits $auto$wreduce.cc:455:run$694 [0] (1 bits)
  packed 1 (1) bits / 1 words into adder tree
Using template $paramod\_90_fa\WIDTH=18 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
No more expansions possible.
<suppressed ~7666 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
<suppressed ~745 debug messages>
Optimizing module module31.
<suppressed ~219 debug messages>
Optimizing module module5.
<suppressed ~2600 debug messages>
Optimizing module module59.
<suppressed ~211 debug messages>
Optimizing module module66.
<suppressed ~509 debug messages>
Optimizing module top.
<suppressed ~1146 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
<suppressed ~495 debug messages>
Finding identical cells in module `\module31'.
<suppressed ~18 debug messages>
Finding identical cells in module `\module5'.
<suppressed ~732 debug messages>
Finding identical cells in module `\module59'.
<suppressed ~249 debug messages>
Finding identical cells in module `\module66'.
<suppressed ~66 debug messages>
Finding identical cells in module `\top'.
<suppressed ~195 debug messages>
Removed a total of 585 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$4825 ($_DFF_P_) from module module5.
Removing $auto$simplemap.cc:420:simplemap_dff$10337 ($_DFF_P_) from module module59.
Replaced 2 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 513 unused cells and 2455 unused wires.
<suppressed ~519 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
Optimizing module module31.
Optimizing module module5.
<suppressed ~17 debug messages>
Optimizing module module59.
<suppressed ~14 debug messages>
Optimizing module module66.
Optimizing module top.
<suppressed ~7 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
Finding identical cells in module `\module59'.
<suppressed ~27 debug messages>
Finding identical cells in module `\module66'.
Finding identical cells in module `\top'.
Removed a total of 9 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

2.22.10. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module112' to `<abc-temp-dir>/input.blif'..
Extracted 1439 gates and 1597 wires to a netlist network with 156 inputs and 106 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       33
ABC RESULTS:            ANDNOT cells:      178
ABC RESULTS:              AOI3 cells:       49
ABC RESULTS:              AOI4 cells:        3
ABC RESULTS:               MUX cells:      332
ABC RESULTS:              NAND cells:       28
ABC RESULTS:               NOR cells:       27
ABC RESULTS:               NOT cells:       87
ABC RESULTS:              OAI3 cells:       26
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      283
ABC RESULTS:             ORNOT cells:       50
ABC RESULTS:              XNOR cells:       35
ABC RESULTS:               XOR cells:       78
ABC RESULTS:        internal signals:     1335
ABC RESULTS:           input signals:      156
ABC RESULTS:          output signals:      106
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module31' to `<abc-temp-dir>/input.blif'..
Extracted 175 gates and 241 wires to a netlist network with 64 inputs and 15 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       15
ABC RESULTS:              AOI3 cells:        8
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       10
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              OAI3 cells:       14
ABC RESULTS:                OR cells:       44
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       23
ABC RESULTS:        internal signals:      162
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       15
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module5' to `<abc-temp-dir>/input.blif'..
Extracted 1913 gates and 1972 wires to a netlist network with 57 inputs and 28 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      161
ABC RESULTS:            ANDNOT cells:      299
ABC RESULTS:              AOI3 cells:      181
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               MUX cells:       24
ABC RESULTS:              NAND cells:       31
ABC RESULTS:               NOR cells:       91
ABC RESULTS:               NOT cells:      117
ABC RESULTS:              OAI3 cells:       29
ABC RESULTS:                OR cells:      115
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:              XNOR cells:      273
ABC RESULTS:               XOR cells:      427
ABC RESULTS:        internal signals:     1887
ABC RESULTS:           input signals:       57
ABC RESULTS:          output signals:       28
Removing temp directory.

2.23.4. Extracting gate netlist of module `\module59' to `<abc-temp-dir>/input.blif'..
Extracted 601 gates and 667 wires to a netlist network with 64 inputs and 31 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       34
ABC RESULTS:              AOI3 cells:       19
ABC RESULTS:               MUX cells:       88
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               NOR cells:       12
ABC RESULTS:               NOT cells:       28
ABC RESULTS:              OAI3 cells:       17
ABC RESULTS:                OR cells:      146
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:       15
ABC RESULTS:               XOR cells:       44
ABC RESULTS:        internal signals:      572
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       31
Removing temp directory.

2.23.5. Extracting gate netlist of module `\module66' to `<abc-temp-dir>/input.blif'..
Extracted 1214 gates and 1376 wires to a netlist network with 160 inputs and 96 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       11
ABC RESULTS:            ANDNOT cells:      174
ABC RESULTS:              AOI3 cells:       38
ABC RESULTS:              AOI4 cells:        4
ABC RESULTS:               MUX cells:      204
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               NOR cells:       51
ABC RESULTS:               NOT cells:       68
ABC RESULTS:              OAI3 cells:       23
ABC RESULTS:              OAI4 cells:        6
ABC RESULTS:                OR cells:      221
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:              XNOR cells:       24
ABC RESULTS:               XOR cells:      109
ABC RESULTS:        internal signals:     1120
ABC RESULTS:           input signals:      160
ABC RESULTS:          output signals:       96
Removing temp directory.

2.23.6. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 661 gates and 744 wires to a netlist network with 81 inputs and 13 outputs.

2.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       37
ABC RESULTS:            ANDNOT cells:       89
ABC RESULTS:              AOI3 cells:       41
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:        9
ABC RESULTS:              NAND cells:       27
ABC RESULTS:               NOR cells:       15
ABC RESULTS:               NOT cells:       40
ABC RESULTS:              OAI3 cells:       34
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:       98
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:              XNOR cells:       50
ABC RESULTS:               XOR cells:      108
ABC RESULTS:        internal signals:      650
ABC RESULTS:           input signals:       81
ABC RESULTS:          output signals:       13
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module112.
<suppressed ~69 debug messages>
Optimizing module module31.
Optimizing module module5.
<suppressed ~1 debug messages>
Optimizing module module59.
<suppressed ~4 debug messages>
Optimizing module module66.
<suppressed ~91 debug messages>
Optimizing module top.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module112'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module31'.
Finding identical cells in module `\module5'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module59'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module66'.
<suppressed ~30 debug messages>
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 21 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module112..
Finding unused cells or wires in module \module31..
Finding unused cells or wires in module \module5..
Finding unused cells or wires in module \module59..
Finding unused cells or wires in module \module66..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 2224 unused wires.
<suppressed ~10 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module112 ===

   Number of wires:               1129
   Number of wire bits:           1658
   Number of public wires:          22
   Number of public wire bits:     445
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1298
     $_ANDNOT_                     178
     $_AND_                         33
     $_AOI3_                        49
     $_AOI4_                         3
     $_DFF_P_                       94
     $_MUX_                        332
     $_NAND_                        28
     $_NOR_                         27
     $_NOT_                         83
     $_OAI3_                        26
     $_OAI4_                         1
     $_ORNOT_                       50
     $_OR_                         281
     $_XNOR_                        35
     $_XOR_                         78

=== module31 ===

   Number of wires:                139
   Number of wire bits:            402
   Number of public wires:          15
   Number of public wire bits:     278
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                139
     $_ANDNOT_                      15
     $_AND_                          3
     $_AOI3_                         8
     $_AOI4_                         1
     $_MUX_                         10
     $_NAND_                         5
     $_NOR_                          5
     $_NOT_                         10
     $_OAI3_                        14
     $_OR_                          44
     $_XNOR_                         1
     $_XOR_                         23

=== module5 ===

   Number of wires:               1770
   Number of wire bits:           2405
   Number of public wires:          29
   Number of public wire bits:     571
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1786
     $_ANDNOT_                     299
     $_AND_                        160
     $_AOI3_                       181
     $_DFF_P_                       21
     $_MUX_                         23
     $_NAND_                        31
     $_NOR_                         91
     $_NOT_                        117
     $_OAI3_                        29
     $_ORNOT_                       19
     $_OR_                         114
     $_XNOR_                       273
     $_XOR_                        427
     module31                        1

=== module59 ===

   Number of wires:                432
   Number of wire bits:           1448
   Number of public wires:          32
   Number of public wire bits:     737
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                434
     $_ANDNOT_                      32
     $_AND_                          4
     $_AOI3_                        16
     $_DFF_P_                       10
     $_MUX_                         88
     $_NAND_                         7
     $_NOR_                         12
     $_NOT_                         28
     $_OAI3_                        17
     $_ORNOT_                       13
     $_OR_                         146
     $_XNOR_                        15
     $_XOR_                         44
     module112                       1
     module66                        1

=== module66 ===

   Number of wires:                904
   Number of wire bits:           1315
   Number of public wires:          21
   Number of public wire bits:     347
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1071
     $_ANDNOT_                     172
     $_AND_                         11
     $_AOI3_                        38
     $_AOI4_                         4
     $_DFF_P_                      102
     $_MUX_                        204
     $_NAND_                        33
     $_NOR_                         44
     $_NOT_                         68
     $_OAI3_                        23
     $_OAI4_                         6
     $_ORNOT_                       13
     $_OR_                         220
     $_XNOR_                        24
     $_XOR_                        109

=== top ===

   Number of wires:                568
   Number of wire bits:           1480
   Number of public wires:          19
   Number of public wire bits:     324
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                562
     $_ANDNOT_                      89
     $_AND_                         37
     $_AOI3_                        41
     $_AOI4_                         1
     $_MUX_                          9
     $_NAND_                        27
     $_NOR_                         14
     $_NOT_                         40
     $_OAI3_                        34
     $_OAI4_                         1
     $_ORNOT_                       11
     $_OR_                          98
     $_XNOR_                        50
     $_XOR_                        108
     module5                         1
     module59                        1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module112..
checking module module31..
checking module module5..
checking module module59..
checking module module66..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module112'.
Dumping module `\module31'.
Dumping module `\module5'.
Dumping module `\module59'.
Dumping module `\module66'.
Dumping module `\top'.

Warnings: 14 unique messages, 14 total
End of script. Logfile hash: d032275947
CPU: user 3.53s system 0.01s, MEM: 55.24 MB total, 48.10 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 16% 36x opt_clean (0 sec), 16% 31x proc (0 sec), ...
