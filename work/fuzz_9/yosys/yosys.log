
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module6'.
Generating RTLIL representation for module `\module37'.
Generating RTLIL representation for module `\module17'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell module6.modinst72 (module37).
Mapping positional arguments of cell top.modinst78 (module6).
Warning: Resizing cell port module6.modinst72.y from 5 bits to 282 bits.
Warning: Resizing cell port module6.modinst72.wire42 from 22 bits to 18 bits.
Warning: Resizing cell port module6.modinst72.wire41 from 14 bits to 8 bits.
Warning: Resizing cell port module6.modinst72.wire40 from 21 bits to 12 bits.
Warning: Resizing cell port module6.modinst72.wire38 from 18 bits to 6 bits.
Warning: Resizing cell port module6.modinst36.wire22 from 21 bits to 14 bits.
Warning: Resizing cell port module6.modinst36.wire19 from 20 bits to 5 bits.
Warning: Resizing cell port module6.modinst36.wire18 from 17 bits to 10 bits.
Warning: Resizing cell port module6.modinst36.wire20 from 22 bits to 3 bits.
Warning: Resizing cell port module6.modinst36.y from 14 bits to 126 bits.
Warning: Resizing cell port top.modinst78.y from 16 bits to 151 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$rtl.v:287$217 in module module17.
Marked 1 switch rules as full_case in process $proc$rtl.v:269$197 in module module17.
Marked 2 switch rules as full_case in process $proc$rtl.v:169$77 in module module37.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module17.$proc$rtl.v:253$284'.
  Set init value: \reg24 = 22'0000000000000000000000
Found init rule in `\module17.$proc$rtl.v:252$283'.
  Set init value: \reg25 = 7'0000000
Found init rule in `\module17.$proc$rtl.v:251$282'.
  Set init value: \reg26 = 17'00000000000000000
Found init rule in `\module17.$proc$rtl.v:250$281'.
  Set init value: \reg27 = 17'00000000000000000
Found init rule in `\module17.$proc$rtl.v:249$280'.
  Set init value: \reg28 = 5'00000
Found init rule in `\module17.$proc$rtl.v:248$279'.
  Set init value: \reg29 = 9'000000000
Found init rule in `\module17.$proc$rtl.v:247$278'.
  Set init value: \reg30 = 3'000
Found init rule in `\module17.$proc$rtl.v:246$277'.
  Set init value: \reg31 = 19'0000000000000000000
Found init rule in `\module17.$proc$rtl.v:245$276'.
  Set init value: \reg32 = 9'000000000
Found init rule in `\module17.$proc$rtl.v:244$275'.
  Set init value: \reg33 = 7'0000000
Found init rule in `\module37.$proc$rtl.v:116$196'.
  Set init value: \reg44 = 9'000000000
Found init rule in `\module37.$proc$rtl.v:109$195'.
  Set init value: \reg51 = 19'0000000000000000000
Found init rule in `\module37.$proc$rtl.v:108$194'.
  Set init value: \reg52 = 11'00000000000
Found init rule in `\module37.$proc$rtl.v:107$193'.
  Set init value: \reg53 = 4'0000
Found init rule in `\module37.$proc$rtl.v:106$192'.
  Set init value: \reg54 = 17'00000000000000000
Found init rule in `\module37.$proc$rtl.v:105$191'.
  Set init value: \reg55 = 3'000
Found init rule in `\module37.$proc$rtl.v:104$190'.
  Set init value: \reg56 = 10'0000000000
Found init rule in `\module37.$proc$rtl.v:103$189'.
  Set init value: \reg57 = 9'000000000
Found init rule in `\module37.$proc$rtl.v:95$188'.
  Set init value: \reg65 = 18'000000000000000000
Found init rule in `\module37.$proc$rtl.v:94$187'.
  Set init value: \reg66 = 14'00000000000000
Found init rule in `\module37.$proc$rtl.v:93$186'.
  Set init value: \reg67 = 11'00000000000
Found init rule in `\module37.$proc$rtl.v:92$185'.
  Set init value: \reg68 = 20'00000000000000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module17.$proc$rtl.v:253$284'.
     1/1: $1\reg24[21:0]
Creating decoders for process `\module17.$proc$rtl.v:252$283'.
     1/1: $1\reg25[6:0]
Creating decoders for process `\module17.$proc$rtl.v:251$282'.
     1/1: $1\reg26[16:0]
Creating decoders for process `\module17.$proc$rtl.v:250$281'.
     1/1: $1\reg27[16:0]
Creating decoders for process `\module17.$proc$rtl.v:249$280'.
     1/1: $1\reg28[4:0]
Creating decoders for process `\module17.$proc$rtl.v:248$279'.
     1/1: $1\reg29[8:0]
Creating decoders for process `\module17.$proc$rtl.v:247$278'.
     1/1: $1\reg30[2:0]
Creating decoders for process `\module17.$proc$rtl.v:246$277'.
     1/1: $1\reg31[18:0]
Creating decoders for process `\module17.$proc$rtl.v:245$276'.
     1/1: $1\reg32[8:0]
Creating decoders for process `\module17.$proc$rtl.v:244$275'.
     1/1: $1\reg33[6:0]
Creating decoders for process `\module17.$proc$rtl.v:287$217'.
     1/6: $0\reg33[6:0]
     2/6: $0\reg28[4:0]
     3/6: $0\reg31[18:0]
     4/6: $0\reg32[8:0]
     5/6: $0\reg30[2:0]
     6/6: $0\reg29[8:0]
Creating decoders for process `\module17.$proc$rtl.v:269$197'.
     1/4: $0\reg27[16:0]
     2/4: $0\reg24[21:0]
     3/4: $0\reg25[6:0]
     4/4: $0\reg26[16:0]
Creating decoders for process `\module37.$proc$rtl.v:116$196'.
     1/1: $1\reg44[8:0]
Creating decoders for process `\module37.$proc$rtl.v:109$195'.
     1/1: $1\reg51[18:0]
Creating decoders for process `\module37.$proc$rtl.v:108$194'.
     1/1: $1\reg52[10:0]
Creating decoders for process `\module37.$proc$rtl.v:107$193'.
     1/1: $1\reg53[3:0]
Creating decoders for process `\module37.$proc$rtl.v:106$192'.
     1/1: $1\reg54[16:0]
Creating decoders for process `\module37.$proc$rtl.v:105$191'.
     1/1: $1\reg55[2:0]
Creating decoders for process `\module37.$proc$rtl.v:104$190'.
     1/1: $1\reg56[9:0]
Creating decoders for process `\module37.$proc$rtl.v:103$189'.
     1/1: $1\reg57[8:0]
Creating decoders for process `\module37.$proc$rtl.v:95$188'.
     1/1: $1\reg65[17:0]
Creating decoders for process `\module37.$proc$rtl.v:94$187'.
     1/1: $1\reg66[13:0]
Creating decoders for process `\module37.$proc$rtl.v:93$186'.
     1/1: $1\reg67[10:0]
Creating decoders for process `\module37.$proc$rtl.v:92$185'.
     1/1: $1\reg68[19:0]
Creating decoders for process `\module37.$proc$rtl.v:221$164'.
     1/4: $0\reg68[19:0]
     2/4: $0\reg67[10:0]
     3/4: $0\reg66[13:0]
     4/4: $0\reg65[17:0]
Creating decoders for process `\module37.$proc$rtl.v:169$77'.
     1/7: $0\reg57[8:0]
     2/7: $0\reg56[9:0]
     3/7: $0\reg51[18:0]
     4/7: $0\reg52[10:0]
     5/7: $0\reg53[3:0]
     6/7: $0\reg54[16:0]
     7/7: $0\reg55[2:0]
Creating decoders for process `\module37.$proc$rtl.v:147$51'.
     1/1: $0\reg44[8:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module17.\reg29' using process `\module17.$proc$rtl.v:287$217'.
  created $dff cell `$procdff$345' with positive edge clock.
Creating register for signal `\module17.\reg28' using process `\module17.$proc$rtl.v:287$217'.
  created $dff cell `$procdff$346' with positive edge clock.
Creating register for signal `\module17.\reg30' using process `\module17.$proc$rtl.v:287$217'.
  created $dff cell `$procdff$347' with positive edge clock.
Creating register for signal `\module17.\reg33' using process `\module17.$proc$rtl.v:287$217'.
  created $dff cell `$procdff$348' with positive edge clock.
Creating register for signal `\module17.\reg32' using process `\module17.$proc$rtl.v:287$217'.
  created $dff cell `$procdff$349' with positive edge clock.
Creating register for signal `\module17.\reg31' using process `\module17.$proc$rtl.v:287$217'.
  created $dff cell `$procdff$350' with positive edge clock.
Creating register for signal `\module17.\reg27' using process `\module17.$proc$rtl.v:269$197'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `\module17.\reg26' using process `\module17.$proc$rtl.v:269$197'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\module17.\reg25' using process `\module17.$proc$rtl.v:269$197'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\module17.\reg24' using process `\module17.$proc$rtl.v:269$197'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\module37.\reg68' using process `\module37.$proc$rtl.v:221$164'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\module37.\reg67' using process `\module37.$proc$rtl.v:221$164'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\module37.\reg66' using process `\module37.$proc$rtl.v:221$164'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\module37.\reg65' using process `\module37.$proc$rtl.v:221$164'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\module37.\reg57' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\module37.\reg56' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\module37.\reg55' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\module37.\reg54' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\module37.\reg53' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\module37.\reg52' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\module37.\reg51' using process `\module37.$proc$rtl.v:169$77'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\module37.\reg44' using process `\module37.$proc$rtl.v:147$51'.
  created $dff cell `$procdff$366' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module17.$proc$rtl.v:253$284'.
Removing empty process `module17.$proc$rtl.v:252$283'.
Removing empty process `module17.$proc$rtl.v:251$282'.
Removing empty process `module17.$proc$rtl.v:250$281'.
Removing empty process `module17.$proc$rtl.v:249$280'.
Removing empty process `module17.$proc$rtl.v:248$279'.
Removing empty process `module17.$proc$rtl.v:247$278'.
Removing empty process `module17.$proc$rtl.v:246$277'.
Removing empty process `module17.$proc$rtl.v:245$276'.
Removing empty process `module17.$proc$rtl.v:244$275'.
Found and cleaned up 2 empty switches in `\module17.$proc$rtl.v:287$217'.
Removing empty process `module17.$proc$rtl.v:287$217'.
Found and cleaned up 1 empty switch in `\module17.$proc$rtl.v:269$197'.
Removing empty process `module17.$proc$rtl.v:269$197'.
Removing empty process `module37.$proc$rtl.v:116$196'.
Removing empty process `module37.$proc$rtl.v:109$195'.
Removing empty process `module37.$proc$rtl.v:108$194'.
Removing empty process `module37.$proc$rtl.v:107$193'.
Removing empty process `module37.$proc$rtl.v:106$192'.
Removing empty process `module37.$proc$rtl.v:105$191'.
Removing empty process `module37.$proc$rtl.v:104$190'.
Removing empty process `module37.$proc$rtl.v:103$189'.
Removing empty process `module37.$proc$rtl.v:95$188'.
Removing empty process `module37.$proc$rtl.v:94$187'.
Removing empty process `module37.$proc$rtl.v:93$186'.
Removing empty process `module37.$proc$rtl.v:92$185'.
Removing empty process `module37.$proc$rtl.v:221$164'.
Found and cleaned up 2 empty switches in `\module37.$proc$rtl.v:169$77'.
Removing empty process `module37.$proc$rtl.v:169$77'.
Removing empty process `module37.$proc$rtl.v:147$51'.
Cleaned up 5 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
<suppressed ~9 debug messages>
Optimizing module module37.
<suppressed ~28 debug messages>
Optimizing module module6.
<suppressed ~7 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 11 unused cells and 150 unused wires.
<suppressed ~42 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module17..
checking module module37..
checking module module6..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module37'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 8 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module17..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module37..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $ternary$rtl.v:158$62.
Running muxtree optimizer on module \module6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1 multiplexer ports.
<suppressed ~35 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module17.
    New input vector for $reduce_or cell $reduce_or$rtl.v:316$261: { $xor$rtl.v:316$260_Y [0] $xor$rtl.v:316$260_Y [1] $xor$rtl.v:316$260_Y [2] $xor$rtl.v:316$260_Y [3] $xor$rtl.v:316$260_Y [4] $xor$rtl.v:316$260_Y [5] $xor$rtl.v:316$260_Y [6] $xor$rtl.v:316$260_Y [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:294$229: { \wire18 [6] \wire18 [7] \wire18 [8] \wire18 [9] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:292$223: { \reg25 [0] \reg25 [1] \reg25 [2] \reg25 [3] \reg25 [4] \reg25 [5] \reg25 [6] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:289$218: { \reg27 [0] \reg27 [1] \reg27 [2] \reg27 [3] \reg27 [4] \reg27 [5] \reg27 [6] \reg27 [7] \reg27 [8] \reg27 [9] \reg27 [10] \reg27 [11] \reg27 [12] \reg27 [13] \reg27 [14] \reg27 [15] \reg27 [16] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:282$213: { \wire18 [0] \wire18 [1] \wire18 [2] \wire18 [3] \wire18 [4] \wire18 [5] \wire18 [6] \wire18 [7] \wire18 [8] \wire18 [9] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:324$273: { \reg25 [0] \reg25 [1] \reg25 [2] \reg25 [3] \reg25 [4] \reg25 [5] \reg25 [6] }
  Optimizing cells in module \module17.
  Optimizing cells in module \module37.
    New input vector for $reduce_or cell $reduce_or$rtl.v:214$150: { $neg$rtl.v:214$149_Y [0] $neg$rtl.v:214$149_Y [1] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:212$148: { $shr$rtl.v:212$147_Y [0] $shr$rtl.v:212$147_Y [1] $shr$rtl.v:212$147_Y [2] $shr$rtl.v:212$147_Y [3] $shr$rtl.v:212$147_Y [4] $shr$rtl.v:212$147_Y [5] $shr$rtl.v:212$147_Y [6] $shr$rtl.v:212$147_Y [7] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:156$59: { \wire41 [0] \wire41 [1] \wire41 [2] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:228$174: { \wire59 [0] \wire59 [1] \wire59 [2] \wire59 [3] \wire59 [4] \wire59 [5] \wire59 [6] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:200$113: { \wire45 [0] \wire45 [1] \wire45 [2] \wire45 [3] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:151$53: { \wire38 [0] \wire38 [1] \wire38 [2] \wire38 [3] \wire38 [4] \wire38 [5] }
  Optimizing cells in module \module37.
  Optimizing cells in module \module6.
    New input vector for $reduce_and cell $reduce_and$rtl.v:63$28: { \wire8 [0] \wire8 [1] \wire8 [2] \wire8 [3] \wire8 [4] \wire8 [5] \wire8 [6] \wire8 [7] \wire8 [8] \wire8 [9] \wire8 [10] \wire8 [11] \wire8 [12] \wire8 [13] \wire8 [14] \wire8 [15] \wire8 [16] \wire8 [17] \wire8 [18] \wire8 [19] }
  Optimizing cells in module \module6.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:17$2: { $xor$rtl.v:17$1_Y [0] $xor$rtl.v:17$1_Y [1] $xor$rtl.v:17$1_Y [2] $xor$rtl.v:17$1_Y [3] $xor$rtl.v:17$1_Y [4] $xor$rtl.v:17$1_Y [5] $xor$rtl.v:17$1_Y [6] $xor$rtl.v:17$1_Y [7] $xor$rtl.v:17$1_Y [8] $xor$rtl.v:17$1_Y [9] $xor$rtl.v:17$1_Y [10] $xor$rtl.v:17$1_Y [11] $xor$rtl.v:17$1_Y [12] $xor$rtl.v:17$1_Y [13] $xor$rtl.v:17$1_Y [14] $xor$rtl.v:17$1_Y [15] $xor$rtl.v:17$1_Y [16] $xor$rtl.v:17$1_Y [17] $xor$rtl.v:17$1_Y [18] $xor$rtl.v:17$1_Y [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:21$9: { \wire1 [0] \wire1 [1] \wire1 [2] \wire1 [3] \wire1 [4] \wire1 [5] \wire1 [6] \wire1 [7] \wire1 [8] \wire1 [9] \wire1 [10] \wire1 [11] \wire1 [12] \wire1 [13] \wire1 [14] \wire1 [15] \wire1 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:20$7: { $ternary$rtl.v:20$6_Y [0] $ternary$rtl.v:20$6_Y [1] $ternary$rtl.v:20$6_Y [2] $ternary$rtl.v:20$6_Y [3] $ternary$rtl.v:20$6_Y [4] $ternary$rtl.v:20$6_Y [5] $ternary$rtl.v:20$6_Y [6] $ternary$rtl.v:20$6_Y [7] $ternary$rtl.v:20$6_Y [8] $ternary$rtl.v:20$6_Y [9] $ternary$rtl.v:20$6_Y [10] $ternary$rtl.v:20$6_Y [11] $ternary$rtl.v:20$6_Y [12] $ternary$rtl.v:20$6_Y [13] $ternary$rtl.v:20$6_Y [14] $ternary$rtl.v:20$6_Y [15] $ternary$rtl.v:20$6_Y [16] $ternary$rtl.v:20$6_Y [17] $ternary$rtl.v:20$6_Y [18] $ternary$rtl.v:20$6_Y [19] $ternary$rtl.v:20$6_Y [20] }
  Optimizing cells in module \top.
Performed a total of 16 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reg68 = 20'00000000000000000000 to constant driver in module module37.
Promoted 1 init specs to constant drivers.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module17..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module37..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module17.
  Optimizing cells in module \module37.
  Optimizing cells in module \module6.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 8) from port B of cell module17.$le$rtl.v:271$198 ($le).
Removed top 3 bits (of 10) from port Y of cell module17.$xor$rtl.v:274$208 ($xor).
Removed top 3 bits (of 10) from port A of cell module17.$xor$rtl.v:274$208 ($xor).
Removed top 3 bits (of 8) from port B of cell module17.$xor$rtl.v:274$208 ($xor).
Removed top 3 bits (of 10) from mux cell module17.$ternary$rtl.v:274$207 ($mux).
Removed top 22 bits (of 23) from port A of cell module17.$sub$rtl.v:293$225 ($sub).
Removed top 18 bits (of 23) from mux cell module17.$ternary$rtl.v:293$228 ($mux).
Removed top 14 bits (of 22) from port B of cell module17.$ge$rtl.v:309$244 ($ge).
Removed top 13 bits (of 22) from mux cell module17.$ternary$rtl.v:314$259 ($mux).
Removed top 9 bits (of 17) from port B of cell module17.$and$rtl.v:319$262 ($and).
Removed top 14 bits (of 17) from mux cell module17.$ternary$rtl.v:321$272 ($mux).
Removed top 5 bits (of 7) from FF cell module17.$procdff$348 ($dff).
Removed top 2 bits (of 17) from FF cell module17.$procdff$351 ($dff).
Removed top 18 bits (of 23) from mux cell module17.$ternary$rtl.v:293$227 ($mux).
Removed top 6 bits (of 15) from mux cell module17.$ternary$rtl.v:314$258 ($mux).
Removed top 14 bits (of 17) from mux cell module17.$ternary$rtl.v:320$269 ($mux).
Removed top 18 bits (of 23) from port Y of cell module17.$sub$rtl.v:293$225 ($sub).
Removed top 18 bits (of 23) from port B of cell module17.$sub$rtl.v:293$225 ($sub).
Removed top 6 bits (of 15) from mux cell module17.$ternary$rtl.v:314$256 ($mux).
Removed top 14 bits (of 17) from mux cell module17.$ternary$rtl.v:319$265 ($mux).
Removed top 6 bits (of 15) from port Y of cell module17.$xor$rtl.v:313$251 ($xor).
Removed top 6 bits (of 15) from port A of cell module17.$xor$rtl.v:313$251 ($xor).
Removed top 5 bits (of 14) from mux cell module17.$ternary$rtl.v:314$254 ($mux).
Removed top 14 bits (of 17) from port Y of cell module17.$and$rtl.v:319$262 ($and).
Removed top 14 bits (of 17) from port A of cell module17.$and$rtl.v:319$262 ($and).
Removed top 7 bits (of 8) from port B of cell module17.$and$rtl.v:319$262 ($and).
Removed top 14 bits (of 17) from wire module17.$and$rtl.v:319$262_Y.
Removed top 6 bits (of 7) from wire module17.$logic_and$rtl.v:281$212_Y.
Removed top 8 bits (of 9) from wire module17.$logic_not$rtl.v:324$274_Y.
Removed top 16 bits (of 17) from wire module17.$reduce_or$rtl.v:282$213_Y.
Removed top 18 bits (of 23) from wire module17.$sub$rtl.v:293$225_Y.
Removed top 3 bits (of 10) from wire module17.$ternary$rtl.v:274$207_Y.
Removed top 1 bits (of 8) from wire module17.$ternary$rtl.v:281$211_Y.
Removed top 5 bits (of 14) from wire module17.$ternary$rtl.v:314$254_Y.
Removed top 6 bits (of 15) from wire module17.$ternary$rtl.v:314$256_Y.
Removed top 6 bits (of 15) from wire module17.$ternary$rtl.v:314$258_Y.
Removed top 14 bits (of 22) from wire module17.$ternary$rtl.v:314$259_Y.
Removed top 14 bits (of 17) from wire module17.$ternary$rtl.v:319$265_Y.
Removed top 14 bits (of 17) from wire module17.$ternary$rtl.v:320$269_Y.
Removed top 14 bits (of 17) from wire module17.$ternary$rtl.v:321$272_Y.
Removed top 3 bits (of 10) from wire module17.$xor$rtl.v:274$208_Y.
Removed top 6 bits (of 15) from wire module17.$xor$rtl.v:313$251_Y.
Removed top 12 bits (of 31) from port B of cell module37.$and$rtl.v:149$52 ($and).
Removed top 22 bits (of 31) from port Y of cell module37.$and$rtl.v:149$52 ($and).
Removed top 9 bits (of 18) from port A of cell module37.$and$rtl.v:149$52 ($and).
Removed top 10 bits (of 19) from port B of cell module37.$and$rtl.v:149$52 ($and).
Removed top 7 bits (of 8) from port A of cell module37.$eq$rtl.v:151$56 ($eq).
Removed top 12 bits (of 18) from port A of cell module37.$shr$rtl.v:160$63 ($shr).
Removed top 12 bits (of 17) from port B of cell module37.$shr$rtl.v:160$63 ($shr).
Removed top 12 bits (of 18) from mux cell module37.$ternary$rtl.v:160$69 ($mux).
Removed top 9 bits (of 20) from mux cell module37.$ternary$rtl.v:177$85 ($mux).
Removed top 3 bits (of 4) from port A of cell module37.$not$rtl.v:184$88 ($not).
Removed top 12 bits (of 13) from port B of cell module37.$shr$rtl.v:185$89 ($shr).
Removed top 9 bits (of 17) from port A of cell module37.$xnor$rtl.v:185$90 ($xnor).
Removed top 9 bits (of 17) from port B of cell module37.$xnor$rtl.v:185$90 ($xnor).
Removed top 3 bits (of 11) from port A of cell module37.$xnor$rtl.v:190$101 ($xnor).
Removed top 3 bits (of 11) from port B of cell module37.$xnor$rtl.v:190$101 ($xnor).
Removed top 8 bits (of 11) from port Y of cell module37.$xnor$rtl.v:190$101 ($xnor).
Removed top 8 bits (of 19) from mux cell module37.$ternary$rtl.v:198$112 ($mux).
Removed top 5 bits (of 6) from port A of cell module37.$xnor$rtl.v:199$116 ($xnor).
Removed top 5 bits (of 6) from port B of cell module37.$xnor$rtl.v:199$116 ($xnor).
Removed top 3 bits (of 6) from port Y of cell module37.$xnor$rtl.v:199$116 ($xnor).
Removed top 17 bits (of 18) from port B of cell module37.$xnor$rtl.v:205$123 ($xnor).
Removed top 3 bits (of 4) from port A of cell module37.$sshr$rtl.v:205$124 ($sshr).
Removed top 17 bits (of 18) from port B of cell module37.$lt$rtl.v:207$137 ($lt).
Removed top 1 bits (of 12) from port A of cell module37.$ge$rtl.v:210$139 ($ge).
Removed top 9 bits (of 12) from port B of cell module37.$ge$rtl.v:210$139 ($ge).
Removed top 3 bits (of 11) from mux cell module37.$ternary$rtl.v:211$143 ($mux).
Removed top 6 bits (of 7) from port A of cell module37.$xor$rtl.v:215$153 ($xor).
Removed top 15 bits (of 18) from port B of cell module37.$xor$rtl.v:215$153 ($xor).
Removed top 15 bits (of 18) from port Y of cell module37.$xor$rtl.v:215$153 ($xor).
Removed top 6 bits (of 7) from port B of cell module37.$le$rtl.v:218$159 ($le).
Removed top 18 bits (of 19) from port A of cell module37.$add$rtl.v:216$155 ($add).
Removed top 12 bits (of 19) from port B of cell module37.$add$rtl.v:216$155 ($add).
Removed top 11 bits (of 19) from port Y of cell module37.$add$rtl.v:216$155 ($add).
Removed top 1 bits (of 12) from port A of cell module37.$add$rtl.v:220$163 ($add).
Removed top 4 bits (of 12) from port B of cell module37.$add$rtl.v:220$163 ($add).
Removed top 10 bits (of 18) from port A of cell module37.$sub$rtl.v:226$173 ($sub).
Removed top 10 bits (of 11) from FF cell module37.$procdff$356 ($dff).
Removed top 13 bits (of 14) from FF cell module37.$procdff$357 ($dff).
Removed top 17 bits (of 18) from FF cell module37.$procdff$358 ($dff).
Removed top 8 bits (of 9) from FF cell module37.$procdff$359 ($dff).
Removed top 12 bits (of 18) from mux cell module37.$ternary$rtl.v:160$67 ($mux).
Removed top 9 bits (of 20) from mux cell module37.$ternary$rtl.v:177$82 ($mux).
Removed top 11 bits (of 18) from mux cell module37.$ternary$rtl.v:226$171 ($mux).
Removed top 12 bits (of 18) from mux cell module37.$ternary$rtl.v:160$66 ($mux).
Removed top 12 bits (of 18) from port Y of cell module37.$shr$rtl.v:160$63 ($shr).
Removed top 8 bits (of 9) from wire module37.$0\reg57[8:0].
Removed top 13 bits (of 14) from wire module37.$0\reg66[13:0].
Removed top 10 bits (of 11) from wire module37.$0\reg67[10:0].
Removed top 11 bits (of 19) from wire module37.$add$rtl.v:216$155_Y.
Removed top 17 bits (of 18) from wire module37.$eq$rtl.v:207$136_Y.
Removed top 5 bits (of 6) from wire module37.$logic_not$rtl.v:199$115_Y.
Removed top 18 bits (of 19) from wire module37.$logic_not$rtl.v:215$154_Y.
Removed top 7 bits (of 8) from wire module37.$reduce_xnor$rtl.v:151$55_Y.
Removed top 17 bits (of 18) from wire module37.$reduce_xnor$rtl.v:205$122_Y.
Removed top 12 bits (of 18) from wire module37.$shr$rtl.v:160$63_Y.
Removed top 12 bits (of 18) from wire module37.$ternary$rtl.v:160$66_Y.
Removed top 12 bits (of 18) from wire module37.$ternary$rtl.v:160$67_Y.
Removed top 9 bits (of 20) from wire module37.$ternary$rtl.v:177$82_Y.
Removed top 9 bits (of 20) from wire module37.$ternary$rtl.v:177$85_Y.
Removed top 8 bits (of 19) from wire module37.$ternary$rtl.v:198$112_Y.
Removed top 3 bits (of 11) from wire module37.$ternary$rtl.v:211$143_Y.
Removed top 8 bits (of 11) from wire module37.$xnor$rtl.v:190$101_Y.
Removed top 3 bits (of 6) from wire module37.$xnor$rtl.v:199$116_Y.
Removed top 15 bits (of 18) from wire module37.$xor$rtl.v:215$153_Y.
Removed top 12 bits (of 13) from wire module37.wire43.
Removed top 3 bits (of 4) from wire module37.wire45.
Removed top 9 bits (of 12) from wire module37.wire46.
Removed top 5 bits (of 6) from wire module37.wire47.
Removed top 9 bits (of 10) from wire module37.wire58.
Removed top 6 bits (of 7) from wire module37.wire59.
Removed top 11 bits (of 12) from wire module37.wire61.
Removed top 10 bits (of 18) from wire module37.wire62.
Removed top 21 bits (of 22) from wire module37.wire63.
Removed top 9 bits (of 10) from port A of cell module6.$not$rtl.v:60$15 ($not).
Removed top 13 bits (of 15) from port B of cell module6.$add$rtl.v:61$17 ($add).
Removed top 7 bits (of 8) from port A of cell module6.$sshl$rtl.v:64$31 ($sshl).
Removed top 9 bits (of 10) from port A of cell module6.$ge$rtl.v:75$37 ($ge).
Removed top 14 bits (of 22) from mux cell module6.$ternary$rtl.v:75$39 ($mux).
Removed top 17 bits (of 18) from port A of cell module6.$lt$rtl.v:76$42 ($lt).
Removed top 13 bits (of 15) from port B of cell module6.$lt$rtl.v:76$42 ($lt).
Converting cell module6.$lt$rtl.v:76$42 ($lt) from signed to unsigned.
Removed top 1 bits (of 2) from port B of cell module6.$lt$rtl.v:76$42 ($lt).
Removed top 17 bits (of 18) from port A of cell module6.$ne$rtl.v:76$43 ($ne).
Removed top 21 bits (of 22) from wire module6.$ge$rtl.v:75$37_Y.
Removed top 7 bits (of 8) from wire module6.$le$rtl.v:62$22_Y.
Removed top 7 bits (of 8) from wire module6.$pos$rtl.v:63$29_Y.
Removed top 18 bits (of 19) from wire module6.$reduce_xnor$rtl.v:62$18_Y.
Removed top 14 bits (of 22) from wire module6.$ternary$rtl.v:75$39_Y.
Removed top 14 bits (of 15) from wire module6.wire11.
Removed top 17 bits (of 18) from wire module6.wire13.
Removed top 14 bits (of 17) from wire module6.wire16.
Removed top 10 bits (of 11) from wire module6.wire74.
Removed top 21 bits (of 22) from port A of cell top.$xnor$rtl.v:21$13 ($xnor).
Removed top 21 bits (of 22) from port B of cell top.$xnor$rtl.v:21$13 ($xnor).
Removed top 21 bits (of 22) from wire top.$logic_not$rtl.v:21$12_Y.
Removed top 21 bits (of 22) from wire top.$reduce_xnor$rtl.v:21$8_Y.
Removed top 21 bits (of 22) from wire top.wire5.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 60 unused wires.
<suppressed ~4 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~284 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module17:
  creating $macc model for $add$rtl.v:305$239 ($add).
  creating $macc model for $sub$rtl.v:293$225 ($sub).
  creating $alu model for $macc $sub$rtl.v:293$225.
  creating $alu model for $macc $add$rtl.v:305$239.
  creating $alu model for $ge$rtl.v:291$222 ($ge): new $alu
  creating $alu model for $ge$rtl.v:309$244 ($ge): new $alu
  creating $alu model for $le$rtl.v:271$198 ($le): new $alu
  creating $alu model for $le$rtl.v:305$240 ($le): new $alu
  creating $alu cell for $le$rtl.v:305$240: $auto$alumacc.cc:474:replace_alu$427
  creating $alu cell for $le$rtl.v:271$198: $auto$alumacc.cc:474:replace_alu$436
  creating $alu cell for $ge$rtl.v:309$244: $auto$alumacc.cc:474:replace_alu$449
  creating $alu cell for $ge$rtl.v:291$222: $auto$alumacc.cc:474:replace_alu$458
  creating $alu cell for $add$rtl.v:305$239: $auto$alumacc.cc:474:replace_alu$467
  creating $alu cell for $sub$rtl.v:293$225: $auto$alumacc.cc:474:replace_alu$470
  created 6 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module module37:
  creating $macc model for $add$rtl.v:203$117 ($add).
  creating $macc model for $add$rtl.v:216$155 ($add).
  creating $macc model for $add$rtl.v:220$163 ($add).
  creating $macc model for $mul$rtl.v:151$54 ($mul).
  creating $macc model for $neg$rtl.v:214$149 ($neg).
  creating $macc model for $sub$rtl.v:186$91 ($sub).
  creating $macc model for $sub$rtl.v:226$173 ($sub).
  creating $macc model for $sub$rtl.v:229$183 ($sub).
  creating $alu model for $macc $sub$rtl.v:229$183.
  creating $alu model for $macc $sub$rtl.v:226$173.
  creating $alu model for $macc $sub$rtl.v:186$91.
  creating $alu model for $macc $neg$rtl.v:214$149.
  creating $alu model for $macc $add$rtl.v:220$163.
  creating $alu model for $macc $add$rtl.v:216$155.
  creating $alu model for $macc $add$rtl.v:203$117.
  creating $macc cell for $mul$rtl.v:151$54: $auto$alumacc.cc:354:replace_macc$473
  creating $alu model for $ge$rtl.v:210$139 ($ge): new $alu
  creating $alu model for $gt$rtl.v:196$102 ($gt): new $alu
  creating $alu model for $le$rtl.v:218$159 ($le): new $alu
  creating $alu model for $lt$rtl.v:207$137 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:207$137: $auto$alumacc.cc:474:replace_alu$478
  creating $alu cell for $le$rtl.v:218$159: $auto$alumacc.cc:474:replace_alu$489
  creating $alu cell for $gt$rtl.v:196$102: $auto$alumacc.cc:474:replace_alu$498
  creating $alu cell for $ge$rtl.v:210$139: $auto$alumacc.cc:474:replace_alu$503
  creating $alu cell for $add$rtl.v:203$117: $auto$alumacc.cc:474:replace_alu$512
  creating $alu cell for $add$rtl.v:216$155: $auto$alumacc.cc:474:replace_alu$515
  creating $alu cell for $add$rtl.v:220$163: $auto$alumacc.cc:474:replace_alu$518
  creating $alu cell for $neg$rtl.v:214$149: $auto$alumacc.cc:474:replace_alu$521
  creating $alu cell for $sub$rtl.v:186$91: $auto$alumacc.cc:474:replace_alu$524
  creating $alu cell for $sub$rtl.v:226$173: $auto$alumacc.cc:474:replace_alu$527
  creating $alu cell for $sub$rtl.v:229$183: $auto$alumacc.cc:474:replace_alu$530
  created 11 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module6:
  creating $macc model for $add$rtl.v:61$17 ($add).
  creating $macc model for $neg$rtl.v:63$30 ($neg).
  creating $alu model for $macc $neg$rtl.v:63$30.
  creating $alu model for $macc $add$rtl.v:61$17.
  creating $alu model for $ge$rtl.v:75$37 ($ge): new $alu
  creating $alu model for $le$rtl.v:62$22 ($le): new $alu
  creating $alu model for $le$rtl.v:77$50 ($le): new $alu
  creating $alu model for $lt$rtl.v:76$42 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:76$42: $auto$alumacc.cc:474:replace_alu$537
  creating $alu cell for $le$rtl.v:77$50: $auto$alumacc.cc:474:replace_alu$542
  creating $alu cell for $le$rtl.v:62$22: $auto$alumacc.cc:474:replace_alu$551
  creating $alu cell for $ge$rtl.v:75$37: $auto$alumacc.cc:474:replace_alu$564
  creating $alu cell for $add$rtl.v:61$17: $auto$alumacc.cc:474:replace_alu$577
  creating $alu cell for $neg$rtl.v:63$30: $auto$alumacc.cc:474:replace_alu$580
  created 6 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module module37 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshl$rtl.v:207$132 ($sshl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:207$133_Y.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:185$89 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$320_CMP $procmux$318_CMP }.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
<suppressed ~5 debug messages>
Optimizing module module6.
<suppressed ~3 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module17..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module37..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module17.
    New input vector for $reduce_or cell $reduce_or$rtl.v:289$218: { \reg27 [0] \reg27 [1] \reg27 [2] \reg27 [3] \reg27 [4] \reg27 [5] \reg27 [6] \reg27 [7] \reg27 [8] \reg27 [9] \reg27 [10] \reg27 [11] \reg27 [12] \reg27 [13] \reg27 [14] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$447: { $auto$rtlil.cc:1832:Not$446 $auto$rtlil.cc:1835:ReduceAnd$440 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$432: { $auto$alumacc.cc:490:replace_alu$428 [0] $auto$alumacc.cc:490:replace_alu$428 [1] $auto$alumacc.cc:490:replace_alu$428 [2] $auto$alumacc.cc:490:replace_alu$428 [3] $auto$alumacc.cc:490:replace_alu$428 [4] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$439: { $auto$alumacc.cc:490:replace_alu$437 [0] $auto$alumacc.cc:490:replace_alu$437 [1] $auto$alumacc.cc:490:replace_alu$437 [2] $auto$alumacc.cc:490:replace_alu$437 [3] $auto$alumacc.cc:490:replace_alu$437 [4] $auto$alumacc.cc:490:replace_alu$437 [5] $auto$alumacc.cc:490:replace_alu$437 [6] $auto$alumacc.cc:490:replace_alu$437 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$454: { $auto$alumacc.cc:490:replace_alu$450 [0] $auto$alumacc.cc:490:replace_alu$450 [1] $auto$alumacc.cc:490:replace_alu$450 [2] $auto$alumacc.cc:490:replace_alu$450 [3] $auto$alumacc.cc:490:replace_alu$450 [4] $auto$alumacc.cc:490:replace_alu$450 [5] $auto$alumacc.cc:490:replace_alu$450 [6] $auto$alumacc.cc:490:replace_alu$450 [7] $auto$alumacc.cc:490:replace_alu$450 [8] $auto$alumacc.cc:490:replace_alu$450 [9] $auto$alumacc.cc:490:replace_alu$450 [10] $auto$alumacc.cc:490:replace_alu$450 [11] $auto$alumacc.cc:490:replace_alu$450 [12] $auto$alumacc.cc:490:replace_alu$450 [13] $auto$alumacc.cc:490:replace_alu$450 [14] $auto$alumacc.cc:490:replace_alu$450 [15] $auto$alumacc.cc:490:replace_alu$450 [16] $auto$alumacc.cc:490:replace_alu$450 [17] $auto$alumacc.cc:490:replace_alu$450 [18] $auto$alumacc.cc:490:replace_alu$450 [19] $auto$alumacc.cc:490:replace_alu$450 [20] $auto$alumacc.cc:490:replace_alu$450 [21] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$463: { $auto$alumacc.cc:490:replace_alu$459 [0] $auto$alumacc.cc:490:replace_alu$459 [1] $auto$alumacc.cc:490:replace_alu$459 [2] $auto$alumacc.cc:490:replace_alu$459 [3] $auto$alumacc.cc:490:replace_alu$459 [4] $auto$alumacc.cc:490:replace_alu$459 [5] $auto$alumacc.cc:490:replace_alu$459 [6] $auto$alumacc.cc:490:replace_alu$459 [7] $auto$alumacc.cc:490:replace_alu$459 [8] $auto$alumacc.cc:490:replace_alu$459 [9] $auto$alumacc.cc:490:replace_alu$459 [10] $auto$alumacc.cc:490:replace_alu$459 [11] $auto$alumacc.cc:490:replace_alu$459 [12] $auto$alumacc.cc:490:replace_alu$459 [13] $auto$alumacc.cc:490:replace_alu$459 [14] $auto$alumacc.cc:490:replace_alu$459 [15] $auto$alumacc.cc:490:replace_alu$459 [16] $auto$alumacc.cc:490:replace_alu$459 [17] $auto$alumacc.cc:490:replace_alu$459 [18] $auto$alumacc.cc:490:replace_alu$459 [19] $auto$alumacc.cc:490:replace_alu$459 [20] $auto$alumacc.cc:490:replace_alu$459 [21] }
  Optimizing cells in module \module17.
  Optimizing cells in module \module37.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$496: { $auto$rtlil.cc:1832:Not$493 $auto$alumacc.cc:490:replace_alu$490 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$508: { $auto$alumacc.cc:490:replace_alu$504 [0] $auto$alumacc.cc:490:replace_alu$504 [1] $auto$alumacc.cc:490:replace_alu$504 [2] $auto$alumacc.cc:490:replace_alu$504 [3] $auto$alumacc.cc:490:replace_alu$504 [4] $auto$alumacc.cc:490:replace_alu$504 [5] $auto$alumacc.cc:490:replace_alu$504 [6] $auto$alumacc.cc:490:replace_alu$504 [7] $auto$alumacc.cc:490:replace_alu$504 [8] $auto$alumacc.cc:490:replace_alu$504 [9] $auto$alumacc.cc:490:replace_alu$504 [10] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$481: { $auto$alumacc.cc:490:replace_alu$479 [0] $auto$alumacc.cc:490:replace_alu$479 [1] $auto$alumacc.cc:490:replace_alu$479 [2] $auto$alumacc.cc:490:replace_alu$479 [3] $auto$alumacc.cc:490:replace_alu$479 [4] $auto$alumacc.cc:490:replace_alu$479 [5] $auto$alumacc.cc:490:replace_alu$479 [6] $auto$alumacc.cc:490:replace_alu$479 [7] $auto$alumacc.cc:490:replace_alu$479 [8] $auto$alumacc.cc:490:replace_alu$479 [9] $auto$alumacc.cc:490:replace_alu$479 [10] $auto$alumacc.cc:490:replace_alu$479 [11] $auto$alumacc.cc:490:replace_alu$479 [12] $auto$alumacc.cc:490:replace_alu$479 [13] $auto$alumacc.cc:490:replace_alu$479 [14] $auto$alumacc.cc:490:replace_alu$479 [15] $auto$alumacc.cc:490:replace_alu$479 [16] $auto$alumacc.cc:490:replace_alu$479 [17] }
  Optimizing cells in module \module37.
  Optimizing cells in module \module6.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$549: { $auto$rtlil.cc:1832:Not$546 $auto$alumacc.cc:490:replace_alu$543 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$562: { $auto$rtlil.cc:1832:Not$561 $auto$rtlil.cc:1835:ReduceAnd$555 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$554: { $auto$alumacc.cc:490:replace_alu$552 [0] $auto$alumacc.cc:490:replace_alu$552 [1] $auto$alumacc.cc:490:replace_alu$552 [2] $auto$alumacc.cc:490:replace_alu$552 [3] $auto$alumacc.cc:490:replace_alu$552 [4] $auto$alumacc.cc:490:replace_alu$552 [5] $auto$alumacc.cc:490:replace_alu$552 [6] $auto$alumacc.cc:490:replace_alu$552 [7] $auto$alumacc.cc:490:replace_alu$552 [8] $auto$alumacc.cc:490:replace_alu$552 [9] $auto$alumacc.cc:490:replace_alu$552 [10] $auto$alumacc.cc:490:replace_alu$552 [11] $auto$alumacc.cc:490:replace_alu$552 [12] $auto$alumacc.cc:490:replace_alu$552 [13] $auto$alumacc.cc:490:replace_alu$552 [14] $auto$alumacc.cc:490:replace_alu$552 [15] $auto$alumacc.cc:490:replace_alu$552 [16] $auto$alumacc.cc:490:replace_alu$552 [17] $auto$alumacc.cc:490:replace_alu$552 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$567: { $auto$alumacc.cc:490:replace_alu$565 [0] $auto$alumacc.cc:490:replace_alu$565 [1] $auto$alumacc.cc:490:replace_alu$565 [2] $auto$alumacc.cc:490:replace_alu$565 [3] $auto$alumacc.cc:490:replace_alu$565 [4] $auto$alumacc.cc:490:replace_alu$565 [5] $auto$alumacc.cc:490:replace_alu$565 [6] $auto$alumacc.cc:490:replace_alu$565 [7] $auto$alumacc.cc:490:replace_alu$565 [8] $auto$alumacc.cc:490:replace_alu$565 [9] $auto$alumacc.cc:490:replace_alu$565 [10] $auto$alumacc.cc:490:replace_alu$565 [11] $auto$alumacc.cc:490:replace_alu$565 [12] $auto$alumacc.cc:490:replace_alu$565 [13] $auto$alumacc.cc:490:replace_alu$565 [14] $auto$alumacc.cc:490:replace_alu$565 [15] $auto$alumacc.cc:490:replace_alu$565 [16] $auto$alumacc.cc:490:replace_alu$565 [17] $auto$alumacc.cc:490:replace_alu$565 [18] $auto$alumacc.cc:490:replace_alu$565 [19] }
  Optimizing cells in module \module6.
  Optimizing cells in module \top.
Performed a total of 13 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \reg33 [6:2] = 5'xxxxx to constant driver in module module17.
Promoted 1 init specs to constant drivers.

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 3 unused cells and 24 unused wires.
<suppressed ~7 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module17..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module37..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module17.
  Optimizing cells in module \module37.
  Optimizing cells in module \module6.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
<suppressed ~22 debug messages>
Optimizing module module37.
<suppressed ~42 debug messages>
Optimizing module module6.
<suppressed ~12 debug messages>
Optimizing module top.
<suppressed ~14 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 31 unused wires.
<suppressed ~9 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module17..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module37..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module17.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:281$211:
      Old ports: A={ 5'00000 \wire20 }, B=8'10011111, Y=$auto$wreduce.cc:455:run$373
      New ports: A={ 1'0 \wire20 }, B=4'1111, Y=$auto$wreduce.cc:455:run$373 [3:0]
      New connections: $auto$wreduce.cc:455:run$373 [7:4] = { $auto$wreduce.cc:455:run$373 [3] 2'00 $auto$wreduce.cc:455:run$373 [3] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:319$265:
      Old ports: A=3'000, B={ 2'00 \wire19 [0] }, Y=$auto$wreduce.cc:455:run$378 [2:0]
      New ports: A=1'0, B=\wire19 [0], Y=$auto$wreduce.cc:455:run$378 [0]
      New connections: $auto$wreduce.cc:455:run$378 [2:1] = 2'00
  Optimizing cells in module \module17.
  Optimizing cells in module \module37.
    Consolidated identical input bits for $mux cell $procmux$317:
      Old ports: A={ $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y }, B={ \wire40 [11] \wire40 [11] \wire40 [11] \wire40 [11] \wire40 [11] \wire40 [11] \wire40 [11] \wire40 }, Y=$procmux$317_Y
      New ports: A={ $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y [7] $xnor$rtl.v:182$86_Y }, B=\wire40, Y=$procmux$317_Y [11:0]
      New connections: $procmux$317_Y [18:12] = { $procmux$317_Y [11] $procmux$317_Y [11] $procmux$317_Y [11] $procmux$317_Y [11] $procmux$317_Y [11] $procmux$317_Y [11] $procmux$317_Y [11] }
    Consolidated identical input bits for $mux cell $procmux$329:
      Old ports: A={ 3'111 $auto$opt_expr.cc:189:group_cell_inputs$596 }, B=4'0110, Y=$procmux$329_Y
      New ports: A={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$596 }, B=2'00, Y={ $procmux$329_Y [3] $procmux$329_Y [0] }
      New connections: $procmux$329_Y [2:1] = 2'11
    Consolidated identical input bits for $mux cell $ternary$rtl.v:188$96:
      Old ports: A={ 4'0000 \reg53 }, B=8'10101110, Y=$ternary$rtl.v:188$96_Y
      New ports: A={ 1'0 \reg53 }, B=5'11110, Y={ $ternary$rtl.v:188$96_Y [5] $ternary$rtl.v:188$96_Y [3:0] }
      New connections: { $ternary$rtl.v:188$96_Y [7:6] $ternary$rtl.v:188$96_Y [4] } = { $ternary$rtl.v:188$96_Y [5] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:211$143:
      Old ports: A=8'10110101, B=8'00000000, Y=$auto$wreduce.cc:455:run$398 [7:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:455:run$398 [0]
      New connections: $auto$wreduce.cc:455:run$398 [7:1] = { $auto$wreduce.cc:455:run$398 [0] 1'0 $auto$wreduce.cc:455:run$398 [0] $auto$wreduce.cc:455:run$398 [0] 1'0 $auto$wreduce.cc:455:run$398 [0] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:226$171:
      Old ports: A=7'1000001, B={ 6'000000 \reg65 [0] }, Y=$ternary$rtl.v:226$171_Y [6:0]
      New ports: A=2'11, B={ 1'0 \reg65 [0] }, Y={ $ternary$rtl.v:226$171_Y [6] $ternary$rtl.v:226$171_Y [0] }
      New connections: $ternary$rtl.v:226$171_Y [5:1] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:228$177:
      Old ports: A=26'00000000000000000000000001, B=26'10100010000000000000000000, Y=$ternary$rtl.v:228$177_Y
      New ports: A=2'01, B=2'10, Y={ $ternary$rtl.v:228$177_Y [19] $ternary$rtl.v:228$177_Y [0] }
      New connections: { $ternary$rtl.v:228$177_Y [25:20] $ternary$rtl.v:228$177_Y [18:1] } = { $ternary$rtl.v:228$177_Y [19] 1'0 $ternary$rtl.v:228$177_Y [19] 21'000000000000000000000 }
  Optimizing cells in module \module37.
    Consolidated identical input bits for $mux cell $procmux$319:
      Old ports: A={ 17'00000000000000000 \wire48 [0] $auto$rtlil.cc:1832:Not$502 }, B=$procmux$317_Y, Y=$0\reg51[18:0]
      New ports: A={ 10'0000000000 \wire48 [0] $auto$rtlil.cc:1832:Not$502 }, B=$procmux$317_Y [11:0], Y=$0\reg51[18:0] [11:0]
      New connections: $0\reg51[18:0] [18:12] = { $0\reg51[18:0] [11] $0\reg51[18:0] [11] $0\reg51[18:0] [11] $0\reg51[18:0] [11] $0\reg51[18:0] [11] $0\reg51[18:0] [11] $0\reg51[18:0] [11] }
    Consolidated identical input bits for $mux cell $procmux$331:
      Old ports: A={ 2'11 $auto$opt_expr.cc:189:group_cell_inputs$604 1'0 }, B=$procmux$329_Y, Y=$0\reg53[3:0]
      New ports: A={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$604 1'0 }, B={ $procmux$329_Y [3] 1'1 $procmux$329_Y [0] }, Y={ $0\reg53[3:0] [3] $0\reg53[3:0] [1:0] }
      New connections: $0\reg53[3:0] [2] = 1'1
    Consolidated identical input bits for $mux cell $ternary$rtl.v:228$180:
      Old ports: A=$ternary$rtl.v:228$177_Y, B=26'00000000000000000000000000, Y=$ternary$rtl.v:228$180_Y
      New ports: A={ $ternary$rtl.v:228$177_Y [19] $ternary$rtl.v:228$177_Y [0] }, B=2'00, Y={ $ternary$rtl.v:228$180_Y [19] $ternary$rtl.v:228$180_Y [0] }
      New connections: { $ternary$rtl.v:228$180_Y [25:20] $ternary$rtl.v:228$180_Y [18:1] } = { $ternary$rtl.v:228$180_Y [19] 1'0 $ternary$rtl.v:228$180_Y [19] 21'000000000000000000000 }
  Optimizing cells in module \module37.
  Optimizing cells in module \module6.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:75$39:
      Old ports: A={ 7'0000000 $auto$rtlil.cc:1836:ReduceOr$576 }, B=8'10101001, Y=$auto$wreduce.cc:455:run$415 [7:0]
      New ports: A={ 1'0 $auto$rtlil.cc:1836:ReduceOr$576 }, B=2'11, Y={ $auto$wreduce.cc:455:run$415 [3] $auto$wreduce.cc:455:run$415 [0] }
      New connections: { $auto$wreduce.cc:455:run$415 [7:4] $auto$wreduce.cc:455:run$415 [2:1] } = { $auto$wreduce.cc:455:run$415 [3] 1'0 $auto$wreduce.cc:455:run$415 [3] 3'000 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:75$41:
      Old ports: A={ 14'00000000000000 $auto$wreduce.cc:455:run$415 [7:0] }, B=22'0000000000000000000000, Y=$ternary$rtl.v:75$41_Y
      New ports: A=$auto$wreduce.cc:455:run$415 [7:0], B=8'00000000, Y=$ternary$rtl.v:75$41_Y [7:0]
      New connections: $ternary$rtl.v:75$41_Y [21:8] = 14'00000000000000
  Optimizing cells in module \module6.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:75$41:
      Old ports: A=$auto$wreduce.cc:455:run$415 [7:0], B=8'00000000, Y=$ternary$rtl.v:75$41_Y [7:0]
      New ports: A={ $auto$wreduce.cc:455:run$415 [3] $auto$wreduce.cc:455:run$415 [0] }, B=2'00, Y={ $ternary$rtl.v:75$41_Y [3] $ternary$rtl.v:75$41_Y [0] }
      New connections: { $ternary$rtl.v:75$41_Y [7:4] $ternary$rtl.v:75$41_Y [2:1] } = { $ternary$rtl.v:75$41_Y [3] 1'0 $ternary$rtl.v:75$41_Y [3] 3'000 }
  Optimizing cells in module \module6.
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:20$6:
      Old ports: A={ 13'0000000000000 \wire4 [7] 1'0 \wire4 [5] 1'0 \wire4 [3:1] 1'0 }, B={ 1'0 \wire3 }, Y=$ternary$rtl.v:20$6_Y
      New ports: A={ 12'000000000000 \wire4 [7] 1'0 \wire4 [5] 1'0 \wire4 [3:1] 1'0 }, B=\wire3, Y=$ternary$rtl.v:20$6_Y [19:0]
      New connections: $ternary$rtl.v:20$6_Y [20] = 1'0
  Optimizing cells in module \top.
    New input vector for $reduce_and cell $reduce_and$rtl.v:20$7: 1'0
  Optimizing cells in module \top.
Performed a total of 16 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
<suppressed ~2 debug messages>
Optimizing module module37.
<suppressed ~2 debug messages>
Optimizing module module6.
<suppressed ~1 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module17..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module37..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module17.
  Optimizing cells in module \module37.
  Optimizing cells in module \module6.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
Optimizing module module37.
Optimizing module module6.
Optimizing module top.

2.20.16. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $xnor.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:0cf02e41fbae427bfbd357bc133006a340bb6fa2$paramod$41742478d2ab1fd3630b50d54366aca63599474a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$e0e3cdc6ae9cc8675a1dc418b62b1dfc8b99f93b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=19\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=19 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$39fa5ace3493c4564183a2149470cf6528acc8fc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:d52c3b772808ceda443eb8b6f6bcef79a22445fd$paramod$8d4a09edf43378efed07dc283444d63d04a8b130\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:d80e9298a71ca92bea9409fd5da8306f677a8137$paramod$3568d4deaa26baa8d38d0583ff8f9959b6f1911c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:162278be25e0acdc8a7b3864413512ff5c826273$paramod$7995a5a09fbc8c395037689b50f28d3306faf72f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=5\Y_WIDTH=5 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_lcu\WIDTH=5 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
Using template $paramod$constmap:50b04ee1997f66c44602eec27619e76dd92431f2$paramod$f32e9fd72c7c7bc614dbfcc1911103446cdc4e48\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:bc75302fa10038fef0feed7ebda2a739c9bad8ff$paramod$997bf48f5c6edfd3e34ac20a0181082b2e65219f\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $reduce_xor.
Using template $paramod$constmap:66b0c7e46a0e6faa02b74b372af55227f69af8e5$paramod$d43fe37d4a892bd5a8680249679c16d2efd465ec\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=6\Y_WIDTH=15 for cells of type $alu.
Using template $paramod$constmap:a8775524fb442b98883f8b5d9f5fbb756e6db2b8$paramod$0be63166b6beed76d76b089f835d89e2901acfed\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:9487a2158c6cf80b81931eef65e8c250da6632ab$paramod$a06425318541d801f081d31bedd8a3b8b4be584c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=11\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:702f6331f783bf7265b6bf8e154542fe5a686854$paramod$d918b5777f440a0e7b3f4845be7cc463c6a7cad8\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:fedb30810dfde228f1e2ed8afc08f04d19fc476b$paramod$4fe8c41c92de264026421898d6dc634764eb5260\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=18\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=18 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
No more expansions possible.
<suppressed ~5144 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
<suppressed ~308 debug messages>
Optimizing module module37.
<suppressed ~712 debug messages>
Optimizing module module6.
<suppressed ~315 debug messages>
Optimizing module top.
<suppressed ~14 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
<suppressed ~345 debug messages>
Finding identical cells in module `\module37'.
<suppressed ~288 debug messages>
Finding identical cells in module `\module6'.
<suppressed ~120 debug messages>
Finding identical cells in module `\top'.
Removed a total of 251 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$3055 ($_DFF_P_) from module module17.
Replaced 1 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 335 unused cells and 1209 unused wires.
<suppressed ~339 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
<suppressed ~26 debug messages>
Optimizing module module37.
<suppressed ~7 debug messages>
Optimizing module module6.
Optimizing module top.

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

2.22.10. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module17' to `<abc-temp-dir>/input.blif'..
Extracted 580 gates and 712 wires to a netlist network with 130 inputs and 75 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       87
ABC RESULTS:              AOI3 cells:       36
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       78
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOR cells:       19
ABC RESULTS:               NOT cells:       64
ABC RESULTS:              OAI3 cells:       14
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      125
ABC RESULTS:             ORNOT cells:       21
ABC RESULTS:               XOR cells:       19
ABC RESULTS:        internal signals:      507
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:       75
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module37' to `<abc-temp-dir>/input.blif'..
Extracted 1146 gates and 1275 wires to a netlist network with 127 inputs and 80 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       18
ABC RESULTS:            ANDNOT cells:      131
ABC RESULTS:              AOI3 cells:       25
ABC RESULTS:              AOI4 cells:        3
ABC RESULTS:               MUX cells:      188
ABC RESULTS:              NAND cells:       34
ABC RESULTS:               NOR cells:       36
ABC RESULTS:               NOT cells:       52
ABC RESULTS:              OAI3 cells:       41
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      262
ABC RESULTS:             ORNOT cells:       34
ABC RESULTS:              XNOR cells:       42
ABC RESULTS:               XOR cells:      103
ABC RESULTS:              ZERO cells:        2
ABC RESULTS:        internal signals:     1068
ABC RESULTS:           input signals:      127
ABC RESULTS:          output signals:       80
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module6' to `<abc-temp-dir>/input.blif'..
Extracted 391 gates and 433 wires to a netlist network with 40 inputs and 2 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       28
ABC RESULTS:              AOI3 cells:       19
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:        2
ABC RESULTS:              NAND cells:       23
ABC RESULTS:               NOR cells:        4
ABC RESULTS:               NOT cells:       15
ABC RESULTS:              OAI3 cells:       17
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       90
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:               XOR cells:       52
ABC RESULTS:        internal signals:      391
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:        2
Removing temp directory.

2.23.4. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 88 wires to a netlist network with 40 inputs and 2 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:       17
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:       46
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:        2
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module17.
<suppressed ~1 debug messages>
Optimizing module module37.
<suppressed ~4 debug messages>
Optimizing module module6.
Optimizing module top.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module17'.
Finding identical cells in module `\module37'.
<suppressed ~18 debug messages>
Finding identical cells in module `\module6'.
Finding identical cells in module `\top'.
Removed a total of 6 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module17..
Finding unused cells or wires in module \module37..
Finding unused cells or wires in module \module6..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1134 unused wires.
<suppressed ~4 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module17 ===

   Number of wires:                432
   Number of wire bits:            829
   Number of public wires:          19
   Number of public wire bits:     317
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                566
     $_ANDNOT_                      87
     $_AND_                          5
     $_AOI3_                        36
     $_AOI4_                         1
     $_DFF_P_                       87
     $_MUX_                         78
     $_NAND_                         9
     $_NOR_                         19
     $_NOT_                         64
     $_OAI3_                        14
     $_OAI4_                         1
     $_ORNOT_                       21
     $_OR_                         125
     $_XOR_                         19

=== module37 ===

   Number of wires:                929
   Number of wire bits:           1512
   Number of public wires:          34
   Number of public wire bits:     568
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1034
     $_ANDNOT_                     130
     $_AND_                         18
     $_AOI3_                        25
     $_AOI4_                         3
     $_DFF_P_                       70
     $_MUX_                        187
     $_NAND_                        34
     $_NOR_                         34
     $_NOT_                         52
     $_OAI3_                        41
     $_OAI4_                         1
     $_ORNOT_                       34
     $_OR_                         260
     $_XNOR_                        42
     $_XOR_                        103

=== module6 ===

   Number of wires:                288
   Number of wire bits:            997
   Number of public wires:          17
   Number of public wire bits:     339
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                273
     $_ANDNOT_                      28
     $_AND_                          2
     $_AOI3_                        19
     $_AOI4_                         1
     $_MUX_                          2
     $_NAND_                        23
     $_NOR_                          4
     $_NOT_                         15
     $_OAI3_                        17
     $_OAI4_                         2
     $_ORNOT_                        2
     $_OR_                          90
     $_XNOR_                        14
     $_XOR_                         52
     module17                        1
     module37                        1

=== top ===

   Number of wires:                 49
   Number of wire bits:            402
   Number of public wires:          12
   Number of public wire bits:     231
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 39
     $_ANDNOT_                       5
     $_NAND_                        10
     $_NOR_                          1
     $_ORNOT_                        2
     $_OR_                          17
     $_XOR_                          3
     module6                         1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module17..
checking module module37..
checking module module6..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module17'.
Dumping module `\module37'.
Dumping module `\module6'.
Dumping module `\top'.

Warnings: 11 unique messages, 11 total
End of script. Logfile hash: 960250de6b
CPU: user 1.76s system 0.01s, MEM: 39.00 MB total, 32.46 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 17% 26x proc (0 sec), 16% 29x opt_clean (0 sec), ...
