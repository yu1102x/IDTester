
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Running command `read_verilog rtl.v; synth; write_verilog -noattr syn_yosys.v' --

1. Executing Verilog-2005 frontend: rtl.v
Parsing Verilog input from `rtl.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\module74'.
Generating RTLIL representation for module `\module21'.
Generating RTLIL representation for module `\module46'.
Generating RTLIL representation for module `\module198'.
Generating RTLIL representation for module `\module161'.
Generating RTLIL representation for module `\module125'.
Generating RTLIL representation for module `\module86'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Mapping positional arguments of cell module74.modinst226 (module198).
Mapping positional arguments of cell module74.modinst194 (module161).
Mapping positional arguments of cell module74.modinst157 (module125).
Mapping positional arguments of cell module74.modinst114 (module86).
Warning: Resizing cell port module21.modinst67.wire49 from 14 bits to 3 bits.
Warning: Resizing cell port module21.modinst67.wire48 from 15 bits to 4 bits.
Warning: Resizing cell port module21.modinst67.y from 15 bits to 178 bits.
Warning: Resizing cell port module74.modinst226.y from 12 bits to 210 bits.
Warning: Resizing cell port module74.modinst226.wire201 from 10 bits to 9 bits.
Warning: Resizing cell port module74.modinst194.y from 11 bits to 274 bits.
Warning: Resizing cell port module74.modinst194.wire165 from 20 bits to 3 bits.
Warning: Resizing cell port module74.modinst194.wire164 from 17 bits to 6 bits.
Warning: Resizing cell port module74.modinst157.y from 10 bits to 284 bits.
Warning: Resizing cell port module74.modinst157.wire128 from 22 bits to 16 bits.
Warning: Resizing cell port module74.modinst114.y from 22 bits to 264 bits.
Warning: Resizing cell port module74.modinst114.wire90 from 9 bits to 4 bits.
Warning: Resizing cell port module74.modinst114.wire87 from 10 bits to 3 bits.
Warning: Resizing cell port top.modinst256.wire162 from 22 bits to 20 bits.
Warning: Resizing cell port top.modinst256.wire164 from 14 bits to 6 bits.
Warning: Resizing cell port top.modinst256.wire165 from 12 bits to 3 bits.
Warning: Resizing cell port top.modinst256.y from 6 bits to 274 bits.
Warning: Resizing cell port top.modinst246.y from 4 bits to 557 bits.
Warning: Resizing cell port top.modinst246.wire78 from 21 bits to 14 bits.
Warning: Resizing cell port top.modinst73.y from 21 bits to 226 bits.
Warning: Resizing cell port top.modinst73.wire25 from 12 bits to 4 bits.
Warning: Resizing cell port top.modinst73.wire26 from 10 bits to 4 bits.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\module74.$proc$rtl.v:241$164'.
Cleaned up 1 empty switch.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$rtl.v:806$715 in module module161.
Marked 3 switch rules as full_case in process $proc$rtl.v:567$484 in module module46.
Marked 1 switch rules as full_case in process $proc$rtl.v:468$381 in module module21.
Marked 5 switch rules as full_case in process $proc$rtl.v:321$267 in module module74.
Marked 2 switch rules as full_case in process $proc$rtl.v:241$164 in module module74.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\module86.$proc$rtl.v:1005$966'.
  Set init value: \reg100 = 12'000000000000
Found init rule in `\module86.$proc$rtl.v:1004$965'.
  Set init value: \reg101 = 18'000000000000000000
Found init rule in `\module86.$proc$rtl.v:1003$964'.
  Set init value: \reg102 = 22'0000000000000000000000
Found init rule in `\module125.$proc$rtl.v:906$895'.
  Set init value: \reg133 = 8'00000000
Found init rule in `\module125.$proc$rtl.v:905$894'.
  Set init value: \reg134 = 17'00000000000000000
Found init rule in `\module125.$proc$rtl.v:900$893'.
  Set init value: \reg139 = 19'0000000000000000000
Found init rule in `\module125.$proc$rtl.v:899$892'.
  Set init value: \reg140 = 12'000000000000
Found init rule in `\module125.$proc$rtl.v:898$891'.
  Set init value: \reg141 = 8'00000000
Found init rule in `\module125.$proc$rtl.v:897$890'.
  Set init value: \reg142 = 14'00000000000000
Found init rule in `\module125.$proc$rtl.v:896$889'.
  Set init value: \reg143 = 6'000000
Found init rule in `\module125.$proc$rtl.v:890$888'.
  Set init value: \reg149 = 8'00000000
Found init rule in `\module125.$proc$rtl.v:889$887'.
  Set init value: \reg150 = 20'00000000000000000000
Found init rule in `\module161.$proc$rtl.v:773$814'.
  Set init value: \reg170 = 16'0000000000000000
Found init rule in `\module161.$proc$rtl.v:772$813'.
  Set init value: \reg171 = 10'0000000000
Found init rule in `\module161.$proc$rtl.v:771$812'.
  Set init value: \reg172 = 21'000000000000000000000
Found init rule in `\module161.$proc$rtl.v:770$811'.
  Set init value: \reg173 = 10'0000000000
Found init rule in `\module161.$proc$rtl.v:769$810'.
  Set init value: \reg174 = 12'000000000000
Found init rule in `\module161.$proc$rtl.v:768$809'.
  Set init value: \reg175 = 6'000000
Found init rule in `\module161.$proc$rtl.v:767$808'.
  Set init value: \reg176 = 5'00000
Found init rule in `\module161.$proc$rtl.v:766$807'.
  Set init value: \reg177 = 4'0000
Found init rule in `\module161.$proc$rtl.v:765$806'.
  Set init value: \reg178 = 15'000000000000000
Found init rule in `\module161.$proc$rtl.v:764$805'.
  Set init value: \reg179 = 6'000000
Found init rule in `\module161.$proc$rtl.v:763$804'.
  Set init value: \reg180 = 21'000000000000000000000
Found init rule in `\module161.$proc$rtl.v:761$803'.
  Set init value: \reg182 = 17'00000000000000000
Found init rule in `\module161.$proc$rtl.v:760$802'.
  Set init value: \reg183 = 5'00000
Found init rule in `\module161.$proc$rtl.v:758$801'.
  Set init value: \reg185 = 20'00000000000000000000
Found init rule in `\module161.$proc$rtl.v:757$800'.
  Set init value: \reg186 = 14'00000000000000
Found init rule in `\module161.$proc$rtl.v:756$799'.
  Set init value: \reg187 = 16'0000000000000000
Found init rule in `\module198.$proc$rtl.v:665$711'.
  Set init value: \reg207 = 21'000000000000000000000
Found init rule in `\module198.$proc$rtl.v:664$710'.
  Set init value: \reg208 = 8'00000000
Found init rule in `\module198.$proc$rtl.v:663$709'.
  Set init value: \reg209 = 6'000000
Found init rule in `\module198.$proc$rtl.v:662$708'.
  Set init value: \reg210 = 11'00000000000
Found init rule in `\module198.$proc$rtl.v:654$707'.
  Set init value: \reg218 = 8'00000000
Found init rule in `\module46.$proc$rtl.v:541$629'.
  Set init value: \reg55 = 22'0000000000000000000000
Found init rule in `\module46.$proc$rtl.v:540$628'.
  Set init value: \reg56 = 17'00000000000000000
Found init rule in `\module46.$proc$rtl.v:539$627'.
  Set init value: \reg57 = 10'0000000000
Found init rule in `\module46.$proc$rtl.v:538$626'.
  Set init value: \reg58 = 9'000000000
Found init rule in `\module46.$proc$rtl.v:537$625'.
  Set init value: \reg59 = 16'0000000000000000
Found init rule in `\module46.$proc$rtl.v:536$624'.
  Set init value: \reg60 = 20'00000000000000000000
Found init rule in `\module46.$proc$rtl.v:535$623'.
  Set init value: \reg61 = 8'00000000
Found init rule in `\module46.$proc$rtl.v:534$622'.
  Set init value: \reg62 = 16'0000000000000000
Found init rule in `\module21.$proc$rtl.v:434$469'.
  Set init value: \reg30 = 12'000000000000
Found init rule in `\module21.$proc$rtl.v:433$468'.
  Set init value: \reg31 = 13'0000000000000
Found init rule in `\module21.$proc$rtl.v:432$467'.
  Set init value: \reg32 = 4'0000
Found init rule in `\module21.$proc$rtl.v:423$466'.
  Set init value: \reg41 = 7'0000000
Found init rule in `\module74.$proc$rtl.v:177$371'.
  Set init value: \reg124 = 6'000000
Found init rule in `\module74.$proc$rtl.v:176$370'.
  Set init value: \reg123 = 4'0000
Found init rule in `\module74.$proc$rtl.v:175$369'.
  Set init value: \reg122 = 3'000
Found init rule in `\module74.$proc$rtl.v:174$368'.
  Set init value: \reg121 = 7'0000000
Found init rule in `\module74.$proc$rtl.v:173$367'.
  Set init value: \reg120 = 20'00000000000000000000
Found init rule in `\module74.$proc$rtl.v:172$366'.
  Set init value: \reg119 = 21'000000000000000000000
Found init rule in `\module74.$proc$rtl.v:171$365'.
  Set init value: \reg118 = 16'0000000000000000
Found init rule in `\module74.$proc$rtl.v:170$364'.
  Set init value: \reg117 = 9'000000000
Found init rule in `\module74.$proc$rtl.v:169$363'.
  Set init value: \reg116 = 15'000000000000000
Found init rule in `\module74.$proc$rtl.v:168$362'.
  Set init value: \reg115 = 3'000
Found init rule in `\module74.$proc$rtl.v:155$361'.
  Set init value: \reg227 = 17'00000000000000000
Found init rule in `\module74.$proc$rtl.v:154$360'.
  Set init value: \reg228 = 20'00000000000000000000
Found init rule in `\module74.$proc$rtl.v:153$359'.
  Set init value: \reg229 = 12'000000000000
Found init rule in `\module74.$proc$rtl.v:152$358'.
  Set init value: \reg230 = 6'000000
Found init rule in `\module74.$proc$rtl.v:151$357'.
  Set init value: \reg231 = 15'000000000000000
Found init rule in `\module74.$proc$rtl.v:150$356'.
  Set init value: \reg232 = 21'000000000000000000000
Found init rule in `\module74.$proc$rtl.v:149$355'.
  Set init value: \reg233 = 19'0000000000000000000
Found init rule in `\module74.$proc$rtl.v:148$354'.
  Set init value: \reg234 = 10'0000000000
Found init rule in `\module74.$proc$rtl.v:147$353'.
  Set init value: \reg235 = 4'0000
Found init rule in `\module74.$proc$rtl.v:146$352'.
  Set init value: \reg236 = 20'00000000000000000000
Found init rule in `\module74.$proc$rtl.v:145$351'.
  Set init value: \reg237 = 22'0000000000000000000000
Found init rule in `\module74.$proc$rtl.v:144$350'.
  Set init value: \reg238 = 20'00000000000000000000
Found init rule in `\module74.$proc$rtl.v:143$349'.
  Set init value: \reg239 = 5'00000
Found init rule in `\module74.$proc$rtl.v:142$348'.
  Set init value: \reg240 = 18'000000000000000000
Found init rule in `\top.$proc$rtl.v:34$138'.
  Set init value: \reg253 = 8'00000000
Found init rule in `\top.$proc$rtl.v:33$137'.
  Set init value: \reg252 = 8'00000000
Found init rule in `\top.$proc$rtl.v:32$136'.
  Set init value: \reg251 = 3'000
Found init rule in `\top.$proc$rtl.v:31$135'.
  Set init value: \reg250 = 13'0000000000000
Found init rule in `\top.$proc$rtl.v:15$134'.
  Set init value: \reg15 = 15'000000000000000
Found init rule in `\top.$proc$rtl.v:14$133'.
  Set init value: \reg16 = 14'00000000000000
Found init rule in `\top.$proc$rtl.v:13$132'.
  Set init value: \reg17 = 4'0000
Found init rule in `\top.$proc$rtl.v:12$131'.
  Set init value: \reg18 = 6'000000
Found init rule in `\top.$proc$rtl.v:11$130'.
  Set init value: \reg19 = 19'0000000000000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\module86.$proc$rtl.v:1005$966'.
     1/1: $1\reg100[11:0]
Creating decoders for process `\module86.$proc$rtl.v:1004$965'.
     1/1: $1\reg101[17:0]
Creating decoders for process `\module86.$proc$rtl.v:1003$964'.
     1/1: $1\reg102[21:0]
Creating decoders for process `\module86.$proc$rtl.v:1058$934'.
     1/3: $0\reg102[21:0]
     2/3: $0\reg101[17:0]
     3/3: $0\reg100[11:0]
Creating decoders for process `\module125.$proc$rtl.v:906$895'.
     1/1: $1\reg133[7:0]
Creating decoders for process `\module125.$proc$rtl.v:905$894'.
     1/1: $1\reg134[16:0]
Creating decoders for process `\module125.$proc$rtl.v:900$893'.
     1/1: $1\reg139[18:0]
Creating decoders for process `\module125.$proc$rtl.v:899$892'.
     1/1: $1\reg140[11:0]
Creating decoders for process `\module125.$proc$rtl.v:898$891'.
     1/1: $1\reg141[7:0]
Creating decoders for process `\module125.$proc$rtl.v:897$890'.
     1/1: $1\reg142[13:0]
Creating decoders for process `\module125.$proc$rtl.v:896$889'.
     1/1: $1\reg143[5:0]
Creating decoders for process `\module125.$proc$rtl.v:890$888'.
     1/1: $1\reg149[7:0]
Creating decoders for process `\module125.$proc$rtl.v:889$887'.
     1/1: $1\reg150[19:0]
Creating decoders for process `\module125.$proc$rtl.v:973$869'.
     1/2: $0\reg150[19:0]
     2/2: $0\reg149[7:0]
Creating decoders for process `\module125.$proc$rtl.v:958$849'.
     1/4: $0\reg143[5:0]
     2/4: $0\reg142[13:0]
     3/4: $0\reg141[7:0]
     4/4: $0\reg140[11:0]
Creating decoders for process `\module125.$proc$rtl.v:954$848'.
     1/1: $0\reg139[18:0]
Creating decoders for process `\module125.$proc$rtl.v:939$820'.
     1/2: $0\reg134[16:0]
     2/2: $0\reg133[7:0]
Creating decoders for process `\module161.$proc$rtl.v:773$814'.
     1/1: $1\reg170[15:0]
Creating decoders for process `\module161.$proc$rtl.v:772$813'.
     1/1: $1\reg171[9:0]
Creating decoders for process `\module161.$proc$rtl.v:771$812'.
     1/1: $1\reg172[20:0]
Creating decoders for process `\module161.$proc$rtl.v:770$811'.
     1/1: $1\reg173[9:0]
Creating decoders for process `\module161.$proc$rtl.v:769$810'.
     1/1: $1\reg174[11:0]
Creating decoders for process `\module161.$proc$rtl.v:768$809'.
     1/1: $1\reg175[5:0]
Creating decoders for process `\module161.$proc$rtl.v:767$808'.
     1/1: $1\reg176[4:0]
Creating decoders for process `\module161.$proc$rtl.v:766$807'.
     1/1: $1\reg177[3:0]
Creating decoders for process `\module161.$proc$rtl.v:765$806'.
     1/1: $1\reg178[14:0]
Creating decoders for process `\module161.$proc$rtl.v:764$805'.
     1/1: $1\reg179[5:0]
Creating decoders for process `\module161.$proc$rtl.v:763$804'.
     1/1: $1\reg180[20:0]
Creating decoders for process `\module161.$proc$rtl.v:761$803'.
     1/1: $1\reg182[16:0]
Creating decoders for process `\module161.$proc$rtl.v:760$802'.
     1/1: $1\reg183[4:0]
Creating decoders for process `\module161.$proc$rtl.v:758$801'.
     1/1: $1\reg185[19:0]
Creating decoders for process `\module161.$proc$rtl.v:757$800'.
     1/1: $1\reg186[13:0]
Creating decoders for process `\module161.$proc$rtl.v:756$799'.
     1/1: $1\reg187[15:0]
Creating decoders for process `\module161.$proc$rtl.v:863$793'.
     1/3: $0\reg187[15:0]
     2/3: $0\reg186[13:0]
     3/3: $0\reg185[19:0]
Creating decoders for process `\module161.$proc$rtl.v:853$774'.
     1/2: $0\reg183[4:0]
     2/2: $0\reg182[16:0]
Creating decoders for process `\module161.$proc$rtl.v:806$715'.
     1/11: $0\reg180[20:0]
     2/11: $0\reg179[5:0]
     3/11: $0\reg171[9:0]
     4/11: $0\reg170[15:0]
     5/11: $0\reg172[20:0]
     6/11: $0\reg173[9:0]
     7/11: $0\reg174[11:0]
     8/11: $0\reg175[5:0]
     9/11: $0\reg176[4:0]
    10/11: $0\reg177[3:0]
    11/11: $0\reg178[14:0]
Creating decoders for process `\module198.$proc$rtl.v:665$711'.
     1/1: $1\reg207[20:0]
Creating decoders for process `\module198.$proc$rtl.v:664$710'.
     1/1: $1\reg208[7:0]
Creating decoders for process `\module198.$proc$rtl.v:663$709'.
     1/1: $1\reg209[5:0]
Creating decoders for process `\module198.$proc$rtl.v:662$708'.
     1/1: $1\reg210[10:0]
Creating decoders for process `\module198.$proc$rtl.v:654$707'.
     1/1: $1\reg218[7:0]
Creating decoders for process `\module198.$proc$rtl.v:723$676'.
     1/1: $0\reg218[7:0]
Creating decoders for process `\module198.$proc$rtl.v:705$655'.
     1/4: $0\reg210[10:0]
     2/4: $0\reg209[5:0]
     3/4: $0\reg208[7:0]
     4/4: $0\reg207[20:0]
Creating decoders for process `\module46.$proc$rtl.v:541$629'.
     1/1: $1\reg55[21:0]
Creating decoders for process `\module46.$proc$rtl.v:540$628'.
     1/1: $1\reg56[16:0]
Creating decoders for process `\module46.$proc$rtl.v:539$627'.
     1/1: $1\reg57[9:0]
Creating decoders for process `\module46.$proc$rtl.v:538$626'.
     1/1: $1\reg58[8:0]
Creating decoders for process `\module46.$proc$rtl.v:537$625'.
     1/1: $1\reg59[15:0]
Creating decoders for process `\module46.$proc$rtl.v:536$624'.
     1/1: $1\reg60[19:0]
Creating decoders for process `\module46.$proc$rtl.v:535$623'.
     1/1: $1\reg61[7:0]
Creating decoders for process `\module46.$proc$rtl.v:534$622'.
     1/1: $1\reg62[15:0]
Creating decoders for process `\module46.$proc$rtl.v:567$484'.
     1/8: $0\reg62[15:0]
     2/8: $0\reg55[21:0]
     3/8: $0\reg61[7:0]
     4/8: $0\reg56[16:0]
     5/8: $0\reg57[9:0]
     6/8: $0\reg58[8:0]
     7/8: $0\reg60[19:0]
     8/8: $0\reg59[15:0]
Creating decoders for process `\module21.$proc$rtl.v:434$469'.
     1/1: $1\reg30[11:0]
Creating decoders for process `\module21.$proc$rtl.v:433$468'.
     1/1: $1\reg31[12:0]
Creating decoders for process `\module21.$proc$rtl.v:432$467'.
     1/1: $1\reg32[3:0]
Creating decoders for process `\module21.$proc$rtl.v:423$466'.
     1/1: $1\reg41[6:0]
Creating decoders for process `\module21.$proc$rtl.v:507$453'.
     1/1: $0\reg41[6:0]
Creating decoders for process `\module21.$proc$rtl.v:468$381'.
     1/3: $0\reg32[3:0]
     2/3: $0\reg31[12:0]
     3/3: $0\reg30[11:0]
Creating decoders for process `\module74.$proc$rtl.v:177$371'.
     1/1: $1\reg124[5:0]
Creating decoders for process `\module74.$proc$rtl.v:176$370'.
     1/1: $1\reg123[3:0]
Creating decoders for process `\module74.$proc$rtl.v:175$369'.
     1/1: $1\reg122[2:0]
Creating decoders for process `\module74.$proc$rtl.v:174$368'.
     1/1: $1\reg121[6:0]
Creating decoders for process `\module74.$proc$rtl.v:173$367'.
     1/1: $1\reg120[19:0]
Creating decoders for process `\module74.$proc$rtl.v:172$366'.
     1/1: $1\reg119[20:0]
Creating decoders for process `\module74.$proc$rtl.v:171$365'.
     1/1: $1\reg118[15:0]
Creating decoders for process `\module74.$proc$rtl.v:170$364'.
     1/1: $1\reg117[8:0]
Creating decoders for process `\module74.$proc$rtl.v:169$363'.
     1/1: $1\reg116[14:0]
Creating decoders for process `\module74.$proc$rtl.v:168$362'.
     1/1: $1\reg115[2:0]
Creating decoders for process `\module74.$proc$rtl.v:155$361'.
     1/1: $1\reg227[16:0]
Creating decoders for process `\module74.$proc$rtl.v:154$360'.
     1/1: $1\reg228[19:0]
Creating decoders for process `\module74.$proc$rtl.v:153$359'.
     1/1: $1\reg229[11:0]
Creating decoders for process `\module74.$proc$rtl.v:152$358'.
     1/1: $1\reg230[5:0]
Creating decoders for process `\module74.$proc$rtl.v:151$357'.
     1/1: $1\reg231[14:0]
Creating decoders for process `\module74.$proc$rtl.v:150$356'.
     1/1: $1\reg232[20:0]
Creating decoders for process `\module74.$proc$rtl.v:149$355'.
     1/1: $1\reg233[18:0]
Creating decoders for process `\module74.$proc$rtl.v:148$354'.
     1/1: $1\reg234[9:0]
Creating decoders for process `\module74.$proc$rtl.v:147$353'.
     1/1: $1\reg235[3:0]
Creating decoders for process `\module74.$proc$rtl.v:146$352'.
     1/1: $1\reg236[19:0]
Creating decoders for process `\module74.$proc$rtl.v:145$351'.
     1/1: $1\reg237[21:0]
Creating decoders for process `\module74.$proc$rtl.v:144$350'.
     1/1: $1\reg238[19:0]
Creating decoders for process `\module74.$proc$rtl.v:143$349'.
     1/1: $1\reg239[4:0]
Creating decoders for process `\module74.$proc$rtl.v:142$348'.
     1/1: $1\reg240[17:0]
Creating decoders for process `\module74.$proc$rtl.v:321$267'.
     1/14: $0\reg240[17:0]
     2/14: $0\reg227[16:0]
     3/14: $0\reg228[19:0]
     4/14: $0\reg229[11:0]
     5/14: $0\reg230[5:0]
     6/14: $0\reg231[14:0]
     7/14: $0\reg232[20:0]
     8/14: $0\reg233[18:0]
     9/14: $0\reg235[3:0]
    10/14: $0\reg236[19:0]
    11/14: $0\reg237[21:0]
    12/14: $0\reg238[19:0]
    13/14: $0\reg239[4:0]
    14/14: $0\reg234[9:0]
Creating decoders for process `\module74.$proc$rtl.v:241$164'.
     1/10: $0\reg124[5:0]
     2/10: $0\reg115[2:0]
     3/10: $0\reg123[3:0]
     4/10: $0\reg122[2:0]
     5/10: $0\reg121[6:0]
     6/10: $0\reg120[19:0]
     7/10: $0\reg119[20:0]
     8/10: $0\reg118[15:0]
     9/10: $0\reg117[8:0]
    10/10: $0\reg116[14:0]
Creating decoders for process `\top.$proc$rtl.v:34$138'.
     1/1: $1\reg253[7:0]
Creating decoders for process `\top.$proc$rtl.v:33$137'.
     1/1: $1\reg252[7:0]
Creating decoders for process `\top.$proc$rtl.v:32$136'.
     1/1: $1\reg251[2:0]
Creating decoders for process `\top.$proc$rtl.v:31$135'.
     1/1: $1\reg250[12:0]
Creating decoders for process `\top.$proc$rtl.v:15$134'.
     1/1: $1\reg15[14:0]
Creating decoders for process `\top.$proc$rtl.v:14$133'.
     1/1: $1\reg16[13:0]
Creating decoders for process `\top.$proc$rtl.v:13$132'.
     1/1: $1\reg17[3:0]
Creating decoders for process `\top.$proc$rtl.v:12$131'.
     1/1: $1\reg18[5:0]
Creating decoders for process `\top.$proc$rtl.v:11$130'.
     1/1: $1\reg19[18:0]
Creating decoders for process `\top.$proc$rtl.v:109$89'.
     1/4: $0\reg253[7:0]
     2/4: $0\reg252[7:0]
     3/4: $0\reg251[2:0]
     4/4: $0\reg250[12:0]
Creating decoders for process `\top.$proc$rtl.v:90$64'.
     1/5: $0\reg19[18:0]
     2/5: $0\reg18[5:0]
     3/5: $0\reg17[3:0]
     4/5: $0\reg16[13:0]
     5/5: $0\reg15[14:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\module86.\reg102' using process `\module86.$proc$rtl.v:1058$934'.
  created $dff cell `$procdff$1182' with positive edge clock.
Creating register for signal `\module86.\reg101' using process `\module86.$proc$rtl.v:1058$934'.
  created $dff cell `$procdff$1183' with positive edge clock.
Creating register for signal `\module86.\reg100' using process `\module86.$proc$rtl.v:1058$934'.
  created $dff cell `$procdff$1184' with positive edge clock.
Creating register for signal `\module125.\reg150' using process `\module125.$proc$rtl.v:973$869'.
  created $dff cell `$procdff$1185' with positive edge clock.
Creating register for signal `\module125.\reg149' using process `\module125.$proc$rtl.v:973$869'.
  created $dff cell `$procdff$1186' with positive edge clock.
Creating register for signal `\module125.\reg143' using process `\module125.$proc$rtl.v:958$849'.
  created $dff cell `$procdff$1187' with positive edge clock.
Creating register for signal `\module125.\reg142' using process `\module125.$proc$rtl.v:958$849'.
  created $dff cell `$procdff$1188' with positive edge clock.
Creating register for signal `\module125.\reg141' using process `\module125.$proc$rtl.v:958$849'.
  created $dff cell `$procdff$1189' with positive edge clock.
Creating register for signal `\module125.\reg140' using process `\module125.$proc$rtl.v:958$849'.
  created $dff cell `$procdff$1190' with positive edge clock.
Creating register for signal `\module125.\reg139' using process `\module125.$proc$rtl.v:954$848'.
  created $dff cell `$procdff$1191' with positive edge clock.
Creating register for signal `\module125.\reg134' using process `\module125.$proc$rtl.v:939$820'.
  created $dff cell `$procdff$1192' with positive edge clock.
Creating register for signal `\module125.\reg133' using process `\module125.$proc$rtl.v:939$820'.
  created $dff cell `$procdff$1193' with positive edge clock.
Creating register for signal `\module161.\reg185' using process `\module161.$proc$rtl.v:863$793'.
  created $dff cell `$procdff$1194' with positive edge clock.
Creating register for signal `\module161.\reg187' using process `\module161.$proc$rtl.v:863$793'.
  created $dff cell `$procdff$1195' with positive edge clock.
Creating register for signal `\module161.\reg186' using process `\module161.$proc$rtl.v:863$793'.
  created $dff cell `$procdff$1196' with positive edge clock.
Creating register for signal `\module161.\reg183' using process `\module161.$proc$rtl.v:853$774'.
  created $dff cell `$procdff$1197' with positive edge clock.
Creating register for signal `\module161.\reg182' using process `\module161.$proc$rtl.v:853$774'.
  created $dff cell `$procdff$1198' with positive edge clock.
Creating register for signal `\module161.\reg180' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1199' with positive edge clock.
Creating register for signal `\module161.\reg179' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1200' with positive edge clock.
Creating register for signal `\module161.\reg178' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1201' with positive edge clock.
Creating register for signal `\module161.\reg177' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1202' with positive edge clock.
Creating register for signal `\module161.\reg176' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1203' with positive edge clock.
Creating register for signal `\module161.\reg175' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1204' with positive edge clock.
Creating register for signal `\module161.\reg174' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1205' with positive edge clock.
Creating register for signal `\module161.\reg173' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1206' with positive edge clock.
Creating register for signal `\module161.\reg172' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1207' with positive edge clock.
Creating register for signal `\module161.\reg171' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1208' with positive edge clock.
Creating register for signal `\module161.\reg170' using process `\module161.$proc$rtl.v:806$715'.
  created $dff cell `$procdff$1209' with positive edge clock.
Creating register for signal `\module198.\reg218' using process `\module198.$proc$rtl.v:723$676'.
  created $dff cell `$procdff$1210' with positive edge clock.
Creating register for signal `\module198.\reg210' using process `\module198.$proc$rtl.v:705$655'.
  created $dff cell `$procdff$1211' with positive edge clock.
Creating register for signal `\module198.\reg209' using process `\module198.$proc$rtl.v:705$655'.
  created $dff cell `$procdff$1212' with positive edge clock.
Creating register for signal `\module198.\reg208' using process `\module198.$proc$rtl.v:705$655'.
  created $dff cell `$procdff$1213' with positive edge clock.
Creating register for signal `\module198.\reg207' using process `\module198.$proc$rtl.v:705$655'.
  created $dff cell `$procdff$1214' with positive edge clock.
Creating register for signal `\module46.\reg59' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1215' with positive edge clock.
Creating register for signal `\module46.\reg60' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1216' with positive edge clock.
Creating register for signal `\module46.\reg58' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1217' with positive edge clock.
Creating register for signal `\module46.\reg57' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1218' with positive edge clock.
Creating register for signal `\module46.\reg56' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1219' with positive edge clock.
Creating register for signal `\module46.\reg62' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1220' with positive edge clock.
Creating register for signal `\module46.\reg61' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1221' with positive edge clock.
Creating register for signal `\module46.\reg55' using process `\module46.$proc$rtl.v:567$484'.
  created $dff cell `$procdff$1222' with positive edge clock.
Creating register for signal `\module21.\reg41' using process `\module21.$proc$rtl.v:507$453'.
  created $dff cell `$procdff$1223' with positive edge clock.
Creating register for signal `\module21.\reg32' using process `\module21.$proc$rtl.v:468$381'.
  created $dff cell `$procdff$1224' with positive edge clock.
Creating register for signal `\module21.\reg31' using process `\module21.$proc$rtl.v:468$381'.
  created $dff cell `$procdff$1225' with positive edge clock.
Creating register for signal `\module21.\reg30' using process `\module21.$proc$rtl.v:468$381'.
  created $dff cell `$procdff$1226' with positive edge clock.
Creating register for signal `\module74.\reg234' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1227' with positive edge clock.
Creating register for signal `\module74.\reg239' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1228' with positive edge clock.
Creating register for signal `\module74.\reg238' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1229' with positive edge clock.
Creating register for signal `\module74.\reg237' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1230' with positive edge clock.
Creating register for signal `\module74.\reg236' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1231' with positive edge clock.
Creating register for signal `\module74.\reg235' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1232' with positive edge clock.
Creating register for signal `\module74.\reg240' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1233' with positive edge clock.
Creating register for signal `\module74.\reg233' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1234' with positive edge clock.
Creating register for signal `\module74.\reg232' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1235' with positive edge clock.
Creating register for signal `\module74.\reg231' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1236' with positive edge clock.
Creating register for signal `\module74.\reg230' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1237' with positive edge clock.
Creating register for signal `\module74.\reg229' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1238' with positive edge clock.
Creating register for signal `\module74.\reg228' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1239' with positive edge clock.
Creating register for signal `\module74.\reg227' using process `\module74.$proc$rtl.v:321$267'.
  created $dff cell `$procdff$1240' with positive edge clock.
Creating register for signal `\module74.\reg115' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1241' with positive edge clock.
Creating register for signal `\module74.\reg116' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1242' with positive edge clock.
Creating register for signal `\module74.\reg117' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1243' with positive edge clock.
Creating register for signal `\module74.\reg118' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1244' with positive edge clock.
Creating register for signal `\module74.\reg119' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1245' with positive edge clock.
Creating register for signal `\module74.\reg120' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1246' with positive edge clock.
Creating register for signal `\module74.\reg121' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1247' with positive edge clock.
Creating register for signal `\module74.\reg122' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1248' with positive edge clock.
Creating register for signal `\module74.\reg123' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1249' with positive edge clock.
Creating register for signal `\module74.\reg124' using process `\module74.$proc$rtl.v:241$164'.
  created $dff cell `$procdff$1250' with positive edge clock.
Creating register for signal `\top.\reg250' using process `\top.$proc$rtl.v:109$89'.
  created $dff cell `$procdff$1251' with positive edge clock.
Creating register for signal `\top.\reg251' using process `\top.$proc$rtl.v:109$89'.
  created $dff cell `$procdff$1252' with positive edge clock.
Creating register for signal `\top.\reg252' using process `\top.$proc$rtl.v:109$89'.
  created $dff cell `$procdff$1253' with positive edge clock.
Creating register for signal `\top.\reg253' using process `\top.$proc$rtl.v:109$89'.
  created $dff cell `$procdff$1254' with positive edge clock.
Creating register for signal `\top.\reg19' using process `\top.$proc$rtl.v:90$64'.
  created $dff cell `$procdff$1255' with positive edge clock.
Creating register for signal `\top.\reg18' using process `\top.$proc$rtl.v:90$64'.
  created $dff cell `$procdff$1256' with positive edge clock.
Creating register for signal `\top.\reg17' using process `\top.$proc$rtl.v:90$64'.
  created $dff cell `$procdff$1257' with positive edge clock.
Creating register for signal `\top.\reg16' using process `\top.$proc$rtl.v:90$64'.
  created $dff cell `$procdff$1258' with positive edge clock.
Creating register for signal `\top.\reg15' using process `\top.$proc$rtl.v:90$64'.
  created $dff cell `$procdff$1259' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `module86.$proc$rtl.v:1005$966'.
Removing empty process `module86.$proc$rtl.v:1004$965'.
Removing empty process `module86.$proc$rtl.v:1003$964'.
Removing empty process `module86.$proc$rtl.v:1058$934'.
Removing empty process `module125.$proc$rtl.v:906$895'.
Removing empty process `module125.$proc$rtl.v:905$894'.
Removing empty process `module125.$proc$rtl.v:900$893'.
Removing empty process `module125.$proc$rtl.v:899$892'.
Removing empty process `module125.$proc$rtl.v:898$891'.
Removing empty process `module125.$proc$rtl.v:897$890'.
Removing empty process `module125.$proc$rtl.v:896$889'.
Removing empty process `module125.$proc$rtl.v:890$888'.
Removing empty process `module125.$proc$rtl.v:889$887'.
Removing empty process `module125.$proc$rtl.v:973$869'.
Removing empty process `module125.$proc$rtl.v:958$849'.
Removing empty process `module125.$proc$rtl.v:954$848'.
Removing empty process `module125.$proc$rtl.v:939$820'.
Removing empty process `module161.$proc$rtl.v:773$814'.
Removing empty process `module161.$proc$rtl.v:772$813'.
Removing empty process `module161.$proc$rtl.v:771$812'.
Removing empty process `module161.$proc$rtl.v:770$811'.
Removing empty process `module161.$proc$rtl.v:769$810'.
Removing empty process `module161.$proc$rtl.v:768$809'.
Removing empty process `module161.$proc$rtl.v:767$808'.
Removing empty process `module161.$proc$rtl.v:766$807'.
Removing empty process `module161.$proc$rtl.v:765$806'.
Removing empty process `module161.$proc$rtl.v:764$805'.
Removing empty process `module161.$proc$rtl.v:763$804'.
Removing empty process `module161.$proc$rtl.v:761$803'.
Removing empty process `module161.$proc$rtl.v:760$802'.
Removing empty process `module161.$proc$rtl.v:758$801'.
Removing empty process `module161.$proc$rtl.v:757$800'.
Removing empty process `module161.$proc$rtl.v:756$799'.
Removing empty process `module161.$proc$rtl.v:863$793'.
Removing empty process `module161.$proc$rtl.v:853$774'.
Found and cleaned up 2 empty switches in `\module161.$proc$rtl.v:806$715'.
Removing empty process `module161.$proc$rtl.v:806$715'.
Removing empty process `module198.$proc$rtl.v:665$711'.
Removing empty process `module198.$proc$rtl.v:664$710'.
Removing empty process `module198.$proc$rtl.v:663$709'.
Removing empty process `module198.$proc$rtl.v:662$708'.
Removing empty process `module198.$proc$rtl.v:654$707'.
Removing empty process `module198.$proc$rtl.v:723$676'.
Removing empty process `module198.$proc$rtl.v:705$655'.
Removing empty process `module46.$proc$rtl.v:541$629'.
Removing empty process `module46.$proc$rtl.v:540$628'.
Removing empty process `module46.$proc$rtl.v:539$627'.
Removing empty process `module46.$proc$rtl.v:538$626'.
Removing empty process `module46.$proc$rtl.v:537$625'.
Removing empty process `module46.$proc$rtl.v:536$624'.
Removing empty process `module46.$proc$rtl.v:535$623'.
Removing empty process `module46.$proc$rtl.v:534$622'.
Found and cleaned up 3 empty switches in `\module46.$proc$rtl.v:567$484'.
Removing empty process `module46.$proc$rtl.v:567$484'.
Removing empty process `module21.$proc$rtl.v:434$469'.
Removing empty process `module21.$proc$rtl.v:433$468'.
Removing empty process `module21.$proc$rtl.v:432$467'.
Removing empty process `module21.$proc$rtl.v:423$466'.
Removing empty process `module21.$proc$rtl.v:507$453'.
Found and cleaned up 1 empty switch in `\module21.$proc$rtl.v:468$381'.
Removing empty process `module21.$proc$rtl.v:468$381'.
Removing empty process `module74.$proc$rtl.v:177$371'.
Removing empty process `module74.$proc$rtl.v:176$370'.
Removing empty process `module74.$proc$rtl.v:175$369'.
Removing empty process `module74.$proc$rtl.v:174$368'.
Removing empty process `module74.$proc$rtl.v:173$367'.
Removing empty process `module74.$proc$rtl.v:172$366'.
Removing empty process `module74.$proc$rtl.v:171$365'.
Removing empty process `module74.$proc$rtl.v:170$364'.
Removing empty process `module74.$proc$rtl.v:169$363'.
Removing empty process `module74.$proc$rtl.v:168$362'.
Removing empty process `module74.$proc$rtl.v:155$361'.
Removing empty process `module74.$proc$rtl.v:154$360'.
Removing empty process `module74.$proc$rtl.v:153$359'.
Removing empty process `module74.$proc$rtl.v:152$358'.
Removing empty process `module74.$proc$rtl.v:151$357'.
Removing empty process `module74.$proc$rtl.v:150$356'.
Removing empty process `module74.$proc$rtl.v:149$355'.
Removing empty process `module74.$proc$rtl.v:148$354'.
Removing empty process `module74.$proc$rtl.v:147$353'.
Removing empty process `module74.$proc$rtl.v:146$352'.
Removing empty process `module74.$proc$rtl.v:145$351'.
Removing empty process `module74.$proc$rtl.v:144$350'.
Removing empty process `module74.$proc$rtl.v:143$349'.
Removing empty process `module74.$proc$rtl.v:142$348'.
Found and cleaned up 5 empty switches in `\module74.$proc$rtl.v:321$267'.
Removing empty process `module74.$proc$rtl.v:321$267'.
Found and cleaned up 2 empty switches in `\module74.$proc$rtl.v:241$164'.
Removing empty process `module74.$proc$rtl.v:241$164'.
Removing empty process `top.$proc$rtl.v:34$138'.
Removing empty process `top.$proc$rtl.v:33$137'.
Removing empty process `top.$proc$rtl.v:32$136'.
Removing empty process `top.$proc$rtl.v:31$135'.
Removing empty process `top.$proc$rtl.v:15$134'.
Removing empty process `top.$proc$rtl.v:14$133'.
Removing empty process `top.$proc$rtl.v:13$132'.
Removing empty process `top.$proc$rtl.v:12$131'.
Removing empty process `top.$proc$rtl.v:11$130'.
Removing empty process `top.$proc$rtl.v:109$89'.
Removing empty process `top.$proc$rtl.v:90$64'.
Cleaned up 13 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module module86.
<suppressed ~23 debug messages>
Optimizing module module125.
<suppressed ~6 debug messages>
Optimizing module module161.
<suppressed ~9 debug messages>
Optimizing module module198.
<suppressed ~17 debug messages>
Optimizing module module46.
<suppressed ~15 debug messages>
Optimizing module module21.
<suppressed ~19 debug messages>
Optimizing module module74.
<suppressed ~27 debug messages>
Optimizing module top.
<suppressed ~9 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \top..
Removed 40 unused cells and 502 unused wires.
<suppressed ~143 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module module125..
checking module module161..
checking module module198..
checking module module21..
checking module module46..
checking module module74..
checking module module86..
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
<suppressed ~1 debug messages>
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module198'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module21'.
<suppressed ~6 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~15 debug messages>
Finding identical cells in module `\module74'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 14 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $ternary$rtl.v:825$750: { 20'00000000000000000000 \wire167 [0] } -> 21'000000000000000000001
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $ternary$rtl.v:584$511.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $ternary$rtl.v:337$283: { 14'00000000000000 \reg122 } -> { 14'00000000000000 \reg122 [2:1] 1'0 }
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:318$255.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$rtl.v:1051$922: { 5'00000 \wire87 } -> { 5'00000 \wire87 [2:1] 1'0 }
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~147 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
    New input vector for $reduce_or cell $reduce_or$rtl.v:970$864: { \reg133 [0] \reg133 [1] \reg133 [2] \reg133 [3] \reg133 [4] \reg133 [5] \reg133 [6] \reg133 [7] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:980$882: { $ternary$rtl.v:980$881_Y [0] $ternary$rtl.v:980$881_Y [1] $ternary$rtl.v:980$881_Y [2] $ternary$rtl.v:980$881_Y [3] $ternary$rtl.v:980$881_Y [4] $ternary$rtl.v:980$881_Y [5] $ternary$rtl.v:980$881_Y [6] $ternary$rtl.v:980$881_Y [7] $ternary$rtl.v:980$881_Y [8] $ternary$rtl.v:980$881_Y [9] $ternary$rtl.v:980$881_Y [10] $ternary$rtl.v:980$881_Y [11] }
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
    New input vector for $reduce_or cell $reduce_or$rtl.v:857$784: { $le$rtl.v:857$775_Y $ternary$rtl.v:856$783_Y }
    New input vector for $reduce_or cell $reduce_or$rtl.v:825$751: { $ternary$rtl.v:825$750_Y [0] $ternary$rtl.v:825$750_Y [1] $ternary$rtl.v:825$750_Y [2] $ternary$rtl.v:825$750_Y [3] $ternary$rtl.v:825$750_Y [4] $ternary$rtl.v:825$750_Y [5] $ternary$rtl.v:825$750_Y [6] $ternary$rtl.v:825$750_Y [7] $ternary$rtl.v:825$750_Y [8] $ternary$rtl.v:825$750_Y [9] $ternary$rtl.v:825$750_Y [10] $ternary$rtl.v:825$750_Y [11] $ternary$rtl.v:825$750_Y [12] $ternary$rtl.v:825$750_Y [13] $ternary$rtl.v:825$750_Y [14] $ternary$rtl.v:825$750_Y [15] $ternary$rtl.v:825$750_Y [16] $ternary$rtl.v:825$750_Y [17] $ternary$rtl.v:825$750_Y [18] $ternary$rtl.v:825$750_Y [19] $ternary$rtl.v:825$750_Y [20] }
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
    New input vector for $reduce_or cell $reduce_or$rtl.v:694$632: { \wire202 [0] \wire202 [1] \wire202 [2] \wire202 [3] \wire202 [4] \wire202 [5] \wire202 [6] \wire202 [7] \wire202 [8] \wire202 [9] \wire202 [10] \wire202 [11] \wire202 [12] \wire202 [13] \wire202 [14] \wire202 [15] \wire202 [16] \wire202 [17] \wire202 [18] \wire202 [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:727$686: { $add$rtl.v:727$685_Y [0] $add$rtl.v:727$685_Y [1] $add$rtl.v:727$685_Y [2] }
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
    New input vector for $reduce_or cell $reduce_or$rtl.v:506$451: { $or$rtl.v:506$450_Y [0] $or$rtl.v:506$450_Y [1] $or$rtl.v:506$450_Y [2] $or$rtl.v:506$450_Y [3] $or$rtl.v:506$450_Y [4] $or$rtl.v:506$450_Y [5] $or$rtl.v:506$450_Y [6] $or$rtl.v:506$450_Y [7] $or$rtl.v:506$450_Y [8] $or$rtl.v:506$450_Y [9] $or$rtl.v:506$450_Y [10] $or$rtl.v:506$450_Y [11] $or$rtl.v:506$450_Y [12] $or$rtl.v:506$450_Y [13] $or$rtl.v:506$450_Y [14] $or$rtl.v:506$450_Y [15] $or$rtl.v:506$450_Y [16] $or$rtl.v:506$450_Y [17] $or$rtl.v:506$450_Y [18] $or$rtl.v:506$450_Y [19] $or$rtl.v:506$450_Y [20] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:471$387: { \wire23 [0] \wire23 [1] \wire23 [2] \wire23 [3] \wire23 [4] \wire23 [5] \wire23 [6] \wire23 [7] \wire23 [8] \wire23 [9] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:514$455: { \wire44 [0] \wire44 [1] \wire44 [2] }
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $reduce_or$rtl.v:604$546: { \reg59 [0] \reg59 [1] \reg59 [2] \reg59 [3] \reg59 [4] \reg59 [5] \reg59 [6] \reg59 [7] \reg59 [8] \reg59 [9] \reg59 [10] \reg59 [11] \reg59 [12] \reg59 [13] \reg59 [14] \reg59 [15] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:593$521: { $ternary$rtl.v:593$520_Y [0] $ternary$rtl.v:593$520_Y [1] $ternary$rtl.v:593$520_Y [2] $ternary$rtl.v:593$520_Y [3] $ternary$rtl.v:593$520_Y [4] $ternary$rtl.v:593$520_Y [5] $ternary$rtl.v:593$520_Y [6] $ternary$rtl.v:593$520_Y [7] $ternary$rtl.v:593$520_Y [8] $ternary$rtl.v:593$520_Y [9] $ternary$rtl.v:593$520_Y [10] $ternary$rtl.v:593$520_Y [11] $ternary$rtl.v:593$520_Y [12] $ternary$rtl.v:593$520_Y [13] $ternary$rtl.v:593$520_Y [14] $ternary$rtl.v:593$520_Y [15] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:623$586: { \wire48 [1] \wire48 [2] $ternary$rtl.v:623$585_Y [0] $ternary$rtl.v:623$585_Y [1] $ternary$rtl.v:623$585_Y [2] $ternary$rtl.v:623$585_Y [3] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:615$571: { \reg55 [0] \reg55 [1] \reg55 [2] \reg55 [3] \reg55 [4] \reg55 [5] \reg55 [6] \reg55 [7] \reg55 [8] \reg55 [9] \reg55 [10] \reg55 [11] \reg55 [12] \reg55 [13] \reg55 [14] \reg55 [15] \reg55 [16] \reg55 [17] \reg55 [18] \reg55 [19] \reg55 [20] \reg55 [21] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:605$552: { \reg55 [1] \reg55 [2] \reg55 [3] \reg55 [4] \reg55 [5] \reg55 [6] \reg55 [7] \reg55 [8] \reg55 [9] \reg55 [10] \reg55 [11] \reg55 [12] \reg55 [13] \reg55 [14] \reg55 [15] \reg55 [16] \reg55 [17] \reg55 [18] \reg55 [19] \reg55 [20] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:594$532: { \reg59 [0] \reg59 [1] \reg59 [2] \reg59 [3] \reg59 [4] \reg59 [5] \reg59 [6] \reg59 [7] \reg59 [8] \reg59 [9] \reg59 [10] \reg59 [11] \reg59 [12] \reg59 [13] \reg59 [14] \reg59 [15] \reg60 [0] \reg60 [1] \reg60 [2] \reg60 [3] \reg60 [4] \reg60 [5] \reg60 [6] \reg60 [7] \reg60 [8] \reg60 [9] \reg60 [10] \reg60 [11] \reg60 [12] \reg60 [13] \reg60 [14] \reg60 [15] \reg60 [16] \reg60 [17] \reg60 [18] \reg60 [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:593$526: { \reg56 [0] \reg56 [1] \reg56 [2] \reg56 [3] \reg56 [4] \reg56 [5] \reg56 [6] \reg56 [7] \reg56 [8] \reg56 [9] \reg56 [10] \reg56 [11] \reg56 [12] \reg56 [13] \reg56 [14] \reg56 [15] \reg56 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:593$524: { \wire54 [0] \wire54 [1] \wire54 [2] \wire54 [3] \wire54 [4] \wire54 [5] \wire54 [6] \wire54 [7] \wire54 [8] \wire54 [9] \wire54 [10] \wire54 [11] \wire54 [12] \wire54 [13] \wire54 [14] \wire54 [15] \wire54 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:566$482: { $or$rtl.v:566$481_Y [0] $or$rtl.v:566$481_Y [1] $or$rtl.v:566$481_Y [2] $or$rtl.v:566$481_Y [3] $or$rtl.v:566$481_Y [4] $or$rtl.v:566$481_Y [5] $or$rtl.v:566$481_Y [6] $or$rtl.v:566$481_Y [7] $or$rtl.v:566$481_Y [8] $or$rtl.v:566$481_Y [9] $or$rtl.v:566$481_Y [10] $or$rtl.v:566$481_Y [11] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
    New input vector for $reduce_or cell $reduce_or$rtl.v:386$326: { \wire81 [1] \wire81 [2] \wire81 [3] \wire81 [4] \wire81 [5] \wire81 [6] \wire81 [7] \wire81 [8] \wire81 [9] \wire81 [10] \wire81 [11] \wire81 [12] \wire81 [13] \wire81 [14] \wire81 [15] \wire81 [16] \wire159 [0] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:303$230: { \reg124 [0] \reg124 [1] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:290$226: { \wire77 [0] \wire77 [1] \wire77 [2] \wire77 [3] \wire77 [4] \wire77 [5] \wire77 [6] \wire77 [7] \wire77 [8] \wire77 [9] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:238$157: { \wire78 [0] \wire78 [1] \wire78 [2] \wire78 [3] \wire78 [4] \wire78 [5] \wire78 [6] \wire78 [7] \wire78 [8] \wire78 [9] \wire78 [10] \wire78 [11] \wire78 [12] \wire78 [13] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:237$151: { \wire76 [9] \wire76 [10] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:387$333: { \reg116 [1] \reg116 [2] \reg116 [3] \reg116 [4] \reg116 [5] \reg116 [6] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:351$302: { \reg227 [0] \reg227 [1] \reg227 [2] \reg227 [3] \reg227 [4] \reg227 [5] \reg227 [6] \reg227 [7] \reg227 [8] \reg227 [9] \reg227 [10] \reg227 [11] \reg227 [12] \reg227 [13] \reg227 [14] \reg227 [15] \reg227 [16] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:309$238: { \reg120 [0] \reg120 [1] \reg120 [2] \reg120 [3] \reg120 [4] \reg120 [5] \reg120 [6] \reg120 [7] \reg120 [8] \reg120 [9] \reg120 [10] \reg120 [11] \reg120 [12] \reg120 [13] \reg120 [14] \reg120 [15] \reg120 [16] \reg120 [17] \reg120 [18] \reg120 [19] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:305$232: { \wire113 [0] \wire113 [1] \wire113 [2] \wire113 [3] \wire113 [4] \wire113 [5] \wire113 [6] \wire113 [7] \wire113 [8] \wire113 [9] \wire113 [10] \wire113 [11] \wire113 [12] \wire113 [13] \wire113 [14] \wire113 [15] \wire113 [16] \wire113 [17] \wire113 [18] \wire113 [19] \wire113 [20] \wire113 [21] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:238$155: { \wire75 [0] \wire75 [1] \wire75 [2] \wire75 [3] \wire75 [4] \wire75 [5] \wire75 [6] \wire75 [7] \wire75 [8] \wire75 [9] \wire75 [10] \wire75 [11] \wire75 [12] \wire75 [13] \wire75 [14] \wire75 [15] \wire75 [16] \wire75 [17] \wire75 [18] \wire75 [19] }
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
    New input vector for $reduce_and cell $reduce_and$rtl.v:1043$908: { $logic_not$rtl.v:1043$904_Y [0] $logic_not$rtl.v:1043$904_Y [1] $logic_not$rtl.v:1043$904_Y [2] $logic_not$rtl.v:1043$904_Y [3] $logic_not$rtl.v:1043$904_Y [4] $logic_not$rtl.v:1043$904_Y [5] $logic_not$rtl.v:1043$904_Y [6] $logic_not$rtl.v:1043$904_Y [7] $logic_not$rtl.v:1043$904_Y [8] $logic_not$rtl.v:1043$904_Y [9] $logic_not$rtl.v:1043$904_Y [10] $logic_not$rtl.v:1043$904_Y [11] $logic_not$rtl.v:1043$904_Y [12] $logic_not$rtl.v:1043$904_Y [13] $logic_not$rtl.v:1043$904_Y [14] $logic_not$rtl.v:1043$904_Y [15] $logic_not$rtl.v:1043$904_Y [16] $logic_not$rtl.v:1043$904_Y [17] $logic_not$rtl.v:1043$904_Y [18] $logic_not$rtl.v:1043$904_Y [19] $logic_not$rtl.v:1043$904_Y [20] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:1043$903: { \wire91 [0] \wire91 [1] \wire91 [2] \wire91 [3] \wire91 [4] \wire91 [5] \wire91 [6] \wire91 [7] \wire91 [8] \wire91 [9] \wire91 [10] \wire91 [11] \wire91 [12] \wire91 [13] \wire91 [14] }
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $reduce_or$rtl.v:81$42: { $ternary$rtl.v:81$41_Y [0] $ternary$rtl.v:81$41_Y [1] $ternary$rtl.v:81$41_Y [2] $ternary$rtl.v:81$41_Y [3] $ternary$rtl.v:81$41_Y [4] $ternary$rtl.v:81$41_Y [5] $ternary$rtl.v:81$41_Y [6] $ternary$rtl.v:81$41_Y [7] $ternary$rtl.v:81$41_Y [8] $ternary$rtl.v:81$41_Y [9] $ternary$rtl.v:81$41_Y [10] $ternary$rtl.v:81$41_Y [11] $ternary$rtl.v:81$41_Y [12] $ternary$rtl.v:81$41_Y [13] $ternary$rtl.v:81$41_Y [14] $ternary$rtl.v:81$41_Y [15] $ternary$rtl.v:81$41_Y [16] $ternary$rtl.v:81$41_Y [17] $ternary$rtl.v:81$41_Y [18] $ternary$rtl.v:81$41_Y [19] }
    New input vector for $reduce_or cell $reduce_or$rtl.v:73$13: { \wire0 [0] \wire0 [1] \wire0 [2] \wire0 [3] \wire0 [4] \wire0 [5] \wire0 [6] \wire0 [7] \wire0 [8] \wire0 [9] \wire0 [10] \wire0 [11] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:97$69: { \reg17 [0] \reg17 [1] \reg17 [2] \reg17 [3] }
    New input vector for $reduce_and cell $reduce_and$rtl.v:70$6: { $ternary$rtl.v:70$5_Y [0] $ternary$rtl.v:70$5_Y [1] $ternary$rtl.v:70$5_Y [2] $ternary$rtl.v:70$5_Y [3] $ternary$rtl.v:70$5_Y [4] $ternary$rtl.v:70$5_Y [5] $ternary$rtl.v:70$5_Y [6] $ternary$rtl.v:70$5_Y [7] $ternary$rtl.v:70$5_Y [8] $ternary$rtl.v:70$5_Y [9] $ternary$rtl.v:70$5_Y [10] $ternary$rtl.v:70$5_Y [11] $ternary$rtl.v:70$5_Y [12] $ternary$rtl.v:70$5_Y [13] $ternary$rtl.v:70$5_Y [14] $ternary$rtl.v:70$5_Y [15] $ternary$rtl.v:70$5_Y [16] $ternary$rtl.v:70$5_Y [17] $ternary$rtl.v:70$5_Y [18] $ternary$rtl.v:70$5_Y [19] $ternary$rtl.v:70$5_Y [20] }
  Optimizing cells in module \top.
Performed a total of 34 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1191 ($dff) from module module125.
Removing $procdff$1197 ($dff) from module module161.
Removing $procdff$1241 ($dff) from module module74.
Removing $procdff$1183 ($dff) from module module86.
Replaced 4 DFF cells.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 3 unused cells and 20 unused wires.
<suppressed ~9 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
<suppressed ~4 debug messages>
Optimizing module module86.
Optimizing module top.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~145 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1195 ($dff) from module module161.
Replaced 1 DFF cells.

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 5 unused wires.
<suppressed ~2 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~145 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 10) from port A of cell module125.$and$rtl.v:937$819 ($and).
Removed top 3 bits (of 10) from port Y of cell module125.$and$rtl.v:937$819 ($and).
Removed top 3 bits (of 10) from port B of cell module125.$and$rtl.v:937$819 ($and).
Removed top 3 bits (of 10) from mux cell module125.$ternary$rtl.v:937$818 ($mux).
Removed top 14 bits (of 20) from port A of cell module125.$shr$rtl.v:941$821 ($shr).
Removed top 15 bits (of 20) from port B of cell module125.$shr$rtl.v:941$821 ($shr).
Removed top 13 bits (of 20) from port B of cell module125.$lt$rtl.v:949$835 ($lt).
Removed top 2 bits (of 10) from mux cell module125.$ternary$rtl.v:949$837 ($mux).
Removed top 7 bits (of 28) from port A of cell module125.$mul$rtl.v:950$840 ($mul).
Removed top 15 bits (of 28) from port B of cell module125.$mul$rtl.v:950$840 ($mul).
Removed top 19 bits (of 28) from port Y of cell module125.$mul$rtl.v:950$840 ($mul).
Removed top 15 bits (of 16) from port A of cell module125.$eq$rtl.v:962$851 ($eq).
Removed top 5 bits (of 14) from port A of cell module125.$add$rtl.v:964$861 ($add).
Removed top 4 bits (of 14) from port Y of cell module125.$add$rtl.v:964$861 ($add).
Removed top 18 bits (of 19) from port A of cell module125.$gt$rtl.v:971$865 ($gt).
Removed top 12 bits (of 20) from mux cell module125.$ternary$rtl.v:977$873 ($mux).
Removed top 2 bits (of 8) from mux cell module125.$ternary$rtl.v:971$867 ($mux).
Removed top 6 bits (of 11) from port A of cell module125.$add$rtl.v:972$868 ($add).
Removed top 9 bits (of 11) from port B of cell module125.$add$rtl.v:972$868 ($add).
Removed top 5 bits (of 11) from port Y of cell module125.$add$rtl.v:972$868 ($add).
Removed top 12 bits (of 20) from port A of cell module125.$add$rtl.v:977$876 ($add).
Removed top 19 bits (of 20) from port B of cell module125.$add$rtl.v:977$876 ($add).
Removed top 11 bits (of 20) from port Y of cell module125.$add$rtl.v:977$876 ($add).
Removed top 2 bits (of 12) from mux cell module125.$ternary$rtl.v:980$879 ($mux).
Removed top 2 bits (of 12) from mux cell module125.$ternary$rtl.v:980$881 ($mux).
Removed top 11 bits (of 20) from FF cell module125.$procdff$1185 ($dff).
Removed top 3 bits (of 8) from FF cell module125.$procdff$1186 ($dff).
Removed top 5 bits (of 6) from FF cell module125.$procdff$1187 ($dff).
Removed top 4 bits (of 14) from FF cell module125.$procdff$1188 ($dff).
Removed top 7 bits (of 8) from FF cell module125.$procdff$1189 ($dff).
Removed top 11 bits (of 12) from FF cell module125.$procdff$1190 ($dff).
Removed top 7 bits (of 17) from FF cell module125.$procdff$1192 ($dff).
Removed top 7 bits (of 8) from FF cell module125.$procdff$1193 ($dff).
Removed top 2 bits (of 8) from port Y of cell module125.$shl$rtl.v:971$866 ($shl).
Removed top 11 bits (of 12) from wire module125.$0\reg140[11:0].
Removed top 7 bits (of 8) from wire module125.$0\reg141[7:0].
Removed top 4 bits (of 14) from wire module125.$0\reg142[13:0].
Removed top 11 bits (of 20) from wire module125.$0\reg150[19:0].
Removed top 9 bits (of 10) from wire module125.$lt$rtl.v:949$835_Y.
Removed top 19 bits (of 20) from wire module125.$reduce_xnor$rtl.v:977$870_Y.
Removed top 2 bits (of 8) from wire module125.$shl$rtl.v:971$866_Y.
Removed top 3 bits (of 10) from wire module125.$ternary$rtl.v:937$818_Y.
Removed top 12 bits (of 20) from wire module125.$ternary$rtl.v:977$873_Y.
Removed top 2 bits (of 12) from wire module125.$ternary$rtl.v:980$879_Y.
Removed top 2 bits (of 12) from wire module125.$ternary$rtl.v:980$881_Y.
Removed top 1 bits (of 7) from wire module125.wire131.
Removed top 11 bits (of 12) from wire module125.wire138.
Removed top 8 bits (of 14) from wire module125.wire148.
Removed top 10 bits (of 11) from wire module125.wire151.
Removed top 20 bits (of 21) from mux cell module161.$procmux$976 ($mux).
Removed top 1 bits (of 8) from mux cell module161.$ternary$rtl.v:812$731 ($mux).
Removed top 1 bits (of 8) from port A of cell module161.$lt$rtl.v:812$732 ($lt).
Removed top 7 bits (of 8) from port B of cell module161.$lt$rtl.v:812$732 ($lt).
Removed top 1 bits (of 7) from port B of cell module161.$eq$rtl.v:814$740 ($eq).
Removed top 1 bits (of 11) from port B of cell module161.$xnor$rtl.v:822$743 ($xnor).
Removed top 11 bits (of 21) from port Y of cell module161.$shr$rtl.v:822$746 ($shr).
Removed top 6 bits (of 10) from mux cell module161.$ternary$rtl.v:843$769 ($mux).
Removed top 8 bits (of 15) from port A of cell module161.$not$rtl.v:844$771 ($not).
Removed top 2 bits (of 8) from port Y of cell module161.$or$rtl.v:848$772 ($or).
Removed top 2 bits (of 8) from port A of cell module161.$or$rtl.v:848$772 ($or).
Removed top 14 bits (of 15) from port A of cell module161.$le$rtl.v:857$775 ($le).
Removed top 7 bits (of 19) from mux cell module161.$ternary$rtl.v:862$791 ($mux).
Removed top 7 bits (of 19) from port B of cell module161.$mul$rtl.v:862$792 ($mul).
Removed top 3 bits (of 19) from port Y of cell module161.$mul$rtl.v:862$792 ($mul).
Removed top 12 bits (of 14) from FF cell module161.$procdff$1196 ($dff).
Removed top 16 bits (of 17) from FF cell module161.$procdff$1198 ($dff).
Removed top 20 bits (of 21) from FF cell module161.$procdff$1207 ($dff).
Removed top 9 bits (of 10) from FF cell module161.$procdff$1208 ($dff).
Removed top 15 bits (of 16) from FF cell module161.$procdff$1209 ($dff).
Removed top 20 bits (of 21) from port A of cell module161.$shr$rtl.v:822$746 ($shr).
Removed top 20 bits (of 21) from port B of cell module161.$sub$rtl.v:825$748 ($sub).
Removed top 3 bits (of 4) from mux cell module161.$ternary$rtl.v:843$769 ($mux).
Removed top 2 bits (of 4) from mux cell module161.$procmux$1000 ($mux).
Removed cell module161.$procdff$1196 ($dff).
Removed top 9 bits (of 10) from wire module161.$0\reg171[9:0].
Removed top 20 bits (of 21) from wire module161.$0\reg172[20:0].
Removed top 16 bits (of 17) from wire module161.$0\reg182[16:0].
Removed top 2 bits (of 4) from wire module161.$procmux$1000_Y.
Removed top 6 bits (of 7) from wire module161.$reduce_xnor$rtl.v:810$723_Y.
Removed top 11 bits (of 21) from wire module161.$shr$rtl.v:822$746_Y.
Removed top 9 bits (of 10) from wire module161.$ternary$rtl.v:843$769_Y.
Removed top 7 bits (of 19) from wire module161.$ternary$rtl.v:862$791_Y.
Removed top 4 bits (of 5) from wire module161.wire167.
Removed top 14 bits (of 15) from wire module161.wire181.
Removed top 14 bits (of 22) from mux cell module198.$ternary$rtl.v:698$642 ($mux).
Removed top 17 bits (of 22) from port B of cell module198.$xor$rtl.v:694$634 ($xor).
Removed top 14 bits (of 22) from port Y of cell module198.$xor$rtl.v:694$634 ($xor).
Removed top 14 bits (of 22) from port A of cell module198.$xor$rtl.v:694$634 ($xor).
Removed top 14 bits (of 22) from mux cell module198.$ternary$rtl.v:698$640 ($mux).
Removed top 3 bits (of 12) from mux cell module198.$ternary$rtl.v:703$647 ($mux).
Removed top 3 bits (of 12) from mux cell module198.$ternary$rtl.v:703$648 ($mux).
Removed top 1 bits (of 9) from port Y of cell module198.$neg$rtl.v:709$659 ($neg).
Removed top 1 bits (of 9) from port A of cell module198.$neg$rtl.v:709$659 ($neg).
Removed top 4 bits (of 12) from port A of cell module198.$sshr$rtl.v:725$677 ($sshr).
Removed top 2 bits (of 3) from mux cell module198.$ternary$rtl.v:727$684 ($mux).
Removed top 2 bits (of 3) from port B of cell module198.$add$rtl.v:727$685 ($add).
Removed top 4 bits (of 12) from port Y of cell module198.$xor$rtl.v:732$690 ($xor).
Removed top 4 bits (of 12) from port B of cell module198.$mul$rtl.v:732$691 ($mul).
Removed top 7 bits (of 12) from mux cell module198.$ternary$rtl.v:732$696 ($mux).
Removed top 7 bits (of 8) from FF cell module198.$procdff$1210 ($dff).
Removed top 2 bits (of 11) from FF cell module198.$procdff$1211 ($dff).
Removed top 2 bits (of 6) from FF cell module198.$procdff$1212 ($dff).
Removed top 19 bits (of 21) from FF cell module198.$procdff$1214 ($dff).
Removed top 14 bits (of 22) from mux cell module198.$ternary$rtl.v:694$633 ($mux).
Removed top 2 bits (of 11) from mux cell module198.$ternary$rtl.v:715$667 ($mux).
Removed top 7 bits (of 8) from port A of cell module198.$mul$rtl.v:732$691 ($mul).
Removed top 3 bits (of 12) from port Y of cell module198.$mul$rtl.v:732$691 ($mul).
Removed top 7 bits (of 12) from mux cell module198.$ternary$rtl.v:732$693 ($mux).
Removed top 14 bits (of 22) from port Y of cell module198.$or$rtl.v:694$631 ($or).
Removed top 14 bits (of 22) from port A of cell module198.$or$rtl.v:694$631 ($or).
Removed top 14 bits (of 22) from port B of cell module198.$or$rtl.v:694$631 ($or).
Removed top 4 bits (of 9) from port Y of cell module198.$mul$rtl.v:732$691 ($mul).
Removed top 7 bits (of 8) from wire module198.$0\reg218[7:0].
Removed top 2 bits (of 3) from wire module198.$logic_and$rtl.v:727$681_Y.
Removed top 7 bits (of 12) from wire module198.$mul$rtl.v:732$691_Y.
Removed top 14 bits (of 22) from wire module198.$or$rtl.v:694$631_Y.
Removed top 21 bits (of 22) from wire module198.$reduce_or$rtl.v:694$632_Y.
Removed top 14 bits (of 22) from wire module198.$ternary$rtl.v:694$633_Y.
Removed top 14 bits (of 22) from wire module198.$ternary$rtl.v:698$640_Y.
Removed top 3 bits (of 12) from wire module198.$ternary$rtl.v:703$647_Y.
Removed top 2 bits (of 11) from wire module198.$ternary$rtl.v:715$667_Y.
Removed top 2 bits (of 3) from wire module198.$ternary$rtl.v:727$684_Y.
Removed top 7 bits (of 12) from wire module198.$ternary$rtl.v:732$693_Y.
Removed top 17 bits (of 22) from wire module198.$xor$rtl.v:694$634_Y.
Removed top 7 bits (of 12) from wire module198.$xor$rtl.v:732$690_Y.
Removed top 10 bits (of 21) from port Y of cell module21.$add$rtl.v:464$372 ($add).
Removed top 6 bits (of 21) from port A of cell module21.$ne$rtl.v:470$383 ($ne).
Removed top 7 bits (of 8) from port B of cell module21.$xnor$rtl.v:470$384 ($xnor).
Removed top 5 bits (of 15) from port Y of cell module21.$or$rtl.v:473$390 ($or).
Removed top 13 bits (of 14) from port A of cell module21.$ge$rtl.v:473$391 ($ge).
Removed top 5 bits (of 15) from mux cell module21.$ternary$rtl.v:473$392 ($mux).
Removed top 5 bits (of 15) from mux cell module21.$ternary$rtl.v:473$394 ($mux).
Removed top 13 bits (of 14) from mux cell module21.$ternary$rtl.v:475$399 ($mux).
Removed top 8 bits (of 21) from port B of cell module21.$gt$rtl.v:486$407 ($gt).
Removed top 18 bits (of 22) from mux cell module21.$ternary$rtl.v:490$418 ($mux).
Removed top 5 bits (of 15) from port B of cell module21.$sub$rtl.v:489$414 ($sub).
Removed top 11 bits (of 15) from mux cell module21.$ternary$rtl.v:489$416 ($mux).
Removed top 10 bits (of 13) from mux cell module21.$ternary$rtl.v:496$431 ($mux).
Removed top 3 bits (of 7) from mux cell module21.$ternary$rtl.v:496$428 ($mux).
Removed top 3 bits (of 7) from port A of cell module21.$ge$rtl.v:496$429 ($ge).
Removed top 3 bits (of 7) from port B of cell module21.$ge$rtl.v:496$429 ($ge).
Removed top 13 bits (of 17) from port B of cell module21.$and$rtl.v:504$444 ($and).
Removed top 5 bits (of 17) from port Y of cell module21.$and$rtl.v:504$444 ($and).
Removed top 1 bits (of 5) from port A of cell module21.$and$rtl.v:504$445 ($and).
Removed top 4 bits (of 5) from port B of cell module21.$and$rtl.v:504$445 ($and).
Removed top 1 bits (of 5) from port Y of cell module21.$and$rtl.v:504$445 ($and).
Removed top 4 bits (of 17) from mux cell module21.$ternary$rtl.v:504$449 ($mux).
Removed top 12 bits (of 13) from port A of cell module21.$mul$rtl.v:515$459 ($mul).
Removed top 20 bits (of 21) from port A of cell module21.$not$rtl.v:517$461 ($not).
Removed top 11 bits (of 21) from port Y of cell module21.$not$rtl.v:517$461 ($not).
Removed top 8 bits (of 12) from mux cell module21.$procmux$1054 ($mux).
Removed top 5 bits (of 7) from FF cell module21.$procdff$1223 ($dff).
Removed top 8 bits (of 12) from FF cell module21.$procdff$1226 ($dff).
Removed top 7 bits (of 12) from port B of cell module21.$eq$rtl.v:487$408 ($eq).
Removed top 11 bits (of 15) from port Y of cell module21.$sub$rtl.v:489$414 ($sub).
Removed top 11 bits (of 15) from port A of cell module21.$sub$rtl.v:489$414 ($sub).
Removed top 6 bits (of 10) from port B of cell module21.$sub$rtl.v:489$414 ($sub).
Removed top 4 bits (of 12) from mux cell module21.$ternary$rtl.v:503$443 ($mux).
Removed top 7 bits (of 12) from port A of cell module21.$and$rtl.v:504$444 ($and).
Converting cell module21.$and$rtl.v:504$444 ($and) from signed to unsigned.
Removed top 7 bits (of 12) from port Y of cell module21.$and$rtl.v:504$444 ($and).
Removed top 1 bits (of 5) from port A of cell module21.$and$rtl.v:504$444 ($and).
Removed top 1 bits (of 4) from port B of cell module21.$and$rtl.v:504$444 ($and).
Removed top 1 bits (of 5) from port Y of cell module21.$and$rtl.v:504$444 ($and).
Removed top 13 bits (of 17) from mux cell module21.$ternary$rtl.v:504$447 ($mux).
Removed top 8 bits (of 12) from wire module21.$0\reg30[11:0].
Removed top 10 bits (of 21) from wire module21.$add$rtl.v:464$372_Y.
Removed top 13 bits (of 17) from wire module21.$and$rtl.v:504$444_Y.
Removed top 1 bits (of 5) from wire module21.$and$rtl.v:504$445_Y.
Removed top 14 bits (of 15) from wire module21.$ge$rtl.v:473$391_Y.
Removed top 20 bits (of 21) from wire module21.$le$rtl.v:465$377_Y.
Removed top 13 bits (of 14) from wire module21.$le$rtl.v:475$397_Y.
Removed top 7 bits (of 8) from wire module21.$ne$rtl.v:470$383_Y.
Removed top 11 bits (of 21) from wire module21.$not$rtl.v:517$461_Y.
Removed top 5 bits (of 15) from wire module21.$or$rtl.v:473$390_Y.
Removed top 12 bits (of 13) from wire module21.$reduce_and$rtl.v:514$455_Y.
Removed top 5 bits (of 15) from wire module21.$ternary$rtl.v:473$392_Y.
Removed top 13 bits (of 17) from wire module21.$ternary$rtl.v:504$447_Y.
Removed top 13 bits (of 14) from wire module21.wire27.
Removed top 3 bits (of 5) from wire module21.wire33.
Removed top 14 bits (of 17) from wire module21.wire37.
Removed top 11 bits (of 12) from wire module21.wire40.
Removed top 2 bits (of 3) from wire module21.wire44.
Removed top 6 bits (of 16) from wire module21.wire68.
Removed top 3 bits (of 4) from port A of cell module46.$sshr$rtl.v:563$474 ($sshr).
Removed top 14 bits (of 18) from port A of cell module46.$or$rtl.v:564$480 ($or).
Removed top 17 bits (of 18) from port B of cell module46.$or$rtl.v:564$480 ($or).
Removed top 14 bits (of 18) from port Y of cell module46.$or$rtl.v:564$480 ($or).
Removed top 6 bits (of 18) from mux cell module46.$ternary$rtl.v:576$494 ($mux).
Removed top 7 bits (of 8) from port B of cell module46.$ge$rtl.v:577$499 ($ge).
Removed top 15 bits (of 17) from port A of cell module46.$or$rtl.v:580$503 ($or).
Removed top 14 bits (of 17) from port B of cell module46.$or$rtl.v:580$503 ($or).
Removed top 14 bits (of 17) from port Y of cell module46.$or$rtl.v:580$503 ($or).
Removed top 14 bits (of 17) from port A of cell module46.$not$rtl.v:580$504 ($not).
Removed top 8 bits (of 17) from port Y of cell module46.$not$rtl.v:580$504 ($not).
Removed top 2 bits (of 3) from port A of cell module46.$sshl$rtl.v:593$523 ($sshl).
Removed top 15 bits (of 16) from port A of cell module46.$neg$rtl.v:595$534 ($neg).
Removed top 11 bits (of 20) from mux cell module46.$ternary$rtl.v:598$544 ($mux).
Removed top 16 bits (of 17) from port A of cell module46.$and$rtl.v:603$545 ($and).
Removed top 9 bits (of 17) from port Y of cell module46.$and$rtl.v:603$545 ($and).
Removed top 16 bits (of 17) from port A of cell module46.$le$rtl.v:604$550 ($le).
Removed top 13 bits (of 17) from mux cell module46.$ternary$rtl.v:604$549 ($mux).
Removed top 21 bits (of 22) from mux cell module46.$ternary$rtl.v:605$554 ($mux).
Removed top 2 bits (of 6) from mux cell module46.$ternary$rtl.v:614$569 ($mux).
Removed top 3 bits (of 20) from mux cell module46.$ternary$rtl.v:608$563 ($mux).
Removed top 3 bits (of 6) from port B of cell module46.$gt$rtl.v:613$566 ($gt).
Removed top 13 bits (of 17) from mux cell module46.$ternary$rtl.v:614$570 ($mux).
Removed top 16 bits (of 17) from port A of cell module46.$sub$rtl.v:616$574 ($sub).
Removed top 9 bits (of 17) from port B of cell module46.$sub$rtl.v:616$574 ($sub).
Removed top 1 bits (of 17) from mux cell module46.$ternary$rtl.v:616$579 ($mux).
Removed top 21 bits (of 22) from port B of cell module46.$mul$rtl.v:624$592 ($mul).
Removed top 21 bits (of 22) from port A of cell module46.$mul$rtl.v:624$595 ($mul).
Removed top 6 bits (of 22) from port Y of cell module46.$mul$rtl.v:624$595 ($mul).
Removed top 1 bits (of 17) from mux cell module46.$ternary$rtl.v:631$606 ($mux).
Removed top 18 bits (of 22) from mux cell module46.$procmux$1012 ($mux).
Removed top 7 bits (of 9) from mux cell module46.$procmux$1027 ($mux).
Removed top 11 bits (of 20) from mux cell module46.$procmux$1040 ($mux).
Removed top 18 bits (of 22) from FF cell module46.$procdff$1222 ($dff).
Removed top 18 bits (of 22) from mux cell module46.$ternary$rtl.v:607$557 ($mux).
Removed top 1 bits (of 17) from mux cell module46.$ternary$rtl.v:616$576 ($mux).
Removed top 10 bits (of 22) from mux cell module46.$ternary$rtl.v:624$590 ($mux).
Removed top 1 bits (of 17) from port Y of cell module46.$sub$rtl.v:616$574 ($sub).
Removed top 18 bits (of 22) from wire module46.$0\reg55[21:0].
Removed top 9 bits (of 17) from wire module46.$and$rtl.v:603$545_Y.
Removed top 8 bits (of 9) from wire module46.$logic_and$rtl.v:621$581_Y.
Removed top 17 bits (of 18) from wire module46.$logic_not$rtl.v:564$479_Y.
Removed top 15 bits (of 16) from wire module46.$logic_not$rtl.v:596$535_Y.
Removed top 16 bits (of 17) from wire module46.$logic_not$rtl.v:604$547_Y.
Removed top 9 bits (of 10) from wire module46.$lt$rtl.v:590$513_Y.
Removed top 6 bits (of 22) from wire module46.$mul$rtl.v:624$595_Y.
Removed top 8 bits (of 17) from wire module46.$not$rtl.v:580$504_Y.
Removed top 7 bits (of 9) from wire module46.$procmux$1027_Y.
Removed top 11 bits (of 20) from wire module46.$procmux$1040_Y.
Removed top 21 bits (of 22) from wire module46.$reduce_and$rtl.v:605$552_Y.
Removed top 8 bits (of 9) from wire module46.$reduce_or$rtl.v:593$530_Y.
Removed top 7 bits (of 8) from wire module46.$reduce_xor$rtl.v:577$498_Y.
Removed top 21 bits (of 22) from wire module46.$reduce_xor$rtl.v:624$591_Y.
Removed top 1 bits (of 17) from wire module46.$sub$rtl.v:616$574_Y.
Removed top 6 bits (of 18) from wire module46.$ternary$rtl.v:576$494_Y.
Removed top 1 bits (of 8) from wire module46.$ternary$rtl.v:577$497_Y.
Removed top 6 bits (of 18) from wire module46.$ternary$rtl.v:577$501_Y.
Removed top 11 bits (of 20) from wire module46.$ternary$rtl.v:598$544_Y.
Removed top 13 bits (of 17) from wire module46.$ternary$rtl.v:604$549_Y.
Removed top 21 bits (of 22) from wire module46.$ternary$rtl.v:605$554_Y.
Removed top 18 bits (of 22) from wire module46.$ternary$rtl.v:607$557_Y.
Removed top 3 bits (of 20) from wire module46.$ternary$rtl.v:608$563_Y.
Removed top 1 bits (of 17) from wire module46.$ternary$rtl.v:616$576_Y.
Removed top 1 bits (of 17) from wire module46.$ternary$rtl.v:616$579_Y.
Removed top 10 bits (of 22) from wire module46.$ternary$rtl.v:624$590_Y.
Removed top 14 bits (of 18) from wire module46.wire52.
Removed top 3 bits (of 6) from wire module46.wire53.
Removed top 16 bits (of 17) from wire module46.wire54.
Removed top 3 bits (of 15) from wire module46.wire63.
Removed top 3 bits (of 17) from port B of cell module74.$xor$rtl.v:229$139 ($xor).
Removed top 3 bits (of 17) from port Y of cell module74.$xor$rtl.v:229$139 ($xor).
Removed top 3 bits (of 17) from port A of cell module74.$mul$rtl.v:229$140 ($mul).
Removed top 9 bits (of 17) from mux cell module74.$ternary$rtl.v:233$146 ($mux).
Removed top 3 bits (of 20) from mux cell module74.$ternary$rtl.v:237$154 ($mux).
Removed top 4 bits (of 18) from port A of cell module74.$xor$rtl.v:236$150 ($xor).
Removed top 8 bits (of 18) from port B of cell module74.$xor$rtl.v:236$150 ($xor).
Removed top 4 bits (of 18) from port Y of cell module74.$xor$rtl.v:236$150 ($xor).
Removed top 11 bits (of 33) from mux cell module74.$ternary$rtl.v:239$163 ($mux).
Removed top 39 bits (of 47) from mux cell module74.$ternary$rtl.v:247$172 ($mux).
Removed top 8 bits (of 13) from port A of cell module74.$xor$rtl.v:244$165 ($xor).
Removed top 3 bits (of 20) from port B of cell module74.$xor$rtl.v:244$165 ($xor).
Removed top 3 bits (of 20) from port Y of cell module74.$xor$rtl.v:244$165 ($xor).
Removed top 3 bits (of 20) from port A of cell module74.$xnor$rtl.v:244$166 ($xnor).
Removed top 1 bits (of 2) from port B of cell module74.$xnor$rtl.v:244$166 ($xnor).
Removed top 8 bits (of 9) from port A of cell module74.$not$rtl.v:245$167 ($not).
Removed top 8 bits (of 13) from port B of cell module74.$xnor$rtl.v:247$173 ($xnor).
Removed top 39 bits (of 47) from port A of cell module74.$ne$rtl.v:249$174 ($ne).
Removed top 2 bits (of 18) from mux cell module74.$ternary$rtl.v:257$186 ($mux).
Removed top 8 bits (of 13) from port A of cell module74.$xnor$rtl.v:255$178 ($xnor).
Removed top 2 bits (of 18) from mux cell module74.$ternary$rtl.v:256$181 ($mux).
Removed top 22 bits (of 23) from port B of cell module74.$xor$rtl.v:260$191 ($xor).
Removed top 1 bits (of 22) from mux cell module74.$ternary$rtl.v:261$193 ($mux).
Removed top 3 bits (of 17) from mux cell module74.$ternary$rtl.v:269$204 ($mux).
Removed top 2 bits (of 17) from mux cell module74.$ternary$rtl.v:269$206 ($mux).
Removed top 22 bits (of 30) from port A of cell module74.$sshl$rtl.v:269$207 ($sshl).
Removed top 2 bits (of 17) from port B of cell module74.$sshl$rtl.v:269$207 ($sshl).
Removed top 3 bits (of 20) from port B of cell module74.$and$rtl.v:273$209 ($and).
Removed top 17 bits (of 20) from port Y of cell module74.$and$rtl.v:273$209 ($and).
Removed top 5 bits (of 8) from port A of cell module74.$and$rtl.v:273$209 ($and).
Removed top 14 bits (of 17) from port B of cell module74.$and$rtl.v:273$209 ($and).
Removed top 3 bits (of 4) from mux cell module74.$ternary$rtl.v:280$216 ($mux).
Removed top 18 bits (of 20) from port A of cell module74.$xnor$rtl.v:280$217 ($xnor).
Removed top 19 bits (of 20) from port B of cell module74.$xnor$rtl.v:280$217 ($xnor).
Removed top 4 bits (of 14) from port A of cell module74.$ge$rtl.v:281$219 ($ge).
Removed top 3 bits (of 8) from mux cell module74.$ternary$rtl.v:282$225 ($mux).
Removed top 7 bits (of 8) from port A of cell module74.$ge$rtl.v:290$227 ($ge).
Removed top 20 bits (of 21) from port A of cell module74.$mul$rtl.v:305$234 ($mul).
Removed top 20 bits (of 21) from port B of cell module74.$mul$rtl.v:305$234 ($mul).
Removed top 19 bits (of 21) from port Y of cell module74.$mul$rtl.v:305$234 ($mul).
Removed top 8 bits (of 10) from port A of cell module74.$gt$rtl.v:308$235 ($gt).
Removed top 19 bits (of 21) from port B of cell module74.$gt$rtl.v:308$235 ($gt).
Removed top 23 bits (of 24) from port A of cell module74.$neg$rtl.v:308$236 ($neg).
Removed top 16 bits (of 17) from mux cell module74.$ternary$rtl.v:312$243 ($mux).
Removed top 4 bits (of 17) from mux cell module74.$ternary$rtl.v:314$250 ($mux).
Removed top 19 bits (of 21) from port B of cell module74.$add$rtl.v:317$251 ($add).
Removed top 12 bits (of 21) from port Y of cell module74.$add$rtl.v:317$251 ($add).
Removed top 17 bits (of 18) from port B of cell module74.$shr$rtl.v:318$252 ($shr).
Removed top 2 bits (of 6) from port A of cell module74.$gt$rtl.v:318$259 ($gt).
Removed top 19 bits (of 20) from port B of cell module74.$gt$rtl.v:318$259 ($gt).
Removed top 14 bits (of 21) from mux cell module74.$ternary$rtl.v:318$265 ($mux).
Removed top 14 bits (of 20) from mux cell module74.$ternary$rtl.v:342$291 ($mux).
Removed top 2 bits (of 11) from port A of cell module74.$eq$rtl.v:340$286 ($eq).
Removed top 6 bits (of 7) from port B of cell module74.$or$rtl.v:341$287 ($or).
Removed top 3 bits (of 20) from port A of cell module74.$xnor$rtl.v:342$288 ($xnor).
Removed top 14 bits (of 20) from port Y of cell module74.$xnor$rtl.v:342$288 ($xnor).
Removed top 8 bits (of 13) from port A of cell module74.$or$rtl.v:342$289 ($or).
Removed top 14 bits (of 20) from port Y of cell module74.$or$rtl.v:342$289 ($or).
Removed top 11 bits (of 17) from port B of cell module74.$or$rtl.v:342$289 ($or).
Removed top 1 bits (of 8) from port A of cell module74.$gt$rtl.v:346$294 ($gt).
Removed top 7 bits (of 8) from port B of cell module74.$gt$rtl.v:346$294 ($gt).
Removed top 11 bits (of 21) from port A of cell module74.$xor$rtl.v:349$301 ($xor).
Removed top 19 bits (of 21) from port B of cell module74.$xor$rtl.v:349$301 ($xor).
Removed top 11 bits (of 21) from port Y of cell module74.$xor$rtl.v:349$301 ($xor).
Removed top 11 bits (of 21) from port Y of cell module74.$neg$rtl.v:352$306 ($neg).
Removed top 11 bits (of 21) from port A of cell module74.$neg$rtl.v:352$306 ($neg).
Removed top 6 bits (of 10) from port Y of cell module74.$add$rtl.v:362$310 ($add).
Removed top 6 bits (of 10) from port A of cell module74.$add$rtl.v:362$310 ($add).
Removed top 6 bits (of 10) from port B of cell module74.$add$rtl.v:362$310 ($add).
Removed top 5 bits (of 20) from port B of cell module74.$gt$rtl.v:382$324 ($gt).
Removed top 3 bits (of 20) from port A of cell module74.$neg$rtl.v:382$322 ($neg).
Removed top 2 bits (of 8) from port B of cell module74.$sub$rtl.v:385$325 ($sub).
Removed top 12 bits (of 13) from port B of cell module74.$gt$rtl.v:386$327 ($gt).
Removed top 19 bits (of 20) from mux cell module74.$ternary$rtl.v:386$331 ($mux).
Removed top 19 bits (of 20) from port A of cell module74.$xnor$rtl.v:386$332 ($xnor).
Removed top 13 bits (of 20) from port B of cell module74.$xnor$rtl.v:386$332 ($xnor).
Removed top 10 bits (of 12) from port A of cell module74.$xnor$rtl.v:393$334 ($xnor).
Removed top 15 bits (of 21) from port B of cell module74.$or$rtl.v:395$337 ($or).
Removed top 14 bits (of 15) from port A of cell module74.$xor$rtl.v:395$339 ($xor).
Removed top 3 bits (of 15) from port B of cell module74.$xor$rtl.v:395$339 ($xor).
Removed top 3 bits (of 15) from port Y of cell module74.$xor$rtl.v:395$339 ($xor).
Removed top 8 bits (of 10) from port B of cell module74.$ge$rtl.v:399$344 ($ge).
Removed top 12 bits (of 20) from mux cell module74.$procmux$1070 ($mux).
Removed top 11 bits (of 21) from mux cell module74.$procmux$1103 ($mux).
Removed top 2 bits (of 7) from mux cell module74.$procmux$1160 ($mux).
Removed top 7 bits (of 15) from mux cell module74.$procmux$1180 ($mux).
Removed top 17 bits (of 18) from FF cell module74.$procdff$1233 ($dff).
Removed top 7 bits (of 15) from FF cell module74.$procdff$1242 ($dff).
Removed top 5 bits (of 6) from FF cell module74.$procdff$1250 ($dff).
Removed top 7 bits (of 23) from mux cell module74.$ternary$rtl.v:260$189 ($mux).
Removed cell module74.$shr$rtl.v:313$249 ($shr).
Removed top 14 bits (of 21) from mux cell module74.$ternary$rtl.v:318$257 ($mux).
Removed top 11 bits (of 21) from mux cell module74.$ternary$rtl.v:352$305 ($mux).
Removed top 11 bits (of 21) from port Y of cell module74.$shr$rtl.v:352$304 ($shr).
Removed top 5 bits (of 6) from port B of cell module74.$sub$rtl.v:385$325 ($sub).
Removed cell module74.$not$rtl.v:313$248 ($not).
Removed top 2 bits (of 9) from port Y of cell module74.$add$rtl.v:317$251 ($add).
Removed top 2 bits (of 8) from port A of cell module74.$add$rtl.v:317$251 ($add).
Removed top 14 bits (of 21) from port Y of cell module74.$shr$rtl.v:318$252 ($shr).
Removed top 7 bits (of 15) from wire module74.$0\reg116[14:0].
Removed top 5 bits (of 6) from wire module74.$0\reg124[5:0].
Removed top 17 bits (of 18) from wire module74.$0\reg240[17:0].
Removed top 14 bits (of 21) from wire module74.$add$rtl.v:317$251_Y.
Removed top 6 bits (of 10) from wire module74.$add$rtl.v:362$310_Y.
Removed top 17 bits (of 20) from wire module74.$and$rtl.v:273$209_Y.
Removed top 19 bits (of 20) from wire module74.$logic_and$rtl.v:373$319_Y.
Removed top 19 bits (of 20) from wire module74.$logic_not$rtl.v:237$152_Y.
Removed top 22 bits (of 23) from wire module74.$logic_not$rtl.v:260$190_Y.
Removed top 19 bits (of 20) from wire module74.$logic_not$rtl.v:278$210_Y.
Removed top 12 bits (of 20) from wire module74.$procmux$1070_Y.
Removed top 11 bits (of 21) from wire module74.$procmux$1103_Y.
Removed top 2 bits (of 7) from wire module74.$procmux$1160_Y.
Removed top 11 bits (of 12) from wire module74.$reduce_and$rtl.v:387$333_Y.
Removed top 12 bits (of 13) from wire module74.$reduce_or$rtl.v:386$326_Y.
Removed top 32 bits (of 33) from wire module74.$reduce_xnor$rtl.v:238$161_Y.
Removed top 46 bits (of 47) from wire module74.$reduce_xnor$rtl.v:246$170_Y.
Removed top 20 bits (of 21) from wire module74.$reduce_xor$rtl.v:318$263_Y.
Removed top 20 bits (of 21) from wire module74.$reduce_xor$rtl.v:357$307_Y.
Removed top 14 bits (of 21) from wire module74.$shr$rtl.v:318$252_Y.
Removed top 19 bits (of 30) from wire module74.$sshl$rtl.v:269$207_Y.
Removed top 9 bits (of 17) from wire module74.$ternary$rtl.v:233$146_Y.
Removed top 3 bits (of 20) from wire module74.$ternary$rtl.v:237$154_Y.
Removed top 39 bits (of 47) from wire module74.$ternary$rtl.v:247$172_Y.
Removed top 2 bits (of 18) from wire module74.$ternary$rtl.v:256$181_Y.
Removed top 2 bits (of 18) from wire module74.$ternary$rtl.v:257$186_Y.
Removed top 7 bits (of 23) from wire module74.$ternary$rtl.v:260$189_Y.
Removed top 1 bits (of 22) from wire module74.$ternary$rtl.v:261$193_Y.
Removed top 3 bits (of 17) from wire module74.$ternary$rtl.v:269$204_Y.
Removed top 2 bits (of 17) from wire module74.$ternary$rtl.v:269$206_Y.
Removed top 3 bits (of 4) from wire module74.$ternary$rtl.v:280$216_Y.
Removed top 14 bits (of 21) from wire module74.$ternary$rtl.v:318$257_Y.
Removed top 2 bits (of 16) from wire module74.$ternary$rtl.v:336$280_Y.
Removed top 19 bits (of 20) from wire module74.$ternary$rtl.v:386$331_Y.
Removed top 1 bits (of 17) from wire module74.$xnor$rtl.v:255$178_Y.
Removed top 3 bits (of 17) from wire module74.$xor$rtl.v:229$139_Y.
Removed top 3 bits (of 20) from wire module74.$xor$rtl.v:244$165_Y.
Removed top 3 bits (of 23) from wire module74.$xor$rtl.v:260$191_Y.
Removed top 3 bits (of 15) from wire module74.$xor$rtl.v:395$339_Y.
Removed top 17 bits (of 18) from wire module74.wire158.
Removed top 19 bits (of 21) from wire module74.wire160.
Removed top 8 bits (of 13) from wire module74.wire80.
Removed top 3 bits (of 20) from wire module74.wire81.
Removed top 8 bits (of 10) from wire module74.wire82.
Removed top 8 bits (of 9) from wire module74.wire83.
Removed top 2 bits (of 14) from port B of cell module86.$ne$rtl.v:1038$896 ($ne).
Removed top 3 bits (of 18) from mux cell module86.$ternary$rtl.v:1040$902 ($mux).
Removed top 19 bits (of 22) from port A of cell module86.$add$rtl.v:1047$912 ($add).
Removed top 14 bits (of 22) from port Y of cell module86.$add$rtl.v:1047$912 ($add).
Removed top 14 bits (of 22) from port B of cell module86.$mul$rtl.v:1047$914 ($mul).
Removed top 11 bits (of 22) from port Y of cell module86.$neg$rtl.v:1047$915 ($neg).
Removed top 11 bits (of 22) from port A of cell module86.$neg$rtl.v:1047$915 ($neg).
Removed top 7 bits (of 8) from port B of cell module86.$add$rtl.v:1049$917 ($add).
Removed top 17 bits (of 33) from mux cell module86.$ternary$rtl.v:1056$930 ($mux).
Removed top 7 bits (of 10) from port A of cell module86.$lt$rtl.v:1063$938 ($lt).
Removed top 8 bits (of 9) from mux cell module86.$ternary$rtl.v:1063$940 ($mux).
Removed top 8 bits (of 9) from port A of cell module86.$not$rtl.v:1063$941 ($not).
Removed top 21 bits (of 22) from mux cell module86.$ternary$rtl.v:1064$947 ($mux).
Removed top 2 bits (of 3) from mux cell module86.$ternary$rtl.v:1067$950 ($mux).
Removed top 13 bits (of 14) from port B of cell module86.$xnor$rtl.v:1072$957 ($xnor).
Removed top 13 bits (of 14) from port A of cell module86.$neg$rtl.v:1072$955 ($neg).
Removed top 13 bits (of 14) from mux cell module86.$ternary$rtl.v:1073$962 ($mux).
Removed top 21 bits (of 22) from FF cell module86.$procdff$1182 ($dff).
Removed top 4 bits (of 12) from FF cell module86.$procdff$1184 ($dff).
Removed top 3 bits (of 17) from port Y of cell module86.$neg$rtl.v:1039$901 ($neg).
Removed top 3 bits (of 17) from port A of cell module86.$neg$rtl.v:1039$901 ($neg).
Removed top 11 bits (of 22) from port Y of cell module86.$mul$rtl.v:1047$914 ($mul).
Removed top 3 bits (of 17) from mux cell module86.$ternary$rtl.v:1039$900 ($mux).
Removed top 21 bits (of 22) from wire module86.$0\reg102[21:0].
Removed top 14 bits (of 22) from wire module86.$add$rtl.v:1047$912_Y.
Removed top 20 bits (of 21) from wire module86.$logic_not$rtl.v:1043$904_Y.
Removed top 13 bits (of 14) from wire module86.$logic_not$rtl.v:1072$956_Y.
Removed top 11 bits (of 22) from wire module86.$mul$rtl.v:1047$914_Y.
Removed top 3 bits (of 17) from wire module86.$neg$rtl.v:1039$901_Y.
Removed top 3 bits (of 17) from wire module86.$ternary$rtl.v:1039$900_Y.
Removed top 17 bits (of 33) from wire module86.$ternary$rtl.v:1056$930_Y.
Removed top 8 bits (of 9) from wire module86.$ternary$rtl.v:1063$940_Y.
Removed top 13 bits (of 14) from wire module86.wire103.
Removed top 8 bits (of 14) from wire module86.wire104.
Removed top 10 bits (of 11) from wire module86.wire105.
Removed top 13 bits (of 14) from wire module86.wire108.
Removed top 11 bits (of 13) from wire module86.wire110.
Removed top 21 bits (of 22) from wire module86.wire93.
Removed top 2 bits (of 3) from wire module86.wire95.
Removed top 10 bits (of 11) from wire module86.wire97.
Removed top 14 bits (of 15) from wire module86.wire98.
Removed top 9 bits (of 21) from port B of cell top.$le$rtl.v:71$9 ($le).
Removed top 10 bits (of 40) from mux cell top.$ternary$rtl.v:73$16 ($mux).
Removed top 19 bits (of 20) from port B of cell top.$sub$rtl.v:73$20 ($sub).
Removed top 27 bits (of 40) from mux cell top.$ternary$rtl.v:74$24 ($mux).
Removed top 1 bits (of 21) from mux cell top.$ternary$rtl.v:76$30 ($mux).
Removed top 6 bits (of 9) from port A of cell top.$sshr$rtl.v:82$50 ($sshr).
Removed top 15 bits (of 16) from port A of cell top.$xnor$rtl.v:83$51 ($xnor).
Removed top 15 bits (of 16) from port B of cell top.$xnor$rtl.v:83$51 ($xnor).
Removed top 6 bits (of 16) from port Y of cell top.$xnor$rtl.v:83$51 ($xnor).
Removed top 16 bits (of 17) from port A of cell top.$ge$rtl.v:85$52 ($ge).
Removed top 3 bits (of 16) from port B of cell top.$xnor$rtl.v:86$55 ($xnor).
Removed top 15 bits (of 16) from port A of cell top.$sshr$rtl.v:86$56 ($sshr).
Removed top 8 bits (of 15) from port A of cell top.$xor$rtl.v:92$65 ($xor).
Removed top 5 bits (of 15) from port Y of cell top.$xor$rtl.v:92$65 ($xor).
Removed top 20 bits (of 21) from port B of cell top.$gt$rtl.v:97$71 ($gt).
Removed top 18 bits (of 19) from port B of cell top.$or$rtl.v:97$72 ($or).
Removed top 17 bits (of 19) from port Y of cell top.$or$rtl.v:97$72 ($or).
Removed top 7 bits (of 20) from port A of cell top.$ge$rtl.v:99$76 ($ge).
Removed top 16 bits (of 17) from port B of cell top.$ge$rtl.v:114$97 ($ge).
Removed top 7 bits (of 8) from port B of cell top.$xor$rtl.v:115$99 ($xor).
Removed top 12 bits (of 20) from port A of cell top.$ne$rtl.v:115$101 ($ne).
Removed top 5 bits (of 8) from mux cell top.$ternary$rtl.v:115$105 ($mux).
Removed top 6 bits (of 12) from mux cell top.$ternary$rtl.v:119$111 ($mux).
Removed top 6 bits (of 12) from mux cell top.$ternary$rtl.v:119$113 ($mux).
Removed top 13 bits (of 21) from port A of cell top.$gt$rtl.v:122$119 ($gt).
Removed top 13 bits (of 14) from port A of cell top.$gt$rtl.v:124$126 ($gt).
Removed top 12 bits (of 13) from FF cell top.$procdff$1251 ($dff).
Removed top 1 bits (of 8) from FF cell top.$procdff$1253 ($dff).
Removed top 2 bits (of 8) from FF cell top.$procdff$1254 ($dff).
Removed top 17 bits (of 19) from FF cell top.$procdff$1255 ($dff).
Removed cell top.$procdff$1258 ($dff).
Removed top 5 bits (of 15) from FF cell top.$procdff$1259 ($dff).
Removed top 27 bits (of 40) from mux cell top.$ternary$rtl.v:74$22 ($mux).
Removed top 5 bits (of 8) from mux cell top.$ternary$rtl.v:115$103 ($mux).
Removed top 17 bits (of 30) from mux cell top.$ternary$rtl.v:73$16 ($mux).
Removed top 7 bits (of 20) from port Y of cell top.$add$rtl.v:74$17 ($add).
Removed top 7 bits (of 20) from port B of cell top.$add$rtl.v:74$17 ($add).
Removed cell top.$sub$rtl.v:73$20 ($sub).
Removed top 5 bits (of 8) from port Y of cell top.$xor$rtl.v:115$99 ($xor).
Removed top 6 bits (of 8) from port A of cell top.$xor$rtl.v:115$99 ($xor).
Removed top 1 bits (of 3) from port Y of cell top.$xor$rtl.v:115$99 ($xor).
Removed cell top.$ternary$rtl.v:72$12 ($mux).
Removed cell top.$neg$rtl.v:73$18 ($neg).
Removed top 5 bits (of 15) from wire top.$0\reg15[14:0].
Removed top 17 bits (of 19) from wire top.$0\reg19[18:0].
Removed top 12 bits (of 13) from wire top.$0\reg250[12:0].
Removed top 2 bits (of 8) from wire top.$0\reg253[7:0].
Removed top 7 bits (of 20) from wire top.$add$rtl.v:74$17_Y.
Removed top 7 bits (of 8) from wire top.$ne$rtl.v:115$101_Y.
Removed top 20 bits (of 21) from wire top.$ne$rtl.v:70$3_Y.
Removed top 39 bits (of 40) from wire top.$reduce_and$rtl.v:70$6_Y.
Removed top 11 bits (of 12) from wire top.$reduce_xnor$rtl.v:119$108_Y.
Removed top 39 bits (of 40) from wire top.$reduce_xnor$rtl.v:73$15_Y.
Removed top 5 bits (of 8) from wire top.$ternary$rtl.v:115$103_Y.
Removed top 6 bits (of 12) from wire top.$ternary$rtl.v:119$111_Y.
Removed top 27 bits (of 40) from wire top.$ternary$rtl.v:73$16_Y.
Removed top 11 bits (of 12) from wire top.wire12.
Removed top 18 bits (of 19) from wire top.wire13.
Removed top 13 bits (of 14) from wire top.wire20.
Removed top 17 bits (of 22) from wire top.wire247.
Removed top 9 bits (of 10) from wire top.wire248.
Removed top 13 bits (of 14) from wire top.wire254.
Removed top 15 bits (of 16) from wire top.wire7.
Removed top 16 bits (of 17) from wire top.wire8.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 209 unused wires.
<suppressed ~12 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~880 debug messages>

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module module125:
  creating $macc model for $add$rtl.v:948$829 ($add).
  creating $macc model for $add$rtl.v:964$861 ($add).
  creating $macc model for $add$rtl.v:972$868 ($add).
  creating $macc model for $add$rtl.v:977$876 ($add).
  creating $macc model for $mul$rtl.v:950$840 ($mul).
  creating $macc model for $neg$rtl.v:963$857 ($neg).
  creating $alu model for $macc $neg$rtl.v:963$857.
  creating $alu model for $macc $add$rtl.v:977$876.
  creating $alu model for $macc $add$rtl.v:972$868.
  creating $alu model for $macc $add$rtl.v:964$861.
  creating $alu model for $macc $add$rtl.v:948$829.
  creating $macc cell for $mul$rtl.v:950$840: $auto$alumacc.cc:354:replace_macc$1432
  creating $alu model for $gt$rtl.v:971$865 ($gt): new $alu
  creating $alu model for $lt$rtl.v:949$835 ($lt): new $alu
  creating $alu model for $lt$rtl.v:965$863 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:965$863: $auto$alumacc.cc:474:replace_alu$1436
  creating $alu cell for $lt$rtl.v:949$835: $auto$alumacc.cc:474:replace_alu$1447
  creating $alu cell for $gt$rtl.v:971$865: $auto$alumacc.cc:474:replace_alu$1458
  creating $alu cell for $add$rtl.v:948$829: $auto$alumacc.cc:474:replace_alu$1471
  creating $alu cell for $add$rtl.v:964$861: $auto$alumacc.cc:474:replace_alu$1474
  creating $alu cell for $add$rtl.v:972$868: $auto$alumacc.cc:474:replace_alu$1477
  creating $alu cell for $add$rtl.v:977$876: $auto$alumacc.cc:474:replace_alu$1480
  creating $alu cell for $neg$rtl.v:963$857: $auto$alumacc.cc:474:replace_alu$1483
  created 8 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module161:
  creating $macc model for $mul$rtl.v:809$721 ($mul).
  creating $macc model for $mul$rtl.v:862$792 ($mul).
  creating $macc model for $sub$rtl.v:825$748 ($sub).
  creating $alu model for $macc $sub$rtl.v:825$748.
  creating $macc cell for $mul$rtl.v:862$792: $auto$alumacc.cc:354:replace_macc$1486
  creating $macc cell for $mul$rtl.v:809$721: $auto$alumacc.cc:354:replace_macc$1487
  creating $alu model for $le$rtl.v:857$775 ($le): new $alu
  creating $alu model for $lt$rtl.v:812$732 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:812$732: $auto$alumacc.cc:474:replace_alu$1490
  creating $alu cell for $le$rtl.v:857$775: $auto$alumacc.cc:474:replace_alu$1501
  creating $alu cell for $sub$rtl.v:825$748: $auto$alumacc.cc:474:replace_alu$1510
  created 3 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module198:
  creating $macc model for $add$rtl.v:696$636 ($add).
  creating $macc model for $add$rtl.v:727$685 ($add).
  creating $macc model for $mul$rtl.v:732$691 ($mul).
  creating $macc model for $neg$rtl.v:709$659 ($neg).
  creating $alu model for $macc $neg$rtl.v:709$659.
  creating $alu model for $macc $add$rtl.v:727$685.
  creating $alu model for $macc $add$rtl.v:696$636.
  creating $macc cell for $mul$rtl.v:732$691: $auto$alumacc.cc:354:replace_macc$1513
  creating $alu model for $gt$rtl.v:701$643 ($gt): new $alu
  creating $alu cell for $gt$rtl.v:701$643: $auto$alumacc.cc:474:replace_alu$1515
  creating $alu cell for $add$rtl.v:696$636: $auto$alumacc.cc:474:replace_alu$1520
  creating $alu cell for $add$rtl.v:727$685: $auto$alumacc.cc:474:replace_alu$1523
  creating $alu cell for $neg$rtl.v:709$659: $auto$alumacc.cc:474:replace_alu$1526
  created 4 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module module21:
  creating $macc model for $add$rtl.v:464$372 ($add).
  creating $macc model for $mul$rtl.v:470$382 ($mul).
  creating $macc model for $mul$rtl.v:515$459 ($mul).
  creating $macc model for $sub$rtl.v:489$414 ($sub).
  creating $alu model for $macc $sub$rtl.v:489$414.
  creating $alu model for $macc $add$rtl.v:464$372.
  creating $macc cell for $mul$rtl.v:470$382: $auto$alumacc.cc:354:replace_macc$1529
  creating $macc cell for $mul$rtl.v:515$459: $auto$alumacc.cc:354:replace_macc$1530
  creating $alu model for $ge$rtl.v:473$391 ($ge): new $alu
  creating $alu model for $ge$rtl.v:496$429 ($ge): new $alu
  creating $alu model for $gt$rtl.v:486$407 ($gt): new $alu
  creating $alu model for $le$rtl.v:465$377 ($le): new $alu
  creating $alu model for $le$rtl.v:475$397 ($le): new $alu
  creating $alu cell for $le$rtl.v:475$397: $auto$alumacc.cc:474:replace_alu$1536
  creating $alu cell for $le$rtl.v:465$377: $auto$alumacc.cc:474:replace_alu$1545
  creating $alu cell for $gt$rtl.v:486$407: $auto$alumacc.cc:474:replace_alu$1558
  creating $alu cell for $ge$rtl.v:496$429: $auto$alumacc.cc:474:replace_alu$1563
  creating $alu cell for $ge$rtl.v:473$391: $auto$alumacc.cc:474:replace_alu$1572
  creating $alu cell for $add$rtl.v:464$372: $auto$alumacc.cc:474:replace_alu$1585
  creating $alu cell for $sub$rtl.v:489$414: $auto$alumacc.cc:474:replace_alu$1588
  created 7 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module46:
  creating $macc model for $mul$rtl.v:624$592 ($mul).
  creating $macc model for $mul$rtl.v:624$595 ($mul).
  creating $macc model for $neg$rtl.v:590$516 ($neg).
  creating $macc model for $neg$rtl.v:595$534 ($neg).
  creating $macc model for $neg$rtl.v:622$582 ($neg).
  creating $macc model for $sub$rtl.v:616$574 ($sub).
  creating $alu model for $macc $sub$rtl.v:616$574.
  creating $alu model for $macc $neg$rtl.v:622$582.
  creating $alu model for $macc $neg$rtl.v:595$534.
  creating $alu model for $macc $neg$rtl.v:590$516.
  creating $macc cell for $mul$rtl.v:624$595: $auto$alumacc.cc:354:replace_macc$1591
  creating $macc cell for $mul$rtl.v:624$592: $auto$alumacc.cc:354:replace_macc$1592
  creating $alu model for $ge$rtl.v:577$499 ($ge): new $alu
  creating $alu model for $ge$rtl.v:610$564 ($ge): new $alu
  creating $alu model for $gt$rtl.v:613$566 ($gt): new $alu
  creating $alu model for $le$rtl.v:604$550 ($le): new $alu
  creating $alu model for $lt$rtl.v:590$513 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:590$513: $auto$alumacc.cc:474:replace_alu$1598
  creating $alu cell for $le$rtl.v:604$550: $auto$alumacc.cc:474:replace_alu$1603
  creating $alu cell for $gt$rtl.v:613$566: $auto$alumacc.cc:474:replace_alu$1612
  creating $alu cell for $ge$rtl.v:610$564: $auto$alumacc.cc:474:replace_alu$1617
  creating $alu cell for $ge$rtl.v:577$499: $auto$alumacc.cc:474:replace_alu$1628
  creating $alu cell for $neg$rtl.v:590$516: $auto$alumacc.cc:474:replace_alu$1637
  creating $alu cell for $neg$rtl.v:595$534: $auto$alumacc.cc:474:replace_alu$1640
  creating $alu cell for $neg$rtl.v:622$582: $auto$alumacc.cc:474:replace_alu$1643
  creating $alu cell for $sub$rtl.v:616$574: $auto$alumacc.cc:474:replace_alu$1646
  created 9 $alu and 2 $macc cells.
Extracting $alu and $macc cells in module module74:
  creating $macc model for $add$rtl.v:317$251 ($add).
  creating $macc model for $add$rtl.v:362$310 ($add).
  creating $macc model for $mul$rtl.v:229$140 ($mul).
  creating $macc model for $mul$rtl.v:300$228 ($mul).
  creating $macc model for $mul$rtl.v:305$234 ($mul).
  creating $macc model for $neg$rtl.v:308$236 ($neg).
  creating $macc model for $neg$rtl.v:352$306 ($neg).
  creating $macc model for $neg$rtl.v:358$308 ($neg).
  creating $macc model for $neg$rtl.v:382$322 ($neg).
  creating $macc model for $neg$rtl.v:395$335 ($neg).
  creating $macc model for $sub$rtl.v:385$325 ($sub).
  creating $alu model for $macc $sub$rtl.v:385$325.
  creating $alu model for $macc $neg$rtl.v:395$335.
  creating $alu model for $macc $neg$rtl.v:382$322.
  creating $alu model for $macc $neg$rtl.v:358$308.
  creating $alu model for $macc $neg$rtl.v:352$306.
  creating $alu model for $macc $neg$rtl.v:308$236.
  creating $alu model for $macc $add$rtl.v:362$310.
  creating $alu model for $macc $add$rtl.v:317$251.
  creating $macc cell for $mul$rtl.v:229$140: $auto$alumacc.cc:354:replace_macc$1649
  creating $macc cell for $mul$rtl.v:305$234: $auto$alumacc.cc:354:replace_macc$1650
  creating $macc cell for $mul$rtl.v:300$228: $auto$alumacc.cc:354:replace_macc$1651
  creating $alu model for $ge$rtl.v:281$219 ($ge): new $alu
  creating $alu model for $ge$rtl.v:290$227 ($ge): new $alu
  creating $alu model for $ge$rtl.v:399$344 ($ge): new $alu
  creating $alu model for $gt$rtl.v:308$235 ($gt): new $alu
  creating $alu model for $gt$rtl.v:318$259 ($gt): new $alu
  creating $alu model for $gt$rtl.v:318$261 ($gt): new $alu
  creating $alu model for $gt$rtl.v:318$262 ($gt): new $alu
  creating $alu model for $gt$rtl.v:346$294 ($gt): new $alu
  creating $alu model for $gt$rtl.v:382$324 ($gt): new $alu
  creating $alu model for $gt$rtl.v:386$327 ($gt): new $alu
  creating $alu model for $le$rtl.v:310$240 ($le): new $alu
  creating $alu cell for $le$rtl.v:310$240: $auto$alumacc.cc:474:replace_alu$1663
  creating $alu cell for $gt$rtl.v:386$327: $auto$alumacc.cc:474:replace_alu$1672
  creating $alu cell for $gt$rtl.v:382$324: $auto$alumacc.cc:474:replace_alu$1677
  creating $alu cell for $gt$rtl.v:346$294: $auto$alumacc.cc:474:replace_alu$1682
  creating $alu cell for $gt$rtl.v:318$262: $auto$alumacc.cc:474:replace_alu$1687
  creating $alu cell for $gt$rtl.v:318$261: $auto$alumacc.cc:474:replace_alu$1692
  creating $alu cell for $gt$rtl.v:318$259: $auto$alumacc.cc:474:replace_alu$1697
  creating $alu cell for $gt$rtl.v:308$235: $auto$alumacc.cc:474:replace_alu$1702
  creating $alu cell for $ge$rtl.v:399$344: $auto$alumacc.cc:474:replace_alu$1713
  creating $alu cell for $ge$rtl.v:290$227: $auto$alumacc.cc:474:replace_alu$1722
  creating $alu cell for $ge$rtl.v:281$219: $auto$alumacc.cc:474:replace_alu$1735
  creating $alu cell for $add$rtl.v:317$251: $auto$alumacc.cc:474:replace_alu$1750
  creating $alu cell for $add$rtl.v:362$310: $auto$alumacc.cc:474:replace_alu$1753
  creating $alu cell for $neg$rtl.v:308$236: $auto$alumacc.cc:474:replace_alu$1756
  creating $alu cell for $neg$rtl.v:352$306: $auto$alumacc.cc:474:replace_alu$1759
  creating $alu cell for $neg$rtl.v:358$308: $auto$alumacc.cc:474:replace_alu$1762
  creating $alu cell for $neg$rtl.v:382$322: $auto$alumacc.cc:474:replace_alu$1765
  creating $alu cell for $neg$rtl.v:395$335: $auto$alumacc.cc:474:replace_alu$1768
  creating $alu cell for $sub$rtl.v:385$325: $auto$alumacc.cc:474:replace_alu$1771
  created 19 $alu and 3 $macc cells.
Extracting $alu and $macc cells in module module86:
  creating $macc model for $add$rtl.v:1047$912 ($add).
  creating $macc model for $add$rtl.v:1049$917 ($add).
  creating $macc model for $mul$rtl.v:1047$914 ($mul).
  creating $macc model for $neg$rtl.v:1039$901 ($neg).
  creating $macc model for $neg$rtl.v:1047$915 ($neg).
  creating $macc model for $neg$rtl.v:1072$955 ($neg).
  creating $macc model for $neg$rtl.v:1072$958 ($neg).
  merging $macc model for $mul$rtl.v:1047$914 into $neg$rtl.v:1047$915.
  creating $alu model for $macc $neg$rtl.v:1072$955.
  creating $alu model for $macc $neg$rtl.v:1039$901.
  creating $alu model for $macc $neg$rtl.v:1072$958.
  creating $alu model for $macc $add$rtl.v:1049$917.
  creating $alu model for $macc $add$rtl.v:1047$912.
  creating $macc cell for $neg$rtl.v:1047$915: $auto$alumacc.cc:354:replace_macc$1774
  creating $alu model for $le$rtl.v:1052$926 ($le): new $alu
  creating $alu model for $lt$rtl.v:1038$897 ($lt): new $alu
  creating $alu model for $lt$rtl.v:1063$938 ($lt): new $alu
  creating $alu cell for $lt$rtl.v:1063$938: $auto$alumacc.cc:474:replace_alu$1778
  creating $alu cell for $lt$rtl.v:1038$897: $auto$alumacc.cc:474:replace_alu$1783
  creating $alu cell for $le$rtl.v:1052$926: $auto$alumacc.cc:474:replace_alu$1794
  creating $alu cell for $add$rtl.v:1047$912: $auto$alumacc.cc:474:replace_alu$1807
  creating $alu cell for $add$rtl.v:1049$917: $auto$alumacc.cc:474:replace_alu$1810
  creating $alu cell for $neg$rtl.v:1072$958: $auto$alumacc.cc:474:replace_alu$1813
  creating $alu cell for $neg$rtl.v:1039$901: $auto$alumacc.cc:474:replace_alu$1816
  creating $alu cell for $neg$rtl.v:1072$955: $auto$alumacc.cc:474:replace_alu$1819
  created 8 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$rtl.v:74$17 ($add).
  creating $macc model for $mul$rtl.v:70$8 ($mul).
  creating $macc model for $neg$rtl.v:97$68 ($neg).
  creating $alu model for $macc $neg$rtl.v:97$68.
  creating $alu model for $macc $add$rtl.v:74$17.
  creating $macc cell for $mul$rtl.v:70$8: $auto$alumacc.cc:354:replace_macc$1822
  creating $alu model for $ge$rtl.v:114$97 ($ge): new $alu
  creating $alu model for $ge$rtl.v:82$48 ($ge): new $alu
  creating $alu model for $ge$rtl.v:85$52 ($ge): new $alu
  creating $alu model for $ge$rtl.v:88$63 ($ge): new $alu
  creating $alu model for $ge$rtl.v:99$76 ($ge): new $alu
  creating $alu model for $gt$rtl.v:122$119 ($gt): new $alu
  creating $alu model for $gt$rtl.v:124$126 ($gt): new $alu
  creating $alu model for $gt$rtl.v:97$71 ($gt): new $alu
  creating $alu model for $le$rtl.v:71$9 ($le): new $alu
  creating $alu model for $le$rtl.v:82$49 ($le): new $alu
  creating $alu model for $le$rtl.v:86$54 ($le): new $alu
  creating $alu cell for $le$rtl.v:86$54: $auto$alumacc.cc:474:replace_alu$1834
  creating $alu cell for $le$rtl.v:82$49: $auto$alumacc.cc:474:replace_alu$1847
  creating $alu cell for $le$rtl.v:71$9: $auto$alumacc.cc:474:replace_alu$1856
  creating $alu cell for $gt$rtl.v:97$71: $auto$alumacc.cc:474:replace_alu$1869
  creating $alu cell for $gt$rtl.v:124$126: $auto$alumacc.cc:474:replace_alu$1874
  creating $alu cell for $gt$rtl.v:122$119: $auto$alumacc.cc:474:replace_alu$1885
  creating $alu cell for $ge$rtl.v:99$76: $auto$alumacc.cc:474:replace_alu$1896
  creating $alu cell for $ge$rtl.v:88$63: $auto$alumacc.cc:474:replace_alu$1909
  creating $alu cell for $ge$rtl.v:85$52: $auto$alumacc.cc:474:replace_alu$1922
  creating $alu cell for $ge$rtl.v:82$48: $auto$alumacc.cc:474:replace_alu$1935
  creating $alu cell for $ge$rtl.v:114$97: $auto$alumacc.cc:474:replace_alu$1944
  creating $alu cell for $add$rtl.v:74$17: $auto$alumacc.cc:474:replace_alu$1953
  creating $alu cell for $neg$rtl.v:97$68: $auto$alumacc.cc:474:replace_alu$1956
  created 13 $alu and 1 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module module74 that may be considered for resource sharing.
  Analyzing resource sharing options for $sshl$rtl.v:269$207 ($sshl):
    Found 1 activation_patterns using ctrl signal $ne$rtl.v:249$174_Y.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:352$304 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$1098_CMP $procmux$1064_CMP $reduce_and$rtl.v:351$302_Y }.
    No candidates found.
Found 4 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$rtl.v:70$7 ($sshr):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:74$23_Y.
    No candidates found.
  Analyzing resource sharing options for $sshl$rtl.v:119$107 ($sshl):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:119$112_Y.
    No candidates found.
  Analyzing resource sharing options for $shr$rtl.v:69$1 ($shr):
    Found 1 activation_patterns using ctrl signal $reduce_bool$rtl.v:74$23_Y.
    No candidates found.
  Analyzing resource sharing options for $shl$rtl.v:124$120 ($shl):
    Found 1 activation_patterns using ctrl signal { $auto$rtlil.cc:1832:Not$1895 $reduce_bool$rtl.v:124$121_Y }.
    No candidates found.

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
<suppressed ~11 debug messages>
Optimizing module module161.
<suppressed ~4 debug messages>
Optimizing module module198.
<suppressed ~1 debug messages>
Optimizing module module21.
<suppressed ~3 debug messages>
Optimizing module module46.
<suppressed ~11 debug messages>
Optimizing module module74.
<suppressed ~9 debug messages>
Optimizing module module86.
<suppressed ~5 debug messages>
Optimizing module top.
<suppressed ~10 debug messages>

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:980$879.
    dead port 2/2 on $mux $ternary$rtl.v:980$879.
    dead port 1/2 on $mux $ternary$rtl.v:980$881.
    dead port 2/2 on $mux $ternary$rtl.v:980$881.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:1051$922.
    dead port 2/2 on $mux $ternary$rtl.v:1051$922.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 6 multiplexer ports.
<suppressed ~138 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1461: { $auto$alumacc.cc:490:replace_alu$1459 [0] $auto$alumacc.cc:490:replace_alu$1459 [1] $auto$alumacc.cc:490:replace_alu$1459 [2] $auto$alumacc.cc:490:replace_alu$1459 [3] $auto$alumacc.cc:490:replace_alu$1459 [4] $auto$alumacc.cc:490:replace_alu$1459 [5] $auto$alumacc.cc:490:replace_alu$1459 [6] $auto$alumacc.cc:490:replace_alu$1459 [7] $auto$alumacc.cc:490:replace_alu$1459 [8] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1450: { $auto$alumacc.cc:490:replace_alu$1448 [0] $auto$alumacc.cc:490:replace_alu$1448 [1] $auto$alumacc.cc:490:replace_alu$1448 [2] $auto$alumacc.cc:490:replace_alu$1448 [3] $auto$alumacc.cc:490:replace_alu$1448 [4] $auto$alumacc.cc:490:replace_alu$1448 [5] $auto$alumacc.cc:490:replace_alu$1448 [6] $auto$alumacc.cc:490:replace_alu$1448 [7] $auto$alumacc.cc:490:replace_alu$1448 [8] $auto$alumacc.cc:490:replace_alu$1448 [9] $auto$alumacc.cc:490:replace_alu$1448 [10] $auto$alumacc.cc:490:replace_alu$1448 [11] $auto$alumacc.cc:490:replace_alu$1448 [12] $auto$alumacc.cc:490:replace_alu$1448 [13] $auto$alumacc.cc:490:replace_alu$1448 [14] $auto$alumacc.cc:490:replace_alu$1448 [15] $auto$alumacc.cc:490:replace_alu$1448 [16] $auto$alumacc.cc:490:replace_alu$1448 [17] $auto$alumacc.cc:490:replace_alu$1448 [18] $auto$alumacc.cc:490:replace_alu$1448 [19] }
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
    New input vector for $reduce_or cell $reduce_or$rtl.v:857$784: { $auto$alumacc.cc:490:replace_alu$1502 $auto$rtlil.cc:1832:Not$1505 $ternary$rtl.v:856$783_Y }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1493: { $auto$alumacc.cc:490:replace_alu$1491 [0] $auto$alumacc.cc:490:replace_alu$1491 [1] $auto$alumacc.cc:490:replace_alu$1491 [2] $auto$alumacc.cc:490:replace_alu$1491 [3] $auto$alumacc.cc:490:replace_alu$1491 [4] $auto$alumacc.cc:490:replace_alu$1491 [5] $auto$alumacc.cc:490:replace_alu$1491 [6] }
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1570: { $auto$rtlil.cc:1832:Not$1567 $auto$rtlil.cc:1835:ReduceAnd$1569 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1583: { $auto$rtlil.cc:1832:Not$1582 $auto$rtlil.cc:1835:ReduceAnd$1576 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1541: { $auto$alumacc.cc:490:replace_alu$1537 [0] $auto$alumacc.cc:490:replace_alu$1537 [1] $auto$alumacc.cc:490:replace_alu$1537 [2] $auto$alumacc.cc:490:replace_alu$1537 [3] $auto$alumacc.cc:490:replace_alu$1537 [4] $auto$alumacc.cc:490:replace_alu$1537 [5] $auto$alumacc.cc:490:replace_alu$1537 [6] $auto$alumacc.cc:490:replace_alu$1537 [7] $auto$alumacc.cc:490:replace_alu$1537 [8] $auto$alumacc.cc:490:replace_alu$1537 [9] $auto$alumacc.cc:490:replace_alu$1537 [10] $auto$alumacc.cc:490:replace_alu$1537 [11] $auto$alumacc.cc:490:replace_alu$1537 [12] $auto$alumacc.cc:490:replace_alu$1537 [13] $auto$alumacc.cc:490:replace_alu$1537 [14] $auto$alumacc.cc:490:replace_alu$1537 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1548: { $auto$alumacc.cc:490:replace_alu$1546 [0] $auto$alumacc.cc:490:replace_alu$1546 [1] $auto$alumacc.cc:490:replace_alu$1546 [2] $auto$alumacc.cc:490:replace_alu$1546 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1568: { $auto$alumacc.cc:490:replace_alu$1564 [0] $auto$alumacc.cc:490:replace_alu$1564 [1] $auto$alumacc.cc:490:replace_alu$1564 [2] $auto$alumacc.cc:490:replace_alu$1564 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1575: { $auto$alumacc.cc:490:replace_alu$1573 [0] $auto$alumacc.cc:490:replace_alu$1573 [1] $auto$alumacc.cc:490:replace_alu$1573 [2] $auto$alumacc.cc:490:replace_alu$1573 [3] $auto$alumacc.cc:490:replace_alu$1573 [4] $auto$alumacc.cc:490:replace_alu$1573 [5] $auto$alumacc.cc:490:replace_alu$1573 [6] $auto$alumacc.cc:490:replace_alu$1573 [7] $auto$alumacc.cc:490:replace_alu$1573 [8] $auto$alumacc.cc:490:replace_alu$1573 [9] $auto$alumacc.cc:490:replace_alu$1573 [10] $auto$alumacc.cc:490:replace_alu$1573 [11] $auto$alumacc.cc:490:replace_alu$1573 [12] $auto$alumacc.cc:490:replace_alu$1573 [13] $auto$alumacc.cc:490:replace_alu$1573 [14] }
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1610: { $auto$rtlil.cc:1832:Not$1607 $auto$rtlil.cc:1835:ReduceAnd$1609 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1626: { $auto$rtlil.cc:1864:Xor$1623 $auto$rtlil.cc:1835:ReduceAnd$1625 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1608: { $auto$alumacc.cc:490:replace_alu$1604 [0] $auto$alumacc.cc:490:replace_alu$1604 [1] $auto$alumacc.cc:490:replace_alu$1604 [2] $auto$alumacc.cc:490:replace_alu$1604 [3] $auto$alumacc.cc:490:replace_alu$1604 [4] $auto$alumacc.cc:490:replace_alu$1604 [5] $auto$alumacc.cc:490:replace_alu$1604 [6] $auto$alumacc.cc:490:replace_alu$1604 [7] $auto$alumacc.cc:490:replace_alu$1604 [8] $auto$alumacc.cc:490:replace_alu$1604 [9] $auto$alumacc.cc:490:replace_alu$1604 [10] $auto$alumacc.cc:490:replace_alu$1604 [11] $auto$alumacc.cc:490:replace_alu$1604 [12] $auto$alumacc.cc:490:replace_alu$1604 [13] $auto$alumacc.cc:490:replace_alu$1604 [14] $auto$alumacc.cc:490:replace_alu$1604 [15] $auto$alumacc.cc:490:replace_alu$1604 [16] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1624: { $auto$alumacc.cc:490:replace_alu$1618 [0] $auto$alumacc.cc:490:replace_alu$1618 [1] $auto$alumacc.cc:490:replace_alu$1618 [2] $auto$alumacc.cc:490:replace_alu$1618 [3] $auto$alumacc.cc:490:replace_alu$1618 [4] $auto$alumacc.cc:490:replace_alu$1618 [5] $auto$alumacc.cc:490:replace_alu$1618 [6] $auto$alumacc.cc:490:replace_alu$1618 [7] $auto$alumacc.cc:490:replace_alu$1618 [8] $auto$alumacc.cc:490:replace_alu$1618 [9] $auto$alumacc.cc:490:replace_alu$1618 [10] $auto$alumacc.cc:490:replace_alu$1618 [11] $auto$alumacc.cc:490:replace_alu$1618 [12] $auto$alumacc.cc:490:replace_alu$1618 [13] $auto$alumacc.cc:490:replace_alu$1618 [14] $auto$alumacc.cc:490:replace_alu$1618 [15] $auto$alumacc.cc:490:replace_alu$1618 [16] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1633: { $auto$alumacc.cc:490:replace_alu$1629 [0] $auto$alumacc.cc:490:replace_alu$1629 [1] $auto$alumacc.cc:490:replace_alu$1629 [2] $auto$alumacc.cc:490:replace_alu$1629 [3] $auto$alumacc.cc:490:replace_alu$1629 [4] $auto$alumacc.cc:490:replace_alu$1629 [5] $auto$alumacc.cc:490:replace_alu$1629 [6] $auto$alumacc.cc:490:replace_alu$1629 [7] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
    New input vector for $reduce_or cell $reduce_or$rtl.v:386$326: { \wire81 [0] \wire81 [1] \wire81 [2] \wire81 [3] \wire81 [4] \wire81 [5] \wire81 [6] \wire81 [7] \wire81 [8] \wire81 [9] \wire81 [10] \wire81 [11] \wire81 [12] \wire81 [13] \wire81 [14] \wire81 [15] \wire81 [16] }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1670: { $auto$rtlil.cc:1832:Not$1667 $auto$rtlil.cc:1835:ReduceAnd$1669 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1733: { $auto$rtlil.cc:1832:Not$1732 $auto$rtlil.cc:1835:ReduceAnd$1726 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1668: { $auto$alumacc.cc:490:replace_alu$1664 [0] $auto$alumacc.cc:490:replace_alu$1664 [1] $auto$alumacc.cc:490:replace_alu$1664 [2] $auto$alumacc.cc:490:replace_alu$1664 [3] $auto$alumacc.cc:490:replace_alu$1664 [4] $auto$alumacc.cc:490:replace_alu$1664 [5] $auto$alumacc.cc:490:replace_alu$1664 [6] $auto$alumacc.cc:490:replace_alu$1664 [7] $auto$alumacc.cc:490:replace_alu$1664 [8] $auto$alumacc.cc:490:replace_alu$1664 [9] $auto$alumacc.cc:490:replace_alu$1664 [10] $auto$alumacc.cc:490:replace_alu$1664 [11] $auto$alumacc.cc:490:replace_alu$1664 [12] $auto$alumacc.cc:490:replace_alu$1664 [13] $auto$alumacc.cc:490:replace_alu$1664 [14] $auto$alumacc.cc:490:replace_alu$1664 [15] $auto$alumacc.cc:490:replace_alu$1664 [16] $auto$alumacc.cc:490:replace_alu$1664 [17] $auto$alumacc.cc:490:replace_alu$1664 [18] $auto$alumacc.cc:490:replace_alu$1664 [19] $auto$alumacc.cc:490:replace_alu$1664 [20] $auto$alumacc.cc:490:replace_alu$1664 [21] $auto$alumacc.cc:490:replace_alu$1664 [22] $auto$alumacc.cc:490:replace_alu$1664 [23] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1705: { $auto$alumacc.cc:490:replace_alu$1703 [0] $auto$alumacc.cc:490:replace_alu$1703 [1] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1718: { $auto$alumacc.cc:490:replace_alu$1714 [0] $auto$alumacc.cc:490:replace_alu$1714 [1] $auto$alumacc.cc:490:replace_alu$1714 [2] $auto$alumacc.cc:490:replace_alu$1714 [3] $auto$alumacc.cc:490:replace_alu$1714 [4] $auto$alumacc.cc:490:replace_alu$1714 [5] $auto$alumacc.cc:490:replace_alu$1714 [6] $auto$alumacc.cc:490:replace_alu$1714 [7] $auto$alumacc.cc:490:replace_alu$1714 [8] $auto$alumacc.cc:490:replace_alu$1714 [9] $auto$alumacc.cc:490:replace_alu$1714 [10] $auto$alumacc.cc:490:replace_alu$1714 [11] $auto$alumacc.cc:490:replace_alu$1714 [12] $auto$alumacc.cc:490:replace_alu$1714 [13] $auto$alumacc.cc:490:replace_alu$1714 [14] $auto$alumacc.cc:490:replace_alu$1714 [15] $auto$alumacc.cc:490:replace_alu$1714 [16] $auto$alumacc.cc:490:replace_alu$1714 [17] $auto$alumacc.cc:490:replace_alu$1714 [18] $auto$alumacc.cc:490:replace_alu$1714 [19] $auto$alumacc.cc:490:replace_alu$1714 [20] $auto$alumacc.cc:490:replace_alu$1714 [21] $auto$alumacc.cc:490:replace_alu$1714 [22] $auto$alumacc.cc:490:replace_alu$1714 [23] $auto$alumacc.cc:490:replace_alu$1714 [24] $auto$alumacc.cc:490:replace_alu$1714 [25] $auto$alumacc.cc:490:replace_alu$1714 [26] $auto$alumacc.cc:490:replace_alu$1714 [27] $auto$alumacc.cc:490:replace_alu$1714 [28] $auto$alumacc.cc:490:replace_alu$1714 [29] $auto$alumacc.cc:490:replace_alu$1714 [30] $auto$alumacc.cc:490:replace_alu$1714 [31] $auto$alumacc.cc:490:replace_alu$1714 [32] $auto$alumacc.cc:490:replace_alu$1714 [33] $auto$alumacc.cc:490:replace_alu$1714 [34] $auto$alumacc.cc:490:replace_alu$1714 [35] $auto$alumacc.cc:490:replace_alu$1714 [36] $auto$alumacc.cc:490:replace_alu$1714 [37] $auto$alumacc.cc:490:replace_alu$1714 [38] $auto$alumacc.cc:490:replace_alu$1714 [39] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1725: { $auto$alumacc.cc:490:replace_alu$1723 [0] $auto$alumacc.cc:490:replace_alu$1723 [1] $auto$alumacc.cc:490:replace_alu$1723 [2] $auto$alumacc.cc:490:replace_alu$1723 [3] $auto$alumacc.cc:490:replace_alu$1723 [4] $auto$alumacc.cc:490:replace_alu$1723 [5] $auto$alumacc.cc:490:replace_alu$1723 [6] $auto$alumacc.cc:490:replace_alu$1723 [7] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1738: { $auto$alumacc.cc:490:replace_alu$1736 [0] $auto$alumacc.cc:490:replace_alu$1736 [1] $auto$alumacc.cc:490:replace_alu$1736 [2] $auto$alumacc.cc:490:replace_alu$1736 [3] $auto$alumacc.cc:490:replace_alu$1736 [4] $auto$alumacc.cc:490:replace_alu$1736 [5] $auto$alumacc.cc:490:replace_alu$1736 [6] $auto$alumacc.cc:490:replace_alu$1736 [7] $auto$alumacc.cc:490:replace_alu$1736 [8] $auto$alumacc.cc:490:replace_alu$1736 [9] $auto$alumacc.cc:490:replace_alu$1736 [10] $auto$alumacc.cc:490:replace_alu$1736 [11] $auto$alumacc.cc:490:replace_alu$1736 [12] $auto$alumacc.cc:490:replace_alu$1736 [13] }
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1805: { $auto$rtlil.cc:1832:Not$1804 $auto$rtlil.cc:1835:ReduceAnd$1798 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1797: { $auto$alumacc.cc:490:replace_alu$1795 [0] $auto$alumacc.cc:490:replace_alu$1795 [1] $auto$alumacc.cc:490:replace_alu$1795 [2] $auto$alumacc.cc:490:replace_alu$1795 [3] $auto$alumacc.cc:490:replace_alu$1795 [4] $auto$alumacc.cc:490:replace_alu$1795 [5] $auto$alumacc.cc:490:replace_alu$1795 [6] $auto$alumacc.cc:490:replace_alu$1795 [7] $auto$alumacc.cc:490:replace_alu$1795 [8] $auto$alumacc.cc:490:replace_alu$1795 [9] $auto$alumacc.cc:490:replace_alu$1795 [10] $auto$alumacc.cc:490:replace_alu$1795 [11] $auto$alumacc.cc:490:replace_alu$1795 [12] $auto$alumacc.cc:490:replace_alu$1795 [13] $auto$alumacc.cc:490:replace_alu$1795 [14] $auto$alumacc.cc:490:replace_alu$1795 [15] $auto$alumacc.cc:490:replace_alu$1795 [16] }
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1845: { $auto$rtlil.cc:1832:Not$1844 $auto$rtlil.cc:1835:ReduceAnd$1838 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1867: { $auto$rtlil.cc:1832:Not$1866 $auto$rtlil.cc:1835:ReduceAnd$1860 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$1920: { $auto$rtlil.cc:1832:Not$1919 $auto$rtlil.cc:1835:ReduceAnd$1913 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1940: { $auto$alumacc.cc:490:replace_alu$1936 [0] $auto$alumacc.cc:490:replace_alu$1936 [1] $auto$alumacc.cc:490:replace_alu$1936 [2] $auto$alumacc.cc:490:replace_alu$1936 [3] $auto$alumacc.cc:490:replace_alu$1936 [4] $auto$alumacc.cc:490:replace_alu$1936 [5] $auto$alumacc.cc:490:replace_alu$1936 [6] $auto$alumacc.cc:490:replace_alu$1936 [7] $auto$alumacc.cc:490:replace_alu$1936 [8] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1837: { $auto$alumacc.cc:490:replace_alu$1835 [0] $auto$alumacc.cc:490:replace_alu$1835 [1] $auto$alumacc.cc:490:replace_alu$1835 [2] $auto$alumacc.cc:490:replace_alu$1835 [3] $auto$alumacc.cc:490:replace_alu$1835 [4] $auto$alumacc.cc:490:replace_alu$1835 [5] $auto$alumacc.cc:490:replace_alu$1835 [6] $auto$alumacc.cc:490:replace_alu$1835 [7] $auto$alumacc.cc:490:replace_alu$1835 [8] $auto$alumacc.cc:490:replace_alu$1835 [9] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1949: { $auto$alumacc.cc:490:replace_alu$1945 [0] $auto$alumacc.cc:490:replace_alu$1945 [1] $auto$alumacc.cc:490:replace_alu$1945 [2] $auto$alumacc.cc:490:replace_alu$1945 [3] $auto$alumacc.cc:490:replace_alu$1945 [4] $auto$alumacc.cc:490:replace_alu$1945 [5] $auto$alumacc.cc:490:replace_alu$1945 [6] $auto$alumacc.cc:490:replace_alu$1945 [7] $auto$alumacc.cc:490:replace_alu$1945 [8] $auto$alumacc.cc:490:replace_alu$1945 [9] $auto$alumacc.cc:490:replace_alu$1945 [10] $auto$alumacc.cc:490:replace_alu$1945 [11] $auto$alumacc.cc:490:replace_alu$1945 [12] $auto$alumacc.cc:490:replace_alu$1945 [13] $auto$alumacc.cc:490:replace_alu$1945 [14] $auto$alumacc.cc:490:replace_alu$1945 [15] $auto$alumacc.cc:490:replace_alu$1945 [16] $auto$alumacc.cc:490:replace_alu$1945 [17] $auto$alumacc.cc:490:replace_alu$1945 [18] $auto$alumacc.cc:490:replace_alu$1945 [19] $auto$alumacc.cc:490:replace_alu$1945 [20] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1859: { $auto$alumacc.cc:490:replace_alu$1857 [0] $auto$alumacc.cc:490:replace_alu$1857 [1] $auto$alumacc.cc:490:replace_alu$1857 [2] $auto$alumacc.cc:490:replace_alu$1857 [3] $auto$alumacc.cc:490:replace_alu$1857 [4] $auto$alumacc.cc:490:replace_alu$1857 [5] $auto$alumacc.cc:490:replace_alu$1857 [6] $auto$alumacc.cc:490:replace_alu$1857 [7] $auto$alumacc.cc:490:replace_alu$1857 [8] $auto$alumacc.cc:490:replace_alu$1857 [9] $auto$alumacc.cc:490:replace_alu$1857 [10] $auto$alumacc.cc:490:replace_alu$1857 [11] $auto$alumacc.cc:490:replace_alu$1857 [12] $auto$alumacc.cc:490:replace_alu$1857 [13] $auto$alumacc.cc:490:replace_alu$1857 [14] $auto$alumacc.cc:490:replace_alu$1857 [15] $auto$alumacc.cc:490:replace_alu$1857 [16] $auto$alumacc.cc:490:replace_alu$1857 [17] $auto$alumacc.cc:490:replace_alu$1857 [18] $auto$alumacc.cc:490:replace_alu$1857 [19] $auto$alumacc.cc:490:replace_alu$1857 [20] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1877: { $auto$alumacc.cc:490:replace_alu$1875 [0] $auto$alumacc.cc:490:replace_alu$1875 [1] $auto$alumacc.cc:490:replace_alu$1875 [2] $auto$alumacc.cc:490:replace_alu$1875 [3] $auto$alumacc.cc:490:replace_alu$1875 [4] $auto$alumacc.cc:490:replace_alu$1875 [5] $auto$alumacc.cc:490:replace_alu$1875 [6] $auto$alumacc.cc:490:replace_alu$1875 [7] $auto$alumacc.cc:490:replace_alu$1875 [8] $auto$alumacc.cc:490:replace_alu$1875 [9] $auto$alumacc.cc:490:replace_alu$1875 [10] $auto$alumacc.cc:490:replace_alu$1875 [11] $auto$alumacc.cc:490:replace_alu$1875 [12] $auto$alumacc.cc:490:replace_alu$1875 [13] $auto$alumacc.cc:490:replace_alu$1875 [14] $auto$alumacc.cc:490:replace_alu$1875 [15] $auto$alumacc.cc:490:replace_alu$1875 [16] $auto$alumacc.cc:490:replace_alu$1875 [17] $auto$alumacc.cc:490:replace_alu$1875 [18] $auto$alumacc.cc:490:replace_alu$1875 [19] $auto$alumacc.cc:490:replace_alu$1875 [20] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1888: { $auto$alumacc.cc:490:replace_alu$1886 [0] $auto$alumacc.cc:490:replace_alu$1886 [1] $auto$alumacc.cc:490:replace_alu$1886 [2] $auto$alumacc.cc:490:replace_alu$1886 [3] $auto$alumacc.cc:490:replace_alu$1886 [4] $auto$alumacc.cc:490:replace_alu$1886 [5] $auto$alumacc.cc:490:replace_alu$1886 [6] $auto$alumacc.cc:490:replace_alu$1886 [7] $auto$alumacc.cc:490:replace_alu$1886 [8] $auto$alumacc.cc:490:replace_alu$1886 [9] $auto$alumacc.cc:490:replace_alu$1886 [10] $auto$alumacc.cc:490:replace_alu$1886 [11] $auto$alumacc.cc:490:replace_alu$1886 [12] $auto$alumacc.cc:490:replace_alu$1886 [13] $auto$alumacc.cc:490:replace_alu$1886 [14] $auto$alumacc.cc:490:replace_alu$1886 [15] $auto$alumacc.cc:490:replace_alu$1886 [16] $auto$alumacc.cc:490:replace_alu$1886 [17] $auto$alumacc.cc:490:replace_alu$1886 [18] $auto$alumacc.cc:490:replace_alu$1886 [19] $auto$alumacc.cc:490:replace_alu$1886 [20] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1899: { $auto$alumacc.cc:490:replace_alu$1897 [0] $auto$alumacc.cc:490:replace_alu$1897 [1] $auto$alumacc.cc:490:replace_alu$1897 [2] $auto$alumacc.cc:490:replace_alu$1897 [3] $auto$alumacc.cc:490:replace_alu$1897 [4] $auto$alumacc.cc:490:replace_alu$1897 [5] $auto$alumacc.cc:490:replace_alu$1897 [6] $auto$alumacc.cc:490:replace_alu$1897 [7] $auto$alumacc.cc:490:replace_alu$1897 [8] $auto$alumacc.cc:490:replace_alu$1897 [9] $auto$alumacc.cc:490:replace_alu$1897 [10] $auto$alumacc.cc:490:replace_alu$1897 [11] $auto$alumacc.cc:490:replace_alu$1897 [12] $auto$alumacc.cc:490:replace_alu$1897 [13] $auto$alumacc.cc:490:replace_alu$1897 [14] $auto$alumacc.cc:490:replace_alu$1897 [15] $auto$alumacc.cc:490:replace_alu$1897 [16] $auto$alumacc.cc:490:replace_alu$1897 [17] $auto$alumacc.cc:490:replace_alu$1897 [18] $auto$alumacc.cc:490:replace_alu$1897 [19] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1912: { $auto$alumacc.cc:490:replace_alu$1910 [0] $auto$alumacc.cc:490:replace_alu$1910 [1] $auto$alumacc.cc:490:replace_alu$1910 [2] $auto$alumacc.cc:490:replace_alu$1910 [3] $auto$alumacc.cc:490:replace_alu$1910 [4] $auto$alumacc.cc:490:replace_alu$1910 [5] $auto$alumacc.cc:490:replace_alu$1910 [6] $auto$alumacc.cc:490:replace_alu$1910 [7] $auto$alumacc.cc:490:replace_alu$1910 [8] $auto$alumacc.cc:490:replace_alu$1910 [9] $auto$alumacc.cc:490:replace_alu$1910 [10] $auto$alumacc.cc:490:replace_alu$1910 [11] $auto$alumacc.cc:490:replace_alu$1910 [12] $auto$alumacc.cc:490:replace_alu$1910 [13] $auto$alumacc.cc:490:replace_alu$1910 [14] $auto$alumacc.cc:490:replace_alu$1910 [15] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1925: { $auto$alumacc.cc:490:replace_alu$1923 [0] $auto$alumacc.cc:490:replace_alu$1923 [1] $auto$alumacc.cc:490:replace_alu$1923 [2] $auto$alumacc.cc:490:replace_alu$1923 [3] }
  Optimizing cells in module \top.
Performed a total of 37 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 27 unused cells and 110 unused wires.
<suppressed ~35 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~137 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
<suppressed ~14 debug messages>
Optimizing module module161.
<suppressed ~39 debug messages>
Optimizing module module198.
<suppressed ~11 debug messages>
Optimizing module module21.
<suppressed ~40 debug messages>
Optimizing module module46.
<suppressed ~43 debug messages>
Optimizing module module74.
<suppressed ~137 debug messages>
Optimizing module module86.
<suppressed ~30 debug messages>
Optimizing module top.
<suppressed ~61 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1182 ($dff) from module module86.
Replaced 1 DFF cells.

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 21 unused cells and 134 unused wires.
<suppressed ~34 debug messages>

2.18.5. Rerunning OPT passes. (Removed registers in this run.)

2.18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
<suppressed ~1 debug messages>
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.18.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.18.10. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~126 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:945$828:
      Old ports: A={ 2'00 \wire127 }, B={ \wire127 [9] \wire127 [9] \wire127 }, Y=$ternary$rtl.v:945$828_Y
      New ports: A=1'0, B=\wire127 [9], Y=$ternary$rtl.v:945$828_Y [10]
      New connections: { $ternary$rtl.v:945$828_Y [11] $ternary$rtl.v:945$828_Y [9:0] } = { $ternary$rtl.v:945$828_Y [10] \wire127 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:949$834:
      Old ports: A={ \wire128 [15] \wire128 [15] \wire128 [15] \wire128 [15] \wire128 }, B={ 17'00000000000000000 \y [216:214] }, Y=$ternary$rtl.v:949$834_Y
      New ports: A=\wire128, B={ 13'0000000000000 \y [216:214] }, Y=$ternary$rtl.v:949$834_Y [15:0]
      New connections: $ternary$rtl.v:949$834_Y [19:16] = { $ternary$rtl.v:949$834_Y [15] $ternary$rtl.v:949$834_Y [15] $ternary$rtl.v:949$834_Y [15] $ternary$rtl.v:949$834_Y [15] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:963$856:
      Old ports: A={ \wire136 [8] \wire136 [8] \wire136 [8] \wire136 }, B={ \wire127 [9] \wire127 [9] \wire127 }, Y=$ternary$rtl.v:963$856_Y
      New ports: A={ \wire136 [8] \wire136 }, B=\wire127, Y=$ternary$rtl.v:963$856_Y [9:0]
      New connections: $ternary$rtl.v:963$856_Y [11:10] = { $ternary$rtl.v:963$856_Y [9] $ternary$rtl.v:963$856_Y [9] }
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
    Consolidated identical input bits for $mux cell $procmux$1006:
      Old ports: A={ 8'11111111 $auto$opt_expr.cc:189:group_cell_inputs$1967 [5:0] $auto$opt_expr.cc:189:group_cell_inputs$1967 [6] }, B={ $ternary$rtl.v:834$761_Y [11] $ternary$rtl.v:834$761_Y [11] $ternary$rtl.v:834$761_Y [11] $ternary$rtl.v:834$761_Y }, Y=$procmux$1006_Y
      New ports: A={ 5'11111 $auto$opt_expr.cc:189:group_cell_inputs$1967 [5:0] $auto$opt_expr.cc:189:group_cell_inputs$1967 [6] }, B=$ternary$rtl.v:834$761_Y, Y=$procmux$1006_Y [11:0]
      New connections: $procmux$1006_Y [14:12] = { $procmux$1006_Y [11] $procmux$1006_Y [11] $procmux$1006_Y [11] }
    Consolidated identical input bits for $mux cell $procmux$982:
      Old ports: A={ \wire163 [9] \wire163 [9] \wire163 [9] \wire163 [9:1] }, B={ \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 }, Y=$procmux$982_Y
      New ports: A=\wire163 [9:1], B={ \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 }, Y=$procmux$982_Y [8:0]
      New connections: $procmux$982_Y [11:9] = { $procmux$982_Y [8] $procmux$982_Y [8] $procmux$982_Y [8] }
    Consolidated identical input bits for $mux cell $procmux$988:
      Old ports: A={ \reg176 [4] \reg176 }, B={ 4'0000 \wire165 [2:1] }, Y=$procmux$988_Y
      New ports: A=\reg176, B={ 3'000 \wire165 [2:1] }, Y=$procmux$988_Y [4:0]
      New connections: $procmux$988_Y [5] = $procmux$988_Y [4]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:810$724:
      Old ports: A={ \wire169 [6] \wire169 [6] \wire169 [6] \wire169 [6] \wire169 [6] \wire169 [6] \wire169 [6] }, B={ 6'000000 $auto$wreduce.cc:455:run$1279 [0] }, Y=$ternary$rtl.v:810$724_Y
      New ports: A={ \wire169 [6] \wire169 [6] }, B={ 1'0 $auto$wreduce.cc:455:run$1279 [0] }, Y=$ternary$rtl.v:810$724_Y [1:0]
      New connections: $ternary$rtl.v:810$724_Y [6:2] = { $ternary$rtl.v:810$724_Y [1] $ternary$rtl.v:810$724_Y [1] $ternary$rtl.v:810$724_Y [1] $ternary$rtl.v:810$724_Y [1] $ternary$rtl.v:810$724_Y [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:811$728:
      Old ports: A={ \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] }, B={ \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 [2] \wire165 }, Y=$ternary$rtl.v:811$728_Y
      New ports: A={ \reg170 [0] \reg170 [0] \reg170 [0] }, B=\wire165, Y=$ternary$rtl.v:811$728_Y [2:0]
      New connections: $ternary$rtl.v:811$728_Y [15:3] = { $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] $ternary$rtl.v:811$728_Y [2] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:812$731:
      Old ports: A=7'1011100, B={ 1'0 \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] }, Y=$ternary$rtl.v:812$731_Y [6:0]
      New ports: A=3'110, B={ 1'0 \reg170 [0] \reg170 [0] }, Y={ $ternary$rtl.v:812$731_Y [6] $ternary$rtl.v:812$731_Y [2] $ternary$rtl.v:812$731_Y [0] }
      New connections: { $ternary$rtl.v:812$731_Y [5:3] $ternary$rtl.v:812$731_Y [1] } = { $ternary$rtl.v:812$731_Y [0] $ternary$rtl.v:812$731_Y [2] $ternary$rtl.v:812$731_Y [2] $ternary$rtl.v:812$731_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:814$738:
      Old ports: A={ \wire163 [8] \wire163 [8] \wire163 [8:4] }, B={ 2'00 \wire164 [4:0] }, Y=$ternary$rtl.v:814$738_Y
      New ports: A={ \wire163 [8] \wire163 [8:4] }, B={ 1'0 \wire164 [4:0] }, Y=$ternary$rtl.v:814$738_Y [5:0]
      New connections: $ternary$rtl.v:814$738_Y [6] = $ternary$rtl.v:814$738_Y [5]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:843$765:
      Old ports: A={ \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] \reg170 [0] }, B=16'0000000010110111, Y=$ternary$rtl.v:843$765_Y
      New ports: A={ \reg170 [0] \reg170 [0] }, B=2'01, Y={ $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [0] }
      New connections: { $ternary$rtl.v:843$765_Y [15:4] $ternary$rtl.v:843$765_Y [2:1] } = { $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [0] $ternary$rtl.v:843$765_Y [3] $ternary$rtl.v:843$765_Y [0] $ternary$rtl.v:843$765_Y [0] $ternary$rtl.v:843$765_Y [0] $ternary$rtl.v:843$765_Y [0] }
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:714$664:
      Old ports: A=8'00000000, B=8'10100111, Y=$ternary$rtl.v:714$664_Y
      New ports: A=1'0, B=1'1, Y=$ternary$rtl.v:714$664_Y [0]
      New connections: $ternary$rtl.v:714$664_Y [7:1] = { $ternary$rtl.v:714$664_Y [0] 1'0 $ternary$rtl.v:714$664_Y [0] 2'00 $ternary$rtl.v:714$664_Y [0] $ternary$rtl.v:714$664_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:726$680:
      Old ports: A={ \wire212 [10] \wire212 [10] \wire212 [10] }, B={ 2'00 $reduce_xnor$rtl.v:726$678_Y [0] }, Y=$ternary$rtl.v:726$680_Y
      New ports: A={ \wire212 [10] \wire212 [10] }, B={ 1'0 $reduce_xnor$rtl.v:726$678_Y [0] }, Y=$ternary$rtl.v:726$680_Y [1:0]
      New connections: $ternary$rtl.v:726$680_Y [2] = $ternary$rtl.v:726$680_Y [1]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:731$689:
      Old ports: A={ 3'000 \wire203 }, B={ \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] }, Y=$ternary$rtl.v:731$689_Y
      New ports: A={ 1'0 \wire203 }, B={ \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] \wire212 [10] }, Y=$ternary$rtl.v:731$689_Y [8:0]
      New connections: $ternary$rtl.v:731$689_Y [10:9] = { $ternary$rtl.v:731$689_Y [8] $ternary$rtl.v:731$689_Y [8] }
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:487$410:
      Old ports: A={ 8'10101100 $eq$rtl.v:487$408_Y }, B=9'010100010, Y=$ternary$rtl.v:487$410_Y
      New ports: A={ 2'10 $eq$rtl.v:487$408_Y }, B=3'010, Y={ $ternary$rtl.v:487$410_Y [3] $ternary$rtl.v:487$410_Y [1:0] }
      New connections: { $ternary$rtl.v:487$410_Y [8:4] $ternary$rtl.v:487$410_Y [2] } = { $ternary$rtl.v:487$410_Y [3] $ternary$rtl.v:487$410_Y [1] $ternary$rtl.v:487$410_Y [3] $ternary$rtl.v:487$410_Y [1] $ternary$rtl.v:487$410_Y [3] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:488$413:
      Old ports: A={ 2'00 \reg31 }, B={ \wire23 [9] \wire23 [9] \wire23 [9] \wire23 [9] \wire23 [9] \wire23 }, Y=$ternary$rtl.v:488$413_Y
      New ports: A={ 1'0 \reg31 }, B={ \wire23 [9] \wire23 [9] \wire23 [9] \wire23 [9] \wire23 }, Y=$ternary$rtl.v:488$413_Y [13:0]
      New connections: $ternary$rtl.v:488$413_Y [14] = $ternary$rtl.v:488$413_Y [13]
    Consolidated identical input bits for $mux cell $ternary$rtl.v:502$441:
      Old ports: A={ 14'00000000000000 \reg31 [4:2] }, B=17'11111111110110100, Y=$ternary$rtl.v:502$441_Y
      New ports: A={ 1'0 \reg31 [4:2] }, B=4'1100, Y={ $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [2:0] }
      New connections: { $ternary$rtl.v:502$441_Y [16:5] $ternary$rtl.v:502$441_Y [3] } = { $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] $ternary$rtl.v:502$441_Y [4] 1'0 $ternary$rtl.v:502$441_Y [4] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:503$443:
      Old ports: A={ 4'0000 \reg30 [3:0] }, B=8'10101110, Y=$ternary$rtl.v:503$443_Y [7:0]
      New ports: A={ 1'0 \reg30 [3:0] }, B=5'11110, Y={ $ternary$rtl.v:503$443_Y [5] $ternary$rtl.v:503$443_Y [3:0] }
      New connections: { $ternary$rtl.v:503$443_Y [7:6] $ternary$rtl.v:503$443_Y [4] } = { $ternary$rtl.v:503$443_Y [5] 2'00 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:504$447:
      Old ports: A=4'0000, B={ 1'0 $and$rtl.v:504$444_Y [2:0] }, Y=$auto$wreduce.cc:455:run$1310 [3:0]
      New ports: A=3'000, B=$and$rtl.v:504$444_Y [2:0], Y=$auto$wreduce.cc:455:run$1310 [2:0]
      New connections: $auto$wreduce.cc:455:run$1310 [3] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:504$449:
      Old ports: A={ 9'000000000 $auto$wreduce.cc:455:run$1310 [3:0] }, B=13'0000000000001, Y=\wire38
      New ports: A=$auto$wreduce.cc:455:run$1310 [3:0], B=4'0001, Y=\wire38 [3:0]
      New connections: \wire38 [12:4] = 9'000000000
  Optimizing cells in module \module21.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:504$449:
      Old ports: A=$auto$wreduce.cc:455:run$1310 [3:0], B=4'0001, Y=\wire38 [3:0]
      New ports: A=$auto$wreduce.cc:455:run$1310 [2:0], B=3'001, Y=\wire38 [2:0]
      New connections: \wire38 [3] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:515$458:
      Old ports: A={ \wire25 [3] \wire25 [3] \wire25 [3] \wire25 [3] \wire25 [3] \wire25 [3] \wire25 [3] \wire25 [3] \wire25 [3] \wire25 }, B=\wire38, Y=$ternary$rtl.v:515$458_Y
      New ports: A={ \wire25 [3] \wire25 }, B={ 1'0 \wire38 [3:0] }, Y=$ternary$rtl.v:515$458_Y [4:0]
      New connections: $ternary$rtl.v:515$458_Y [12:5] = { $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] $ternary$rtl.v:515$458_Y [4] }
  Optimizing cells in module \module21.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:515$458:
      Old ports: A={ \wire25 [3] \wire25 }, B={ 1'0 \wire38 [3:0] }, Y=$ternary$rtl.v:515$458_Y [4:0]
      New ports: A=\wire25, B={ 1'0 \wire38 [2:0] }, Y=$ternary$rtl.v:515$458_Y [3:0]
      New connections: $ternary$rtl.v:515$458_Y [4] = $ternary$rtl.v:515$458_Y [3]
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
    New input vector for $reduce_and cell $reduce_and$rtl.v:566$482: { \wire47 [1] \wire47 [2] \wire47 [3] \wire47 [4] \wire47 [5] \wire47 [6] \wire47 [7] \wire47 [8] \wire47 [9] \wire47 [10] \wire47 [11] $auto$opt_expr.cc:189:group_cell_inputs$2012 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:577$497:
      Old ports: A=8'10110101, B={ 5'00000 \wire49 }, Y=$auto$wreduce.cc:455:run$1334
      New ports: A=4'1101, B={ 1'0 \wire49 }, Y={ $auto$wreduce.cc:455:run$1334 [4] $auto$wreduce.cc:455:run$1334 [2:0] }
      New connections: { $auto$wreduce.cc:455:run$1334 [7:5] $auto$wreduce.cc:455:run$1334 [3] } = { $auto$wreduce.cc:455:run$1334 [4] 1'0 $auto$wreduce.cc:455:run$1334 [4] 1'0 }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:577$501:
      Old ports: A={ 6'000000 $auto$wreduce.cc:455:run$1333 [11:0] }, B={ $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 }, Y=$auto$wreduce.cc:455:run$1335
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1333 [11:0] }, B={ $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 $auto$rtlil.cc:1836:ReduceOr$1636 }, Y=$auto$wreduce.cc:455:run$1335 [12:0]
      New connections: $auto$wreduce.cc:455:run$1335 [17:13] = { $auto$wreduce.cc:455:run$1335 [12] $auto$wreduce.cc:455:run$1335 [12] $auto$wreduce.cc:455:run$1335 [12] $auto$wreduce.cc:455:run$1335 [12] $auto$wreduce.cc:455:run$1335 [12] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:590$515:
      Old ports: A={ 9'000000000 $auto$rtlil.cc:1832:Not$1602 }, B={ 6'000000 $and$rtl.v:590$512_Y [3:0] }, Y=$ternary$rtl.v:590$515_Y
      New ports: A={ 3'000 $auto$rtlil.cc:1832:Not$1602 }, B=$and$rtl.v:590$512_Y [3:0], Y=$ternary$rtl.v:590$515_Y [3:0]
      New connections: $ternary$rtl.v:590$515_Y [9:4] = 6'000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:607$559:
      Old ports: A={ 3'000 \wire49 \reg59 }, B={ 18'000000000000000000 $auto$wreduce.cc:455:run$1339 [3:0] }, Y=$ternary$rtl.v:607$559_Y
      New ports: A={ \wire49 \reg59 }, B={ 15'000000000000000 $auto$wreduce.cc:455:run$1339 [3:0] }, Y=$ternary$rtl.v:607$559_Y [18:0]
      New connections: $ternary$rtl.v:607$559_Y [21:19] = 3'000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:616$579:
      Old ports: A=16'0000000010100000, B=16'0000000010011111, Y=$auto$wreduce.cc:455:run$1342 [15:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:455:run$1342 [5] $auto$wreduce.cc:455:run$1342 [0] }
      New connections: { $auto$wreduce.cc:455:run$1342 [15:6] $auto$wreduce.cc:455:run$1342 [4:1] } = { 10'0000000010 $auto$wreduce.cc:455:run$1342 [0] $auto$wreduce.cc:455:run$1342 [0] $auto$wreduce.cc:455:run$1342 [0] $auto$wreduce.cc:455:run$1342 [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:631$606:
      Old ports: A={ $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y }, B={ 15'000000000000000 \wire54 }, Y=$0\reg62[15:0]
      New ports: A={ $reduce_xnor$rtl.v:631$604_Y $reduce_xnor$rtl.v:631$604_Y }, B={ 1'0 \wire54 }, Y=$0\reg62[15:0] [1:0]
      New connections: $0\reg62[15:0] [15:2] = { $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] $0\reg62[15:0] [1] }
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
    Consolidated identical input bits for $mux cell $procmux$1066:
      Old ports: A={ 13'1111111111111 $auto$opt_expr.cc:189:group_cell_inputs$2066 $auto$opt_expr.cc:189:group_cell_inputs$2064 }, B=20'00000000000000000000, Y=$procmux$1066_Y
      New ports: A={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$2066 $auto$opt_expr.cc:189:group_cell_inputs$2064 }, B=8'00000000, Y=$procmux$1066_Y [7:0]
      New connections: $procmux$1066_Y [19:8] = { $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] $procmux$1066_Y [7] }
    Consolidated identical input bits for $mux cell $procmux$1070:
      Old ports: A=8'10111101, B={ 7'0000000 \wire85 [0] }, Y=$auto$wreduce.cc:455:run$1358 [7:0]
      New ports: A=2'11, B={ 1'0 \wire85 [0] }, Y={ $auto$wreduce.cc:455:run$1358 [2] $auto$wreduce.cc:455:run$1358 [0] }
      New connections: { $auto$wreduce.cc:455:run$1358 [7:3] $auto$wreduce.cc:455:run$1358 [1] } = { $auto$wreduce.cc:455:run$1358 [2] 1'0 $auto$wreduce.cc:455:run$1358 [2] $auto$wreduce.cc:455:run$1358 [2] $auto$wreduce.cc:455:run$1358 [2] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$1075:
      Old ports: A={ 11'00000000000 $auto$wreduce.cc:455:run$1361 [0] }, B={ 7'1111111 $auto$opt_expr.cc:189:group_cell_inputs$2072 $auto$opt_expr.cc:189:group_cell_inputs$2070 }, Y=$procmux$1075_Y
      New ports: A={ 5'00000 $auto$wreduce.cc:455:run$1361 [0] }, B={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$2072 $auto$opt_expr.cc:189:group_cell_inputs$2070 }, Y=$procmux$1075_Y [5:0]
      New connections: $procmux$1075_Y [11:6] = { $procmux$1075_Y [5] $procmux$1075_Y [5] $procmux$1075_Y [5] $procmux$1075_Y [5] $procmux$1075_Y [5] $procmux$1075_Y [5] }
    Consolidated identical input bits for $mux cell $procmux$1109:
      Old ports: A={ $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y }, B=19'0000000000000000011, Y=$procmux$1109_Y
      New ports: A={ $neg$rtl.v:358$308_Y [1] $neg$rtl.v:358$308_Y }, B=3'011, Y=$procmux$1109_Y [2:0]
      New connections: $procmux$1109_Y [18:3] = { $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] $procmux$1109_Y [2] }
    Consolidated identical input bits for $mux cell $procmux$1127:
      Old ports: A={ \reg236 [19] \reg236 [19] \reg236 }, B={ \reg118 [15] \reg118 [15] \reg118 [15] \reg118 [15] \reg118 [15] \reg118 [15] \reg118 }, Y=$procmux$1127_Y
      New ports: A=\reg236, B={ \reg118 [15] \reg118 [15] \reg118 [15] \reg118 [15] \reg118 }, Y=$procmux$1127_Y [19:0]
      New connections: $procmux$1127_Y [21:20] = { $procmux$1127_Y [19] $procmux$1127_Y [19] }
    Consolidated identical input bits for $mux cell $procmux$1133:
      Old ports: A={ 19'0000000000000000000 \reg238 [15] }, B={ $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y }, Y=$procmux$1133_Y
      New ports: A={ 1'0 \reg238 [15] }, B={ $reduce_xnor$rtl.v:366$311_Y $reduce_xnor$rtl.v:366$311_Y }, Y=$procmux$1133_Y [1:0]
      New connections: $procmux$1133_Y [19:2] = { $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] $procmux$1133_Y [1] }
    Consolidated identical input bits for $mux cell $procmux$1166:
      Old ports: A={ 19'0000000000000000000 $auto$wreduce.cc:455:run$1357 [0] }, B={ \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8] \wire85 [8:0] }, Y=$0\reg120[19:0]
      New ports: A={ 8'00000000 $auto$wreduce.cc:455:run$1357 [0] }, B=\wire85 [8:0], Y=$0\reg120[19:0] [8:0]
      New connections: $0\reg120[19:0] [19:9] = { $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] $0\reg120[19:0] [8] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:239$163:
      Old ports: A={ \wire81 [8:0] 8'00000000 \wire78 [9:5] }, B={ 21'000000000000000000000 $auto$wreduce.cc:455:run$1363 [0] }, Y=\wire85
      New ports: A={ \wire81 [8:0] \wire78 [9:5] }, B={ 13'0000000000000 $auto$wreduce.cc:455:run$1363 [0] }, Y={ \wire85 [21:13] \wire85 [4:0] }
      New connections: \wire85 [12:5] = 8'00000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:260$189:
      Old ports: A=16'0000000010111100, B={ \reg116 [7:0] 8'10011110 }, Y={ $auto$opt_expr.cc:189:group_cell_inputs$2048 $auto$wreduce.cc:455:run$1374 [0] }
      New ports: A=10'0000000010, B={ \reg116 [7:0] 2'01 }, Y={ $auto$opt_expr.cc:189:group_cell_inputs$2048 [14:7] $auto$opt_expr.cc:189:group_cell_inputs$2048 [4] $auto$opt_expr.cc:189:group_cell_inputs$2048 [0] }
      New connections: { $auto$opt_expr.cc:189:group_cell_inputs$2048 [6:5] $auto$opt_expr.cc:189:group_cell_inputs$2048 [3:1] $auto$wreduce.cc:455:run$1374 [0] } = 6'101110
    Consolidated identical input bits for $mux cell $ternary$rtl.v:282$225:
      Old ports: A=5'11110, B={ 4'0000 $logic_not$rtl.v:282$222_Y }, Y=$ternary$rtl.v:282$225_Y [4:0]
      New ports: A=2'10, B={ 1'0 $logic_not$rtl.v:282$222_Y }, Y=$ternary$rtl.v:282$225_Y [1:0]
      New connections: $ternary$rtl.v:282$225_Y [4:2] = { $ternary$rtl.v:282$225_Y [1] $ternary$rtl.v:282$225_Y [1] $ternary$rtl.v:282$225_Y [1] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:327$270:
      Old ports: A={ 27'101001010000000000000000000 \wire160 }, B={ 21'000000000000000000000 \reg116 [7:0] }, Y=$ternary$rtl.v:327$270_Y
      New ports: A={ 7'1000000 \wire160 }, B={ 1'0 \reg116 [7:0] }, Y={ $ternary$rtl.v:327$270_Y [21] $ternary$rtl.v:327$270_Y [7:0] }
      New connections: { $ternary$rtl.v:327$270_Y [28:22] $ternary$rtl.v:327$270_Y [20:8] } = { $ternary$rtl.v:327$270_Y [21] 1'0 $ternary$rtl.v:327$270_Y [21] 2'00 $ternary$rtl.v:327$270_Y [21] 14'00000000000000 }
  Optimizing cells in module \module74.
    Consolidated identical input bits for $mux cell $procmux$1072:
      Old ports: A=$procmux$1066_Y, B={ 12'000000000000 $auto$wreduce.cc:455:run$1358 [7:0] }, Y=$0\reg228[19:0]
      New ports: A={ $procmux$1066_Y [7] $procmux$1066_Y [7:0] }, B={ 1'0 $auto$wreduce.cc:455:run$1358 [2] 1'0 $auto$wreduce.cc:455:run$1358 [2] $auto$wreduce.cc:455:run$1358 [2] $auto$wreduce.cc:455:run$1358 [2] $auto$wreduce.cc:455:run$1358 [2] 1'0 $auto$wreduce.cc:455:run$1358 [0] }, Y=$0\reg228[19:0] [8:0]
      New connections: $0\reg228[19:0] [19:9] = { $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] $0\reg228[19:0] [8] }
    Consolidated identical input bits for $mux cell $procmux$1160:
      Old ports: A=$ternary$rtl.v:282$225_Y [4:0], B={ 4'0000 \wire78 [6] }, Y=$0\reg121[6:0] [4:0]
      New ports: A=$ternary$rtl.v:282$225_Y [1:0], B={ 1'0 \wire78 [6] }, Y=$0\reg121[6:0] [1:0]
      New connections: $0\reg121[6:0] [4:2] = { $0\reg121[6:0] [1] $0\reg121[6:0] [1] $0\reg121[6:0] [1] }
    Consolidated identical input bits for $mux cell $procmux$1166:
      Old ports: A={ 8'00000000 $auto$wreduce.cc:455:run$1357 [0] }, B=\wire85 [8:0], Y=$0\reg120[19:0] [8:0]
      New ports: A={ 4'0000 $auto$wreduce.cc:455:run$1357 [0] }, B=\wire85 [4:0], Y=$0\reg120[19:0] [4:0]
      New connections: $0\reg120[19:0] [8:5] = 4'0000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:261$193:
      Old ports: A=21'000000000000001000011, B=\wire85 [20:0], Y=$0\reg119[20:0]
      New ports: A=14'00000000100011, B={ \wire85 [20:13] 1'0 \wire85 [4:0] }, Y={ $0\reg119[20:0] [20:13] $0\reg119[20:0] [6] $0\reg119[20:0] [4:0] }
      New connections: { $0\reg119[20:0] [12:7] $0\reg119[20:0] [5] } = 7'0000000
    Consolidated identical input bits for $mux cell $ternary$rtl.v:312$243:
      Old ports: A=\wire85 [8], B=1'0, Y=$ternary$rtl.v:312$243_Y [0]
      New ports: A={ }, B={ }, Y={ }
      New connections: $ternary$rtl.v:312$243_Y [0] = 1'0
    New ctrl vector for $mux cell $ternary$rtl.v:312$243: { }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:328$272:
      Old ports: A=22'0000000000000000000000, B=\wire85, Y=$ternary$rtl.v:328$272_Y
      New ports: A=14'00000000000000, B={ \wire85 [21:13] \wire85 [4:0] }, Y={ $ternary$rtl.v:328$272_Y [21:13] $ternary$rtl.v:328$272_Y [4:0] }
      New connections: $ternary$rtl.v:328$272_Y [12:5] = 8'00000000
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:101$78:
      Old ports: A=40'0000000000000000000000000000000000000111, B={ \reg18 \wire2 14'00000000000000 }, Y=$ternary$rtl.v:101$78_Y
      New ports: A=27'000000000000000000000000001, B={ \reg18 \wire2 1'0 }, Y={ $ternary$rtl.v:101$78_Y [39:14] $ternary$rtl.v:101$78_Y [0] }
      New connections: $ternary$rtl.v:101$78_Y [13:1] = { 11'00000000000 $ternary$rtl.v:101$78_Y [0] $ternary$rtl.v:101$78_Y [0] }
    Consolidated identical input bits for $mux cell $ternary$rtl.v:115$103:
      Old ports: A={ 2'00 $auto$wreduce.cc:455:run$1416 [0] }, B={ 2'01 $auto$opt_expr.cc:189:group_cell_inputs$2112 }, Y=$auto$wreduce.cc:455:run$1421 [2:0]
      New ports: A={ 1'0 $auto$wreduce.cc:455:run$1416 [0] }, B={ 1'1 $auto$opt_expr.cc:189:group_cell_inputs$2112 }, Y=$auto$wreduce.cc:455:run$1421 [1:0]
      New connections: $auto$wreduce.cc:455:run$1421 [2] = 1'0
    Consolidated identical input bits for $mux cell $ternary$rtl.v:87$59:
      Old ports: A={ 6'111111 \wire10 [0] }, B={ 6'000000 $reduce_xor$rtl.v:87$57_Y [0] }, Y=$ternary$rtl.v:87$59_Y
      New ports: A={ 1'1 \wire10 [0] }, B={ 1'0 $reduce_xor$rtl.v:87$57_Y [0] }, Y=$ternary$rtl.v:87$59_Y [1:0]
      New connections: $ternary$rtl.v:87$59_Y [6:2] = { $ternary$rtl.v:87$59_Y [1] $ternary$rtl.v:87$59_Y [1] $ternary$rtl.v:87$59_Y [1] $ternary$rtl.v:87$59_Y [1] $ternary$rtl.v:87$59_Y [1] }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$rtl.v:115$105:
      Old ports: A=$auto$wreduce.cc:455:run$1421 [2:0], B={ 2'00 $auto$rtlil.cc:1836:ReduceOr$1952 }, Y=$0\reg251[2:0]
      New ports: A=$auto$wreduce.cc:455:run$1421 [1:0], B={ 1'0 $auto$rtlil.cc:1836:ReduceOr$1952 }, Y=$0\reg251[2:0] [1:0]
      New connections: $0\reg251[2:0] [2] = 1'0
  Optimizing cells in module \top.
Performed a total of 52 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
<suppressed ~1 debug messages>
Optimizing module module161.
Optimizing module module198.
<suppressed ~2 debug messages>
Optimizing module module21.
<suppressed ~3 debug messages>
Optimizing module module46.
Optimizing module module74.
<suppressed ~5 debug messages>
Optimizing module module86.
Optimizing module top.
<suppressed ~1 debug messages>

2.20.9. Rerunning OPT passes. (Maybe there is more to do..)

2.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$rtl.v:260$189.
    dead port 2/2 on $mux $ternary$rtl.v:260$189.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~122 debug messages>

2.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 8 unused wires.
<suppressed ~5 debug messages>

2.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.20.16. Rerunning OPT passes. (Maybe there is more to do..)

2.20.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \module125..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module161..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module198..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module21..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module46..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module74..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \module86..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~122 debug messages>

2.20.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \module125.
  Optimizing cells in module \module161.
  Optimizing cells in module \module198.
  Optimizing cells in module \module21.
  Optimizing cells in module \module46.
  Optimizing cells in module \module74.
  Optimizing cells in module \module86.
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.20.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.20.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.20.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.20.23. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using template $paramod$constmap:de2a84e7eedc86f62cbc2746f50379ccd4071f46$paramod$e3e67868007c9bfcd6f31ff6b07356a2fd38b4bc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$constmap:18677ab0b74b9c86009aecf485965cc775fc9f56$paramod$4a2a3111cca63dcc3cf3623ad755308e581ee2fd\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_xnor.
Using extmapper simplemap for cells of type $not.
Using template $paramod$constmap:53dd7474efe17683cc4fd1b310bd5d600ce2a172$paramod$baeb66e601511da7ced20651f8f59a59b3465cd0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:01da80f9b2197f9bd6e791c638fda3a9a8ce2dcf$paramod$e4cc8c08f17c0522c43a36de5e175a41fea8882b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:8f8870283b47e01426bc966fa02a92d5db46e231$paramod$c8f994e8f4e4efc1f38de502d745c7ffe3b2581b\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:68c2633430cfc9346a73554e797227de0a1adef8$paramod$ca15e77f4b3423e3c33275f76b29c08932a0a0b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:e64487ccfc499131c9f56e239d0aee8b8437d1aa$paramod$1ebcee67ed9248d4a9473218a15918e789ac471d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xnor.
Using extmapper maccmap for cells of type $macc.
  add $sshr$rtl.v:70$7_Y * \wire2 [14:10] (10x5 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=10 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=20 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=21 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=10 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
  add { $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [12] $ternary$rtl.v:515$458_Y [2:0] } * 1'0 (13x1 bits, unsigned)
  add 8'10111100 * \wire25 (8x4 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=13\B_WIDTH=21\Y_WIDTH=21 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=10\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=4\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=15 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=11 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=10\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=6\Y_WIDTH=7 for cells of type $alu.
Using template $paramod$constmap:e58604395c99ad3de78e85be9f8e94d7a93cb4c4$paramod$bdfe17a7a4021441b13076d29d5d259cca0debb1\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod$constmap:046e9cacb9fb0918cc14bf3a6e0ebc076ac4dc68$paramod$96080a091cbb15046f9e493bdf1fae6cae177a47\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=40\Y_WIDTH=40 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using template $paramod$constmap:7e4da0492974c793295fb279f25ee349803d9160$paramod$756bec5122623399244e776ea03adeddc9499bd5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=17\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
  add $auto$wreduce.cc:455:run$1383 [13:0] * \wire76 [5:2] (14x4 bits, unsigned)
  add \wire113 * 3'000 (22x3 bits, unsigned)
  add $reduce_and$rtl.v:305$232_Y * $logic_not$rtl.v:305$233_Y [0] (1x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=24\B_WIDTH=24\Y_WIDTH=24 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=24 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=40 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=17 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=22 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=22\B_WIDTH=22\Y_WIDTH=22 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=17 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=22 for cells of type $lcu.
  add { $ternary$rtl.v:860$787_Y 7'1000011 } * \reg174 (19x12 bits, unsigned)
  add $reduce_xnor$rtl.v:809$719_Y * $logic_or$rtl.v:809$720_Y (1x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=1\Y_WIDTH=21 for cells of type $alu.
Using template $paramod$constmap:815cc7485588a64bc62599a9bada5e51195aa96d$paramod$39fa5ace3493c4564183a2149470cf6528acc8fc\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:ce4e4e802ee3c9ae6793a2ab026cfaa0590128b5$paramod$7b908ef314978932f6eaf6bacaa996cacf43335a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:6e62baa9811b7fa751bf47bf61401a559316d64f$paramod$bf2c5cf7d26022013e7d0a3e13e333d85c7108d4\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:62cf16275699a750bb6c55f2649739a09f87a4d9$paramod$2760b41ee339f3fd298d1a8238a1d0731adf79c3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:c5197302151749e9e2ae29f9f1379065303d08ed$paramod$2686c8dd9550b09c26f722624bbcfc2b45def60a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_fa\WIDTH=16 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=7\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=14\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
  sub { 14'11111111111111 $auto$opt_expr.cc:189:group_cell_inputs$2087 [7] $auto$opt_expr.cc:189:group_cell_inputs$2087 [2] $auto$opt_expr.cc:189:group_cell_inputs$2087 [6:5] $auto$opt_expr.cc:189:group_cell_inputs$2087 [1] $auto$opt_expr.cc:189:group_cell_inputs$2087 [4:3] $auto$opt_expr.cc:189:group_cell_inputs$2087 [0] } * 8'10110101 (22x8 bits, unsigned)
Using template $paramod$constmap:49c6a9df50fba8f990660d29defffd9d7ebf582b$paramod$0b2865cdd34f3eaa520b53fab1b0ffab90caa1e3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_fa\WIDTH=11 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=11\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=5\Y_WIDTH=6 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=9\Y_WIDTH=10 for cells of type $alu.
  add \wire129 * { 2'00 \y [216:214] \wire128 [9:2] } (21x13 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=20\Y_WIDTH=20 for cells of type $alu.
Using template $paramod$constmap:e921d7f2614ece78aa3e6a21ec30a0778151a0ae$paramod$65eddc8ad8c5958511b2fa806a8d2562c7526b48\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:1141b6c6533b5345d089e318e6bc1f49745f2cf9$paramod$8fb092c7fd12303af802df333708f08f432ade8a\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_lcu\WIDTH=6 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=12 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=9 for cells of type $fa.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
  add $auto$wreduce.cc:455:run$1297 [7:0] * \reg218 [0] (8x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod$constmap:f1ee8b210eb7414a4f771d253b9f9696317e96ed$paramod$ca9e007947ca2399cef9351692a15a68114d1fa3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
  add $ternary$rtl.v:624$594_Y * $logic_and$rtl.v:622$583_Y (22x1 bits, unsigned)
  add $auto$wreduce.cc:455:run$1343 [11:0] * $auto$wreduce.cc:455:run$1331 [0] (12x1 bits, unsigned)
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=12\Y_WIDTH=12 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=4\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod$constmap:c989bb4a80ab94d92b6da8dde85b3517670b8fde$paramod$72c87d853c30c89340e763ae6c197b32cca31b3d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:b1ef4212724434793a2b762d95f3632218ead469$paramod$73052e5241c5508c8f88d06f98f17274c32344ef\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=0\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
No more expansions possible.
<suppressed ~12626 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
<suppressed ~644 debug messages>
Optimizing module module161.
<suppressed ~980 debug messages>
Optimizing module module198.
<suppressed ~229 debug messages>
Optimizing module module21.
<suppressed ~524 debug messages>
Optimizing module module46.
<suppressed ~559 debug messages>
Optimizing module module74.
<suppressed ~1746 debug messages>
Optimizing module module86.
<suppressed ~973 debug messages>
Optimizing module top.
<suppressed ~1089 debug messages>

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
<suppressed ~177 debug messages>
Finding identical cells in module `\module161'.
<suppressed ~264 debug messages>
Finding identical cells in module `\module198'.
<suppressed ~237 debug messages>
Finding identical cells in module `\module21'.
<suppressed ~213 debug messages>
Finding identical cells in module `\module46'.
<suppressed ~381 debug messages>
Finding identical cells in module `\module74'.
<suppressed ~825 debug messages>
Finding identical cells in module `\module86'.
<suppressed ~81 debug messages>
Finding identical cells in module `\top'.
<suppressed ~708 debug messages>
Removed a total of 962 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$21548 ($_DFF_P_) from module module125.
Removing $auto$simplemap.cc:420:simplemap_dff$17501 ($_DFF_P_) from module module161.
Removing $auto$simplemap.cc:420:simplemap_dff$12442 ($_DFF_P_) from module module74.
Removing $auto$simplemap.cc:420:simplemap_dff$19337 ($_DFF_P_) from module module86.
Removing $auto$simplemap.cc:420:simplemap_dff$4660 ($_DFF_P_) from module top.
Replaced 5 DFF cells.

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 1596 unused cells and 4684 unused wires.
<suppressed ~1604 debug messages>

2.22.5. Rerunning OPT passes. (Removed registers in this run.)

2.22.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
<suppressed ~2 debug messages>
Optimizing module module161.
<suppressed ~5 debug messages>
Optimizing module module198.
<suppressed ~2 debug messages>
Optimizing module module21.
<suppressed ~1 debug messages>
Optimizing module module46.
<suppressed ~7 debug messages>
Optimizing module module74.
<suppressed ~64 debug messages>
Optimizing module module86.
Optimizing module top.
<suppressed ~7 debug messages>

2.22.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
<suppressed ~27 debug messages>
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 9 cells.

2.22.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 14 unused cells and 37 unused wires.
<suppressed ~18 debug messages>

2.22.10. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\module125' to `<abc-temp-dir>/input.blif'..
Extracted 618 gates and 673 wires to a netlist network with 53 inputs and 49 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       62
ABC RESULTS:            ANDNOT cells:       63
ABC RESULTS:              AOI3 cells:       35
ABC RESULTS:               MUX cells:       33
ABC RESULTS:              NAND cells:       21
ABC RESULTS:               NOR cells:       22
ABC RESULTS:               NOT cells:       21
ABC RESULTS:              OAI3 cells:       18
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:       66
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:              XNOR cells:       49
ABC RESULTS:               XOR cells:       84
ABC RESULTS:        internal signals:      571
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       49
Removing temp directory.

2.23.2. Extracting gate netlist of module `\module161' to `<abc-temp-dir>/input.blif'..
Extracted 1042 gates and 1152 wires to a netlist network with 108 inputs and 94 outputs.

2.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       33
ABC RESULTS:            ANDNOT cells:      182
ABC RESULTS:              AOI3 cells:       51
ABC RESULTS:               MUX cells:       90
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       29
ABC RESULTS:               NOT cells:       57
ABC RESULTS:              OAI3 cells:       18
ABC RESULTS:                OR cells:      141
ABC RESULTS:             ORNOT cells:       32
ABC RESULTS:              XNOR cells:       71
ABC RESULTS:               XOR cells:      156
ABC RESULTS:        internal signals:      950
ABC RESULTS:           input signals:      108
ABC RESULTS:          output signals:       94
Removing temp directory.

2.23.3. Extracting gate netlist of module `\module198' to `<abc-temp-dir>/input.blif'..
Extracted 521 gates and 607 wires to a netlist network with 84 inputs and 50 outputs.

2.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       50
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               MUX cells:       49
ABC RESULTS:              NAND cells:       13
ABC RESULTS:               NOR cells:       11
ABC RESULTS:               NOT cells:       20
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:              OAI4 cells:       10
ABC RESULTS:                OR cells:      110
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:              XNOR cells:        9
ABC RESULTS:               XOR cells:       33
ABC RESULTS:        internal signals:      473
ABC RESULTS:           input signals:       84
ABC RESULTS:          output signals:       50
Removing temp directory.

2.23.4. Extracting gate netlist of module `\module21' to `<abc-temp-dir>/input.blif'..
Extracted 348 gates and 421 wires to a netlist network with 71 inputs and 17 outputs.

2.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:       34
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:               MUX cells:       41
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:        5
ABC RESULTS:                OR cells:       56
ABC RESULTS:             ORNOT cells:       14
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:       26
ABC RESULTS:        internal signals:      333
ABC RESULTS:           input signals:       71
ABC RESULTS:          output signals:       17
Removing temp directory.

2.23.5. Extracting gate netlist of module `\module46' to `<abc-temp-dir>/input.blif'..
Extracted 819 gates and 925 wires to a netlist network with 104 inputs and 83 outputs.

2.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       14
ABC RESULTS:            ANDNOT cells:      112
ABC RESULTS:              AOI3 cells:       13
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:      120
ABC RESULTS:              NAND cells:       68
ABC RESULTS:               NOR cells:       37
ABC RESULTS:               NOT cells:       41
ABC RESULTS:              OAI3 cells:       15
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:      214
ABC RESULTS:             ORNOT cells:       23
ABC RESULTS:              XNOR cells:       15
ABC RESULTS:               XOR cells:       47
ABC RESULTS:        internal signals:      738
ABC RESULTS:           input signals:      104
ABC RESULTS:          output signals:       83
Removing temp directory.

2.23.6. Extracting gate netlist of module `\module74' to `<abc-temp-dir>/input.blif'..
Extracted 2307 gates and 2625 wires to a netlist network with 316 inputs and 269 outputs.

2.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       61
ABC RESULTS:            ANDNOT cells:      187
ABC RESULTS:              AOI3 cells:       43
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:      252
ABC RESULTS:              NAND cells:       53
ABC RESULTS:               NOR cells:       44
ABC RESULTS:               NOT cells:       81
ABC RESULTS:              OAI3 cells:       43
ABC RESULTS:                OR cells:      286
ABC RESULTS:             ORNOT cells:       31
ABC RESULTS:              XNOR cells:       57
ABC RESULTS:               XOR cells:       97
ABC RESULTS:              ZERO cells:       26
ABC RESULTS:        internal signals:     2040
ABC RESULTS:           input signals:      316
ABC RESULTS:          output signals:      269
Removing temp directory.

2.23.7. Extracting gate netlist of module `\module86' to `<abc-temp-dir>/input.blif'..
Extracted 459 gates and 495 wires to a netlist network with 34 inputs and 46 outputs.

2.23.7.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       14
ABC RESULTS:            ANDNOT cells:       63
ABC RESULTS:              AOI3 cells:       14
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:               MUX cells:       26
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:       12
ABC RESULTS:               NOT cells:       30
ABC RESULTS:              OAI3 cells:        7
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:               ONE cells:        1
ABC RESULTS:                OR cells:       59
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              XNOR cells:       31
ABC RESULTS:               XOR cells:       70
ABC RESULTS:        internal signals:      415
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       46
Removing temp directory.

2.23.8. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1761 gates and 1859 wires to a netlist network with 96 inputs and 54 outputs.

2.23.8.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.8.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       15
ABC RESULTS:            ANDNOT cells:      213
ABC RESULTS:              AOI3 cells:       70
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:      179
ABC RESULTS:              NAND cells:       52
ABC RESULTS:               NOR cells:       58
ABC RESULTS:               NOT cells:       80
ABC RESULTS:              OAI3 cells:       26
ABC RESULTS:                OR cells:      453
ABC RESULTS:             ORNOT cells:       36
ABC RESULTS:              XNOR cells:       35
ABC RESULTS:               XOR cells:      165
ABC RESULTS:        internal signals:     1709
ABC RESULTS:           input signals:       96
ABC RESULTS:          output signals:       54
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
<suppressed ~9 debug messages>
Optimizing module module161.
<suppressed ~4 debug messages>
Optimizing module module198.
<suppressed ~2 debug messages>
Optimizing module module21.
Optimizing module module46.
<suppressed ~15 debug messages>
Optimizing module module74.
<suppressed ~16 debug messages>
Optimizing module module86.
Optimizing module top.
<suppressed ~45 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
<suppressed ~21 debug messages>
Finding identical cells in module `\module198'.
<suppressed ~3 debug messages>
Finding identical cells in module `\module21'.
<suppressed ~9 debug messages>
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
<suppressed ~39 debug messages>
Finding identical cells in module `\module86'.
<suppressed ~3 debug messages>
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 27 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$12409 ($_DFF_P_) from module module74.
Replaced 1 DFF cells.

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 3585 unused wires.
<suppressed ~12 debug messages>

2.24.5. Rerunning OPT passes. (Removed registers in this run.)

2.24.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module module125.
Optimizing module module161.
Optimizing module module198.
Optimizing module module21.
Optimizing module module46.
Optimizing module module74.
Optimizing module module86.
Optimizing module top.

2.24.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\module125'.
Finding identical cells in module `\module161'.
Finding identical cells in module `\module198'.
Finding identical cells in module `\module21'.
Finding identical cells in module `\module46'.
Finding identical cells in module `\module74'.
Finding identical cells in module `\module86'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.24.8. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \module125..
Finding unused cells or wires in module \module161..
Finding unused cells or wires in module \module198..
Finding unused cells or wires in module \module21..
Finding unused cells or wires in module \module46..
Finding unused cells or wires in module \module74..
Finding unused cells or wires in module \module86..
Finding unused cells or wires in module \top..

2.24.10. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.26. Printing statistics.

=== module125 ===

   Number of wires:                475
   Number of wire bits:           1076
   Number of public wires:          29
   Number of public wire bits:     601
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                521
     $_ANDNOT_                      63
     $_AND_                         62
     $_AOI3_                        35
     $_DFF_P_                       32
     $_MUX_                         33
     $_NAND_                        21
     $_NOR_                         22
     $_NOT_                         20
     $_OAI3_                        18
     $_OAI4_                         1
     $_ORNOT_                       15
     $_OR_                          66
     $_XNOR_                        49
     $_XOR_                         84

=== module161 ===

   Number of wires:                820
   Number of wire bits:           1475
   Number of public wires:          32
   Number of public wire bits:     607
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                963
     $_ANDNOT_                     178
     $_AND_                         33
     $_AOI3_                        51
     $_DFF_P_                       92
     $_MUX_                         90
     $_NAND_                        18
     $_NOR_                         26
     $_NOT_                         57
     $_OAI3_                        18
     $_ORNOT_                       32
     $_OR_                         141
     $_XNOR_                        71
     $_XOR_                        156

=== module198 ===

   Number of wires:                305
   Number of wire bits:            773
   Number of public wires:          27
   Number of public wire bits:     488
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                348
     $_ANDNOT_                      50
     $_AND_                          3
     $_AOI3_                         6
     $_DFF_P_                       23
     $_MUX_                         49
     $_NAND_                        13
     $_NOR_                         11
     $_NOT_                         19
     $_OAI3_                         6
     $_OAI4_                        10
     $_ORNOT_                        6
     $_OR_                         110
     $_XNOR_                         9
     $_XOR_                         33

=== module21 ===

   Number of wires:                229
   Number of wire bits:            838
   Number of public wires:          29
   Number of public wire bits:     470
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                238
     $_ANDNOT_                      34
     $_AND_                          8
     $_AOI3_                         1
     $_DFF_P_                       23
     $_MUX_                         41
     $_NAND_                        12
     $_NOR_                         10
     $_NOT_                          4
     $_OAI3_                         4
     $_ORNOT_                       14
     $_OR_                          54
     $_XNOR_                         6
     $_XOR_                         26
     module46                        1

=== module46 ===

   Number of wires:                665
   Number of wire bits:           1090
   Number of public wires:          19
   Number of public wire bits:     352
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                796
     $_ANDNOT_                     112
     $_AND_                         14
     $_AOI3_                        13
     $_AOI4_                         2
     $_DFF_P_                       75
     $_MUX_                        120
     $_NAND_                        68
     $_NOR_                         37
     $_NOT_                         40
     $_OAI3_                        15
     $_OAI4_                         1
     $_ORNOT_                       23
     $_OR_                         214
     $_XNOR_                        15
     $_XOR_                         47

=== module74 ===

   Number of wires:               1065
   Number of wire bits:           3358
   Number of public wires:          48
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1455
     $_ANDNOT_                     186
     $_AND_                         61
     $_AOI3_                        43
     $_AOI4_                         8
     $_DFF_P_                      215
     $_MUX_                        252
     $_NAND_                        53
     $_NOR_                         40
     $_NOT_                         80
     $_OAI3_                        43
     $_ORNOT_                       31
     $_OR_                         285
     $_XNOR_                        57
     $_XOR_                         97
     module125                       1
     module161                       1
     module198                       1
     module86                        1

=== module86 ===

   Number of wires:                325
   Number of wire bits:            778
   Number of public wires:          27
   Number of public wire bits:     480
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                344
     $_ANDNOT_                      63
     $_AND_                         14
     $_AOI3_                        14
     $_AOI4_                         1
     $_DFF_P_                        1
     $_MUX_                         26
     $_NAND_                         8
     $_NOR_                         12
     $_NOT_                         30
     $_OAI3_                         7
     $_OAI4_                         1
     $_ORNOT_                        8
     $_OR_                          59
     $_XNOR_                        30
     $_XOR_                         70

=== top ===

   Number of wires:               1369
   Number of wire bits:           2977
   Number of public wires:          34
   Number of public wire bits:     611
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1404
     $_ANDNOT_                     211
     $_AND_                         15
     $_AOI3_                        70
     $_AOI4_                         2
     $_DFF_P_                       19
     $_MUX_                        179
     $_NAND_                        52
     $_NOR_                         58
     $_NOT_                         80
     $_OAI3_                        26
     $_ORNOT_                       36
     $_OR_                         453
     $_XNOR_                        35
     $_XOR_                        165
     module161                       1
     module21                        1
     module74                        1

2.27. Executing CHECK pass (checking for obvious problems).
checking module module125..
checking module module161..
checking module module198..
checking module module21..
checking module module46..
checking module module74..
checking module module86..
checking module top..
found and reported 0 problems.

3. Executing Verilog backend.
Dumping module `\module125'.
Dumping module `\module161'.
Dumping module `\module198'.
Dumping module `\module21'.
Dumping module `\module46'.
Dumping module `\module74'.
Dumping module `\module86'.
Dumping module `\top'.

Warnings: 22 unique messages, 22 total
End of script. Logfile hash: 2a356ad674
CPU: user 6.93s system 0.01s, MEM: 76.50 MB total, 68.35 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 43x proc (1 sec), 16% 42x opt_clean (1 sec), ...
